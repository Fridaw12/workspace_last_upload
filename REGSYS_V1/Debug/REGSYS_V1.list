
REGSYS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009adc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d0c  08009d0c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009d0c  08009d0c  00019d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d14  08009d14  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000084  08009da0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08009da0  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db49  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003412  00000000  00000000  0003dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00041010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00042928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212e2  00000000  00000000  000440e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea32  00000000  00000000  000653c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1abe  00000000  00000000  00083df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001558b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce0  00000000  00000000  00155904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000084 	.word	0x20000084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009c9c 	.word	0x08009c9c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000088 	.word	0x20000088
 8000214:	08009c9c 	.word	0x08009c9c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab8:	f000 b974 	b.w	8000da4 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	4604      	mov	r4, r0
 8000adc:	468e      	mov	lr, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d14d      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae2:	428a      	cmp	r2, r1
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	d969      	bls.n	8000bbc <__udivmoddi4+0xe8>
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	b152      	cbz	r2, 8000b04 <__udivmoddi4+0x30>
 8000aee:	fa01 f302 	lsl.w	r3, r1, r2
 8000af2:	f1c2 0120 	rsb	r1, r2, #32
 8000af6:	fa20 f101 	lsr.w	r1, r0, r1
 8000afa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afe:	ea41 0e03 	orr.w	lr, r1, r3
 8000b02:	4094      	lsls	r4, r2
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	0c21      	lsrs	r1, r4, #16
 8000b0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b0e:	fa1f f78c 	uxth.w	r7, ip
 8000b12:	fb08 e316 	mls	r3, r8, r6, lr
 8000b16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b1a:	fb06 f107 	mul.w	r1, r6, r7
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2a:	f080 811f 	bcs.w	8000d6c <__udivmoddi4+0x298>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 811c 	bls.w	8000d6c <__udivmoddi4+0x298>
 8000b34:	3e02      	subs	r6, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b40:	fb08 3310 	mls	r3, r8, r0, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb00 f707 	mul.w	r7, r0, r7
 8000b4c:	42a7      	cmp	r7, r4
 8000b4e:	d90a      	bls.n	8000b66 <__udivmoddi4+0x92>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b58:	f080 810a 	bcs.w	8000d70 <__udivmoddi4+0x29c>
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	f240 8107 	bls.w	8000d70 <__udivmoddi4+0x29c>
 8000b62:	4464      	add	r4, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6a:	1be4      	subs	r4, r4, r7
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	b11d      	cbz	r5, 8000b78 <__udivmoddi4+0xa4>
 8000b70:	40d4      	lsrs	r4, r2
 8000b72:	2300      	movs	r3, #0
 8000b74:	e9c5 4300 	strd	r4, r3, [r5]
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0xc2>
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	f000 80ef 	beq.w	8000d66 <__udivmoddi4+0x292>
 8000b88:	2600      	movs	r6, #0
 8000b8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8e:	4630      	mov	r0, r6
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	fab3 f683 	clz	r6, r3
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d14a      	bne.n	8000c34 <__udivmoddi4+0x160>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xd4>
 8000ba2:	4282      	cmp	r2, r0
 8000ba4:	f200 80f9 	bhi.w	8000d9a <__udivmoddi4+0x2c6>
 8000ba8:	1a84      	subs	r4, r0, r2
 8000baa:	eb61 0303 	sbc.w	r3, r1, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e0      	beq.n	8000b78 <__udivmoddi4+0xa4>
 8000bb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bba:	e7dd      	b.n	8000b78 <__udivmoddi4+0xa4>
 8000bbc:	b902      	cbnz	r2, 8000bc0 <__udivmoddi4+0xec>
 8000bbe:	deff      	udf	#255	; 0xff
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	f040 8092 	bne.w	8000cee <__udivmoddi4+0x21a>
 8000bca:	eba1 010c 	sub.w	r1, r1, ip
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2601      	movs	r6, #1
 8000bd8:	0c20      	lsrs	r0, r4, #16
 8000bda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bde:	fb07 1113 	mls	r1, r7, r3, r1
 8000be2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be6:	fb0e f003 	mul.w	r0, lr, r3
 8000bea:	4288      	cmp	r0, r1
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x12c>
 8000bee:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x12a>
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2c0>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	1a09      	subs	r1, r1, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c08:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x156>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x154>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2ca>
 8000c28:	4608      	mov	r0, r1
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c32:	e79c      	b.n	8000b6e <__udivmoddi4+0x9a>
 8000c34:	f1c6 0720 	rsb	r7, r6, #32
 8000c38:	40b3      	lsls	r3, r6
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa20 f407 	lsr.w	r4, r0, r7
 8000c46:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4a:	431c      	orrs	r4, r3
 8000c4c:	40f9      	lsrs	r1, r7
 8000c4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c52:	fa00 f306 	lsl.w	r3, r0, r6
 8000c56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c5a:	0c20      	lsrs	r0, r4, #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fb09 1118 	mls	r1, r9, r8, r1
 8000c64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c68:	fb08 f00e 	mul.w	r0, r8, lr
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b8>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2bc>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2bc>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1a09      	subs	r1, r1, r0
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c94:	fb09 1110 	mls	r1, r9, r0, r1
 8000c98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	458e      	cmp	lr, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1e2>
 8000ca4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2b4>
 8000cae:	458e      	cmp	lr, r1
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2b4>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4461      	add	r1, ip
 8000cb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cba:	fba0 9402 	umull	r9, r4, r0, r2
 8000cbe:	eba1 010e 	sub.w	r1, r1, lr
 8000cc2:	42a1      	cmp	r1, r4
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46a6      	mov	lr, r4
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x2a4>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x2a0>
 8000ccc:	b15d      	cbz	r5, 8000ce6 <__udivmoddi4+0x212>
 8000cce:	ebb3 0208 	subs.w	r2, r3, r8
 8000cd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cda:	fa22 f306 	lsr.w	r3, r2, r6
 8000cde:	40f1      	lsrs	r1, r6
 8000ce0:	431f      	orrs	r7, r3
 8000ce2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	40d8      	lsrs	r0, r3
 8000cf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4301      	orrs	r1, r0
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d10:	0c0b      	lsrs	r3, r1, #16
 8000d12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d16:	fb00 f60e 	mul.w	r6, r0, lr
 8000d1a:	429e      	cmp	r6, r3
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x260>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b8>
 8000d2c:	429e      	cmp	r6, r3
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b8>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	1b9b      	subs	r3, r3, r6
 8000d36:	b289      	uxth	r1, r1
 8000d38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb06 f30e 	mul.w	r3, r6, lr
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x28a>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2b0>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2b0>
 8000d5a:	3e02      	subs	r6, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	1ac9      	subs	r1, r1, r3
 8000d60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0x104>
 8000d66:	462e      	mov	r6, r5
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e705      	b.n	8000b78 <__udivmoddi4+0xa4>
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	e6e3      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6f8      	b.n	8000b66 <__udivmoddi4+0x92>
 8000d74:	454b      	cmp	r3, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f8>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d80:	3801      	subs	r0, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f8>
 8000d84:	4646      	mov	r6, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x28a>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1e2>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x260>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b8>
 8000d94:	3b02      	subs	r3, #2
 8000d96:	4461      	add	r1, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x12c>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e709      	b.n	8000bb2 <__udivmoddi4+0xde>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x156>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <STTS75_Init>:
#include "STTS75.h"
#include "stm32g4xx_hal_i2c.h"
#include "stm32g4xx_hal.h"

void STTS75_Init(STTS75 *sensor, I2C_HandleTypeDef *hi2c, uint32_t resolution)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
    STTS75_StatusTypeDef retval = STTS75_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	75fb      	strb	r3, [r7, #23]
    sensor->hi2c = hi2c;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	601a      	str	r2, [r3, #0]

    if (resolution != STTS75_9BIT)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <STTS75_Init+0x24>
    {
        STTS75_Write_Bitsize(sensor, resolution);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 f8ac 	bl	8000f24 <STTS75_Write_Bitsize>
    }

}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <STTS75_Read_Regsiter>:
STTS75_StatusTypeDef STTS75_Read_Regsiter(STTS75 *sensor, uint8_t reg, uint8_t *rx_buf)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	72fb      	strb	r3, [r7, #11]
    return (STTS75_StatusTypeDef) HAL_I2C_Mem_Read(sensor->hi2c, STTS75_I2C_AD_reg, reg, 1, rx_buf, 1, 1000);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2190      	movs	r1, #144	; 0x90
 8000dfc:	f005 fcd4 	bl	80067a8 <HAL_I2C_Mem_Read>
 8000e00:	4603      	mov	r3, r0
    //
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <STTS75_Read_Temp>:

STTS75_StatusTypeDef STTS75_Read_Temp(STTS75 *sensor)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af04      	add	r7, sp, #16
 8000e12:	6078      	str	r0, [r7, #4]
    STTS75_StatusTypeDef retval;
    sensor->error = 0x00;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	771a      	strb	r2, [r3, #28]

    //reg-kort
    uint8_t rx_buf[2];
    retval = ( STTS75_StatusTypeDef)HAL_I2C_Mem_Read(sensor->hi2c, STTS75_I2C_AD_reg, STTS75_TEMP_REG, 1, rx_buf, 2, 1000);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2302      	movs	r3, #2
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2200      	movs	r2, #0
 8000e32:	2190      	movs	r1, #144	; 0x90
 8000e34:	f005 fcb8 	bl	80067a8 <HAL_I2C_Mem_Read>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]

    if (retval != STTS75_OK) {
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d004      	beq.n	8000e4c <STTS75_Read_Temp+0x40>
    	sensor->error = 0xC8U;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	22c8      	movs	r2, #200	; 0xc8
 8000e46:	771a      	strb	r2, [r3, #28]
    	return retval;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	e063      	b.n	8000f14 <STTS75_Read_Temp+0x108>
    }
    sensor->temp_raw = rx_buf[0] << 8 | rx_buf[1];
 8000e4c:	7b3b      	ldrb	r3, [r7, #12]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	809a      	strh	r2, [r3, #4]
    sensor->temp_degc_reg = (float) (sensor->temp_raw / 256.0f)*100;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000f1c <STTS75_Read_Temp+0x110>
 8000e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e74:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000f20 <STTS75_Read_Temp+0x114>
 8000e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edc3 7a02 	vstr	s15, [r3, #8]

    //denne verdien logges på til CAN og COM
    sensor->temp_16bit_reg =(uint16_t) ((sensor->temp_degc_reg));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	821a      	strh	r2, [r3, #16]
    //driv-kort

    // ( Dersom får error: statusen til STTS75_StatusTypeDef er 1 )
    // retval -> returvalue

    retval = ( STTS75_StatusTypeDef)HAL_I2C_Mem_Read(sensor->hi2c, STTS75_I2C_AD_driv, STTS75_TEMP_REG, 1, rx_buf, 2, 1000);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2200      	movs	r2, #0
 8000eae:	2192      	movs	r1, #146	; 0x92
 8000eb0:	f005 fc7a 	bl	80067a8 <HAL_I2C_Mem_Read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]

    if (retval != STTS75_OK) {
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <STTS75_Read_Temp+0xbc>
    	sensor->error = 0xC8U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	22c8      	movs	r2, #200	; 0xc8
 8000ec2:	771a      	strb	r2, [r3, #28]
    	return retval;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	e025      	b.n	8000f14 <STTS75_Read_Temp+0x108>
    }
    sensor->temp_raw = rx_buf[0] << 8 | rx_buf[1];
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	809a      	strh	r2, [r3, #4]
    sensor->temp_degc_driv = (float) (sensor->temp_raw / 256.0f)*100;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000f1c <STTS75_Read_Temp+0x110>
 8000eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f20 <STTS75_Read_Temp+0x114>
 8000ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a03 	vstr	s15, [r3, #12]

    //denne verdien logges på til CAN og COM
    sensor->temp_16bit_driv =(uint16_t) ((sensor->temp_degc_driv));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f08:	ee17 3a90 	vmov	r3, s15
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	825a      	strh	r2, [r3, #18]

    return retval;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	43800000 	.word	0x43800000
 8000f20:	42c80000 	.word	0x42c80000

08000f24 <STTS75_Write_Bitsize>:


STTS75_StatusTypeDef STTS75_Write_Bitsize(STTS75 *sensor, uint32_t resolution)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af04      	add	r7, sp, #16
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	STTS75_StatusTypeDef retval = STTS75_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
	uint8_t bits_in_config_reg;
	uint8_t look_in_conf_reg;

	// 1.
	//read to confirm bit size change
	retval = STTS75_Read_Regsiter(sensor, STTS75_CONFIG_REG, &look_in_conf_reg);
 8000f32:	f107 030d 	add.w	r3, r7, #13
 8000f36:	461a      	mov	r2, r3
 8000f38:	2101      	movs	r1, #1
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff4a 	bl	8000dd4 <STTS75_Read_Regsiter>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
	if (retval != STTS75_OK) return retval;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <STTS75_Write_Bitsize+0x2a>
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	e039      	b.n	8000fc2 <STTS75_Write_Bitsize+0x9e>
	sensor->config_register = look_in_conf_reg;
 8000f4e:	7b7a      	ldrb	r2, [r7, #13]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	755a      	strb	r2, [r3, #21]


	//HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	bits_in_config_reg &= ~(0x03 << 5); //settter de to config register bits til 0 ved '&' med ~0x03<<5 = 110011111
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73bb      	strb	r3, [r7, #14]
	bits_in_config_reg |= resolution; // gjør en eller operasjon for å fylle de to plassene med ønsket bit
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	73bb      	strb	r3, [r7, #14]


	//2.
	retval = (STTS75_StatusTypeDef) HAL_I2C_Mem_Write(sensor->hi2c, 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 030e 	add.w	r3, r7, #14
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2201      	movs	r2, #1
 8000f82:	2190      	movs	r1, #144	; 0x90
 8000f84:	f005 fafc 	bl	8006580 <HAL_I2C_Mem_Write>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
            STTS75_WRITE,STTS75_CONFIG_REG, 1, 
            &bits_in_config_reg, 1, 1000);

	if (retval != STTS75_OK) return retval;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <STTS75_Write_Bitsize+0x72>
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	e015      	b.n	8000fc2 <STTS75_Write_Bitsize+0x9e>


	//3.
	//read to confirm bit size change
	retval = STTS75_Read_Regsiter(sensor, STTS75_CONFIG_REG, &look_in_conf_reg);
 8000f96:	f107 030d 	add.w	r3, r7, #13
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff18 	bl	8000dd4 <STTS75_Read_Regsiter>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	if (retval != STTS75_OK) return retval;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <STTS75_Write_Bitsize+0x8e>
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	e007      	b.n	8000fc2 <STTS75_Write_Bitsize+0x9e>

	//sensor->bit size = choose_bit;
	sensor->config_register = look_in_conf_reg;
 8000fb2:	7b7a      	ldrb	r2, [r7, #13]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	755a      	strb	r2, [r3, #21]
	sensor->bitsize = resolution;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	751a      	strb	r2, [r3, #20]
	return retval;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <manipulator_data_lagring>:
//	}
//	if((operator_manpu_int.endre_frekvens & 0x10)){
//
//	}

void manipulator_data_lagring(void){
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
	 operator_manpu_forrige1.gripe =  operator_manpu.gripe;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <manipulator_data_lagring+0x90>)
 8000fd8:	6013      	str	r3, [r2, #0]
	 operator_manpu_forrige1.snurr = operator_manpu.snurr;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <manipulator_data_lagring+0x90>)
 8000fe0:	6053      	str	r3, [r2, #4]
	 operator_manpu_forrige1.sving = operator_manpu.sving;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <manipulator_data_lagring+0x90>)
 8000fe8:	6093      	str	r3, [r2, #8]
	 operator_manpu_forrige1.skyv = operator_manpu.skyv;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <manipulator_data_lagring+0x8c>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <manipulator_data_lagring+0x90>)
 8000ff0:	60d3      	str	r3, [r2, #12]

	 operator_manpu_forrige1_int.gripe = (int8_t) operator_manpu_forrige1.gripe;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <manipulator_data_lagring+0x90>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	b25a      	sxtb	r2, r3
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <manipulator_data_lagring+0x94>)
 8001006:	701a      	strb	r2, [r3, #0]
	 operator_manpu_forrige1_int.snurr = (int8_t) operator_manpu_forrige1.snurr;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <manipulator_data_lagring+0x90>)
 800100a:	edd3 7a01 	vldr	s15, [r3, #4]
 800100e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001012:	edc7 7a01 	vstr	s15, [r7, #4]
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	b25a      	sxtb	r2, r3
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <manipulator_data_lagring+0x94>)
 800101c:	705a      	strb	r2, [r3, #1]
	 operator_manpu_forrige1_int.sving = (int8_t) operator_manpu_forrige1.sving;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <manipulator_data_lagring+0x90>)
 8001020:	edd3 7a02 	vldr	s15, [r3, #8]
 8001024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001028:	edc7 7a01 	vstr	s15, [r7, #4]
 800102c:	793b      	ldrb	r3, [r7, #4]
 800102e:	b25a      	sxtb	r2, r3
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <manipulator_data_lagring+0x94>)
 8001032:	709a      	strb	r2, [r3, #2]
	 operator_manpu_forrige1_int.skyv =  (int8_t) operator_manpu_forrige1.skyv;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <manipulator_data_lagring+0x90>)
 8001036:	edd3 7a03 	vldr	s15, [r3, #12]
 800103a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001042:	793b      	ldrb	r3, [r7, #4]
 8001044:	b25a      	sxtb	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <manipulator_data_lagring+0x94>)
 8001048:	70da      	strb	r2, [r3, #3]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001b0 	.word	0x200001b0
 800105c:	200001c0 	.word	0x200001c0
 8001060:	200001d4 	.word	0x200001d4

08001064 <sjekk_for_forskjellig_fortegn>:


uint8_t sjekk_for_forskjellig_fortegn(int8_t var_naa,int8_t var_forrige){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
	// return 1 trenger ikke skrive til pinne for rotasjonsretning
	if((var_naa > 0) & (var_forrige > 0)){
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	bfcc      	ite	gt
 800107c:	2301      	movgt	r3, #1
 800107e:	2300      	movle	r3, #0
 8001080:	b2da      	uxtb	r2, r3
 8001082:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfcc      	ite	gt
 800108a:	2301      	movgt	r3, #1
 800108c:	2300      	movle	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4013      	ands	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <sjekk_for_forskjellig_fortegn+0x38>
		return 1;
 8001098:	2301      	movs	r3, #1
 800109a:	e05c      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa < 0) & (var_forrige < 0)){
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	09db      	lsrs	r3, r3, #7
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	09db      	lsrs	r3, r3, #7
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <sjekk_for_forskjellig_fortegn+0x50>
		return 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e050      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa < 0) & (var_forrige > 0)){
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	09db      	lsrs	r3, r3, #7
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bfcc      	ite	gt
 80010c2:	2301      	movgt	r3, #1
 80010c4:	2300      	movle	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <sjekk_for_forskjellig_fortegn+0x70>
		return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e040      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa > 0) & (var_forrige < 0)){
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfcc      	ite	gt
 80010dc:	2301      	movgt	r3, #1
 80010de:	2300      	movle	r3, #0
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	09db      	lsrs	r3, r3, #7
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <sjekk_for_forskjellig_fortegn+0x90>
		return 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e030      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa == 0) & (var_forrige != 0)){
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2da      	uxtb	r2, r3
 8001102:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4013      	ands	r3, r2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <sjekk_for_forskjellig_fortegn+0xb8>
			return 0;
 8001118:	2300      	movs	r3, #0
 800111a:	e01c      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa != 0) & (var_forrige == 0)){
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2da      	uxtb	r2, r3
 800112a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4013      	ands	r3, r2
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <sjekk_for_forskjellig_fortegn+0xe0>
			return 10;
 8001140:	230a      	movs	r3, #10
 8001142:	e008      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else if((var_naa == 0) & (var_forrige == 0)){
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	4313      	orrs	r3, r2
 800114a:	b25b      	sxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <sjekk_for_forskjellig_fortegn+0xf0>
			return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e000      	b.n	8001156 <sjekk_for_forskjellig_fortegn+0xf2>
	}
	else{
		return 13;
 8001154:	230d      	movs	r3, #13
	}
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <sett_rotasjonsretning>:


void sett_rotasjonsretning(float manpulator_variabel,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	ed87 0a03 	vstr	s0, [r7, #12]
 800116c:	60b8      	str	r0, [r7, #8]
 800116e:	460b      	mov	r3, r1
 8001170:	80fb      	strh	r3, [r7, #6]
    if(manpulator_variabel > 0){
 8001172:	edd7 7a03 	vldr	s15, [r7, #12]
 8001176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	dd06      	ble.n	800118e <sett_rotasjonsretning+0x2c>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET); // én retning
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	2201      	movs	r2, #1
 8001184:	4619      	mov	r1, r3
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	f005 f952 	bl	8006430 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);// annen retning
    }
    else{
        //
    }
}
 800118c:	e00d      	b.n	80011aa <sett_rotasjonsretning+0x48>
    else if(manpulator_variabel < 0){
 800118e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	d400      	bmi.n	800119e <sett_rotasjonsretning+0x3c>
}
 800119c:	e005      	b.n	80011aa <sett_rotasjonsretning+0x48>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);// annen retning
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f005 f943 	bl	8006430 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	0000      	movs	r0, r0
 80011b4:	0000      	movs	r0, r0
	...

080011b8 <beregn_ARR>:

uint16_t beregn_ARR(float manpulator_variabel,float maks_frek, float sensitivitet){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a03 	vstr	s0, [r7, #12]
 80011c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80011c6:	ed87 1a01 	vstr	s2, [r7, #4]
    float NUM = (1/maks_frek) / 0.000001;
 80011ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011d6:	ee16 0a90 	vmov	r0, s13
 80011da:	f7ff f981 	bl	80004e0 <__aeabi_f2d>
 80011de:	a320      	add	r3, pc, #128	; (adr r3, 8001260 <beregn_ARR+0xa8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fafe 	bl	80007e4 <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc08 	bl	8000a04 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	61fb      	str	r3, [r7, #28]
    float a = ( -(65535-NUM) / 100);
 80011f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001258 <beregn_ARR+0xa0>
 80011fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	eeb1 7a67 	vneg.f32	s14, s15
 8001208:	eddf 6a14 	vldr	s13, [pc, #80]	; 800125c <beregn_ARR+0xa4>
 800120c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001210:	edc7 7a06 	vstr	s15, [r7, #24]

    float manpu_var = fabs(manpulator_variabel)*sensitivitet;
 8001214:	edd7 7a03 	vldr	s15, [r7, #12]
 8001218:	eef0 7ae7 	vabs.f32	s15, s15
 800121c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	edc7 7a05 	vstr	s15, [r7, #20]

    float ARR = (manpu_var*a) + 65535.0;
 8001228:	ed97 7a05 	vldr	s14, [r7, #20]
 800122c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001258 <beregn_ARR+0xa0>
 8001238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800123c:	edc7 7a04 	vstr	s15, [r7, #16]
    return (uint16_t) ARR;
 8001240:	edd7 7a04 	vldr	s15, [r7, #16]
 8001244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001248:	ee17 3a90 	vmov	r3, s15
 800124c:	b29b      	uxth	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	477fff00 	.word	0x477fff00
 800125c:	42c80000 	.word	0x42c80000
 8001260:	a0b5ed8d 	.word	0xa0b5ed8d
 8001264:	3eb0c6f7 	.word	0x3eb0c6f7

08001268 <beregn_CCR_snurr>:

uint16_t beregn_CCR_snurr(float manpulator_variabel,float maks_bredde, float sensitivitet){
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001272:	edc7 0a02 	vstr	s1, [r7, #8]
 8001276:	ed87 1a01 	vstr	s2, [r7, #4]
    float a = ((maks_bredde - 1500)) /100;
 800127a:	edd7 7a02 	vldr	s15, [r7, #8]
 800127e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001314 <beregn_CCR_snurr+0xac>
 8001282:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001286:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001318 <beregn_CCR_snurr+0xb0>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	edc7 7a06 	vstr	s15, [r7, #24]
    float bredde;
    float manpu_var = manpulator_variabel*sensitivitet;
 8001292:	ed97 7a03 	vldr	s14, [r7, #12]
 8001296:	edd7 7a01 	vldr	s15, [r7, #4]
 800129a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129e:	edc7 7a05 	vstr	s15, [r7, #20]

    if (manpu_var>0){
 80012a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	dd0c      	ble.n	80012ca <beregn_CCR_snurr+0x62>
        bredde = manpu_var*a + 1500;
 80012b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80012b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001314 <beregn_CCR_snurr+0xac>
 80012c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012c4:	edc7 7a07 	vstr	s15, [r7, #28]
 80012c8:	e015      	b.n	80012f6 <beregn_CCR_snurr+0x8e>
    }
    else if(manpu_var<0){
 80012ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	d50c      	bpl.n	80012f2 <beregn_CCR_snurr+0x8a>
        bredde = manpu_var*a + 1500;
 80012d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80012dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001314 <beregn_CCR_snurr+0xac>
 80012e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ec:	edc7 7a07 	vstr	s15, [r7, #28]
 80012f0:	e001      	b.n	80012f6 <beregn_CCR_snurr+0x8e>
    }
    else{
        bredde = 1500;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <beregn_CCR_snurr+0xb4>)
 80012f4:	61fb      	str	r3, [r7, #28]
    }
    return (int16_t) bredde;
 80012f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 3a90 	vmov	r3, s15
 8001302:	b21b      	sxth	r3, r3
 8001304:	b29b      	uxth	r3, r3
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	44bb8000 	.word	0x44bb8000
 8001318:	42c80000 	.word	0x42c80000
 800131c:	44bb8000 	.word	0x44bb8000

08001320 <behandle_gripe>:
//    sum_bidrag.vhb = (1-a) *sum_bidrag_forrige1.vhb +   a*sum_bidrag.vhb ;
//    sum_bidrag.vvf = (1-a) *sum_bidrag_forrige1.vvf +   a*sum_bidrag.vvf;
//    sum_bidrag.vvb = (1-a) *sum_bidrag_forrige1.vvb +   a*sum_bidrag.vvb;
//}

void behandle_gripe(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	//// først sjekke om 0 (dersom under 1 eller -1 regnes som 0 her)

	//!(ENDRE_FREKVENS & 0x02)
	if(ENDRE_FREKVENS){
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <behandle_gripe+0xe8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d012      	beq.n	8001354 <behandle_gripe+0x34>
/*
 	 	float a = lowpass_manpu_steg.a;
		operator_manpu.gripe = (1-a)*operator_manpu_forrige1.gripe + a*operator_manpu.gripe ;
*/

		manu_ARR.gripe = beregn_ARR(operator_manpu.gripe,1100, manpu_sensitivitet.gripe);
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <behandle_gripe+0xec>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <behandle_gripe+0xf0>)
 8001336:	ed93 7a00 	vldr	s14, [r3]
 800133a:	eeb0 1a47 	vmov.f32	s2, s14
 800133e:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001414 <behandle_gripe+0xf4>
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	f7ff ff37 	bl	80011b8 <beregn_ARR>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <behandle_gripe+0xf8>)
 8001350:	801a      	strh	r2, [r3, #0]
 8001352:	e025      	b.n	80013a0 <behandle_gripe+0x80>
	}

	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.gripe > 0){
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <behandle_gripe+0xec>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dd03      	ble.n	800136c <behandle_gripe+0x4c>
			operator_manpu.gripe = 100;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <behandle_gripe+0xec>)
 8001366:	4a2d      	ldr	r2, [pc, #180]	; (800141c <behandle_gripe+0xfc>)
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e00a      	b.n	8001382 <behandle_gripe+0x62>
		}
		else if(operator_manpu.gripe < 0){
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <behandle_gripe+0xec>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	d502      	bpl.n	8001382 <behandle_gripe+0x62>
			operator_manpu.gripe = -100;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <behandle_gripe+0xec>)
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <behandle_gripe+0x100>)
 8001380:	601a      	str	r2, [r3, #0]
 	 	float a = lowpass_manpu_steg.a;
		operator_manpu.gripe = (1-a)*operator_manpu_forrige1.gripe + a*operator_manpu.gripe ;

*/
		// her maks frekvens bare satt til 200Hz, kan endre
		manu_ARR.gripe = beregn_ARR(operator_manpu.gripe, 1100, 1.0);
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <behandle_gripe+0xec>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800138c:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001414 <behandle_gripe+0xf4>
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	f7ff ff10 	bl	80011b8 <beregn_ARR>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <behandle_gripe+0xf8>)
 800139e:	801a      	strh	r2, [r3, #0]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.gripe,operator_manpu_forrige1_int.gripe);
 80013a0:	4b20      	ldr	r3, [pc, #128]	; (8001424 <behandle_gripe+0x104>)
 80013a2:	f993 3000 	ldrsb.w	r3, [r3]
 80013a6:	4a20      	ldr	r2, [pc, #128]	; (8001428 <behandle_gripe+0x108>)
 80013a8:	f992 2000 	ldrsb.w	r2, [r2]
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe58 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]

	if(sjekk_var){
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d019      	beq.n	80013f2 <behandle_gripe+0xd2>
		// rotasjonsretning blir bare satt dersom forrige verdi var 0.
		if(sjekk_var == 10){
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b0a      	cmp	r3, #10
 80013c2:	d109      	bne.n	80013d8 <behandle_gripe+0xb8>
			// PC12 grip flipp
			sett_rotasjonsretning(operator_manpu.gripe,GPIOC,GPIO_PIN_11);
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <behandle_gripe+0xec>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <behandle_gripe+0x10c>)
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	f7ff fec5 	bl	8001162 <sett_rotasjonsretning>
		}

		/// skriv til timer registere
		TIM16 -> ARR = manu_ARR.gripe - 1 ;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <behandle_gripe+0xf8>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <behandle_gripe+0x110>)
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM16 -> CCR1 = (manu_ARR.gripe/2) - 1 ; // PA4 gripe TIM3_CH2
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <behandle_gripe+0xf8>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	085b      	lsrs	r3, r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	1e5a      	subs	r2, r3, #1
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <behandle_gripe+0x110>)
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.gripe = 0;
		//TIM3 -> ARR = 4999 ;
		//TIM3 -> CCR2 = 2499 ;
	}

}
 80013f0:	e006      	b.n	8001400 <behandle_gripe+0xe0>
		TIM16 -> CCR1 = 0; // NB BYTTET TIMER MED SKYV
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <behandle_gripe+0x110>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.gripe = 0;
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <behandle_gripe+0xec>)
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000001 	.word	0x20000001
 800140c:	200001b0 	.word	0x200001b0
 8001410:	20000058 	.word	0x20000058
 8001414:	44898000 	.word	0x44898000
 8001418:	200001d8 	.word	0x200001d8
 800141c:	42c80000 	.word	0x42c80000
 8001420:	c2c80000 	.word	0xc2c80000
 8001424:	200001d0 	.word	0x200001d0
 8001428:	200001d4 	.word	0x200001d4
 800142c:	48000800 	.word	0x48000800
 8001430:	40014400 	.word	0x40014400

08001434 <behandle_sving>:

///// SVING ---
void behandle_sving(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	//// først sjekke om 0 (dersom under 1 eller -1 regnes som 0 her)
	//!(ENDRE_FREKVENS & 0x04)
	if(ENDRE_FREKVENS){
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <behandle_sving+0xe8>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <behandle_sving+0x34>
/*
		float a = lowpass_manpu_steg.a;
		operator_manpu.sving = (1-a)*operator_manpu_forrige1.sving + a*operator_manpu.sving;
*/

		manu_ARR.sving = beregn_ARR(operator_manpu.sving,800, manpu_sensitivitet.sving);
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <behandle_sving+0xec>)
 8001444:	edd3 7a02 	vldr	s15, [r3, #8]
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <behandle_sving+0xf0>)
 800144a:	ed93 7a02 	vldr	s14, [r3, #8]
 800144e:	eeb0 1a47 	vmov.f32	s2, s14
 8001452:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001528 <behandle_sving+0xf4>
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	f7ff fead 	bl	80011b8 <beregn_ARR>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <behandle_sving+0xf8>)
 8001464:	809a      	strh	r2, [r3, #4]
 8001466:	e025      	b.n	80014b4 <behandle_sving+0x80>
	}
	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.sving > 0){
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <behandle_sving+0xec>)
 800146a:	edd3 7a02 	vldr	s15, [r3, #8]
 800146e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	dd03      	ble.n	8001480 <behandle_sving+0x4c>
			operator_manpu.sving = 100;
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <behandle_sving+0xec>)
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <behandle_sving+0xfc>)
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	e00a      	b.n	8001496 <behandle_sving+0x62>
		}
		else if(operator_manpu.sving < 0){
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <behandle_sving+0xec>)
 8001482:	edd3 7a02 	vldr	s15, [r3, #8]
 8001486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d502      	bpl.n	8001496 <behandle_sving+0x62>
			operator_manpu.sving = -100;
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <behandle_sving+0xec>)
 8001492:	4a28      	ldr	r2, [pc, #160]	; (8001534 <behandle_sving+0x100>)
 8001494:	609a      	str	r2, [r3, #8]
/*
		float a = lowpass_manpu_steg.a;
		operator_manpu.sving = (1-a)*operator_manpu_forrige1.sving + a*operator_manpu.sving;
*/

		manu_ARR.sving = beregn_ARR(operator_manpu.sving, 800, 1.0);
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <behandle_sving+0xec>)
 8001498:	edd3 7a02 	vldr	s15, [r3, #8]
 800149c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80014a0:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001528 <behandle_sving+0xf4>
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	f7ff fe86 	bl	80011b8 <beregn_ARR>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <behandle_sving+0xf8>)
 80014b2:	809a      	strh	r2, [r3, #4]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.sving,operator_manpu_forrige1_int.sving);
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <behandle_sving+0x104>)
 80014b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014ba:	4a20      	ldr	r2, [pc, #128]	; (800153c <behandle_sving+0x108>)
 80014bc:	f992 2002 	ldrsb.w	r2, [r2, #2]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fdce 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]

	if(sjekk_var){
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d019      	beq.n	8001506 <behandle_sving+0xd2>
		// rotasjonsretning blir bare satt dersom forrige verdi var 0.
		if(sjekk_var == 10){
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b0a      	cmp	r3, #10
 80014d6:	d109      	bne.n	80014ec <behandle_sving+0xb8>
			// PC10 sving flipp
			sett_rotasjonsretning(operator_manpu.sving,GPIOC,GPIO_PIN_10);
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <behandle_sving+0xec>)
 80014da:	edd3 7a02 	vldr	s15, [r3, #8]
 80014de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e2:	4817      	ldr	r0, [pc, #92]	; (8001540 <behandle_sving+0x10c>)
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	f7ff fe3b 	bl	8001162 <sett_rotasjonsretning>
		}

		/// skriv til timer registere
		TIM15 -> ARR = manu_ARR.sving - 1 ;  // TIM15_CH1-PB14
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <behandle_sving+0xf8>)
 80014ee:	889b      	ldrh	r3, [r3, #4]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <behandle_sving+0x110>)
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM15 -> CCR1 = (manu_ARR.sving/2) - 1 ;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <behandle_sving+0xf8>)
 80014f8:	889b      	ldrh	r3, [r3, #4]
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	1e5a      	subs	r2, r3, #1
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <behandle_sving+0x110>)
 8001502:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.sving = 0;
		//TIM15 -> ARR = 4999 ;
		//TIM15 -> CCR1 = 2499 ;
	}

}
 8001504:	e006      	b.n	8001514 <behandle_sving+0xe0>
		TIM15 -> CCR1 = 0;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <behandle_sving+0x110>)
 8001508:	2200      	movs	r2, #0
 800150a:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.sving = 0;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <behandle_sving+0xec>)
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000001 	.word	0x20000001
 8001520:	200001b0 	.word	0x200001b0
 8001524:	20000058 	.word	0x20000058
 8001528:	44480000 	.word	0x44480000
 800152c:	200001d8 	.word	0x200001d8
 8001530:	42c80000 	.word	0x42c80000
 8001534:	c2c80000 	.word	0xc2c80000
 8001538:	200001d0 	.word	0x200001d0
 800153c:	200001d4 	.word	0x200001d4
 8001540:	48000800 	.word	0x48000800
 8001544:	40014000 	.word	0x40014000

08001548 <behandle_skyv>:

///// SKYV - teleskop
void behandle_skyv(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	/// ønsker at skyv/teleskop funksjon ikke skal variere på frekvens men
	/// ha fast hastighet, derfor !(ENDRE_FREKVENS & 0x08)
	/// rask men ikke beste løsning

	//!(ENDRE_FREKVENS & 0x08)
	if(ENDRE_FREKVENS){
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <behandle_skyv+0xe8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d012      	beq.n	800157c <behandle_skyv+0x34>
		float a = lowpass_manpu_steg.a;
		operator_manpu.skyv = (1-a)*operator_manpu_forrige1.skyv + a*operator_manpu.skyv;

*/

		manu_ARR.skyv = beregn_ARR(operator_manpu.skyv, 1100, manpu_sensitivitet.skyv);
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <behandle_skyv+0xec>)
 8001558:	edd3 7a03 	vldr	s15, [r3, #12]
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <behandle_skyv+0xf0>)
 800155e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001562:	eeb0 1a47 	vmov.f32	s2, s14
 8001566:	eddf 0a35 	vldr	s1, [pc, #212]	; 800163c <behandle_skyv+0xf4>
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f7ff fe23 	bl	80011b8 <beregn_ARR>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <behandle_skyv+0xf8>)
 8001578:	80da      	strh	r2, [r3, #6]
 800157a:	e025      	b.n	80015c8 <behandle_skyv+0x80>
	}
	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.skyv > 0){
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <behandle_skyv+0xec>)
 800157e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	dd03      	ble.n	8001594 <behandle_skyv+0x4c>
			operator_manpu.skyv = 100;
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <behandle_skyv+0xec>)
 800158e:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <behandle_skyv+0xfc>)
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e00a      	b.n	80015aa <behandle_skyv+0x62>
		}
		else if(operator_manpu.skyv < 0){
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <behandle_skyv+0xec>)
 8001596:	edd3 7a03 	vldr	s15, [r3, #12]
 800159a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	d502      	bpl.n	80015aa <behandle_skyv+0x62>
			operator_manpu.skyv = -100;
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <behandle_skyv+0xec>)
 80015a6:	4a28      	ldr	r2, [pc, #160]	; (8001648 <behandle_skyv+0x100>)
 80015a8:	60da      	str	r2, [r3, #12]

		float a = lowpass_manpu_steg.a;
		operator_manpu.skyv = (1-a)*operator_manpu_forrige1.skyv + a*operator_manpu.skyv;

*/
		manu_ARR.skyv = beregn_ARR(operator_manpu.skyv, 1100, 1.0);
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <behandle_skyv+0xec>)
 80015ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80015b0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80015b4:	eddf 0a21 	vldr	s1, [pc, #132]	; 800163c <behandle_skyv+0xf4>
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	f7ff fdfc 	bl	80011b8 <beregn_ARR>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <behandle_skyv+0xf8>)
 80015c6:	80da      	strh	r2, [r3, #6]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.skyv,operator_manpu_forrige1_int.skyv);
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <behandle_skyv+0x104>)
 80015ca:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015ce:	4a20      	ldr	r2, [pc, #128]	; (8001650 <behandle_skyv+0x108>)
 80015d0:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fd44 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]

	if(sjekk_var){
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d019      	beq.n	800161a <behandle_skyv+0xd2>
		// rotasjonsretning blir bare satt dersom forrige verdi var 0.
		if(sjekk_var == 10){
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b0a      	cmp	r3, #10
 80015ea:	d109      	bne.n	8001600 <behandle_skyv+0xb8>
			// PC11 skyv flipp
			sett_rotasjonsretning(operator_manpu.skyv,GPIOC,GPIO_PIN_12);
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <behandle_skyv+0xec>)
 80015ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80015f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f6:	4817      	ldr	r0, [pc, #92]	; (8001654 <behandle_skyv+0x10c>)
 80015f8:	eeb0 0a67 	vmov.f32	s0, s15
 80015fc:	f7ff fdb1 	bl	8001162 <sett_rotasjonsretning>
		}

		/// skriv til timer registere
		TIM3 -> ARR = manu_ARR.skyv - 1 ;  // PB04 , TIM16_CH1
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <behandle_skyv+0xf8>)
 8001602:	88db      	ldrh	r3, [r3, #6]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <behandle_skyv+0x110>)
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3 -> CCR2 = (manu_ARR.skyv/2) - 1 ;
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <behandle_skyv+0xf8>)
 800160c:	88db      	ldrh	r3, [r3, #6]
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	b29b      	uxth	r3, r3
 8001612:	1e5a      	subs	r2, r3, #1
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <behandle_skyv+0x110>)
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
		operator_manpu.skyv = 0;
		//TIM16 -> ARR = 4999 ;
		//TIM16 -> CCR1 = 2499 ;
	}

}
 8001618:	e006      	b.n	8001628 <behandle_skyv+0xe0>
		TIM3 -> CCR2 = 0;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <behandle_skyv+0x110>)
 800161c:	2200      	movs	r2, #0
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
		operator_manpu.skyv = 0;
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <behandle_skyv+0xec>)
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000001 	.word	0x20000001
 8001634:	200001b0 	.word	0x200001b0
 8001638:	20000058 	.word	0x20000058
 800163c:	44898000 	.word	0x44898000
 8001640:	200001d8 	.word	0x200001d8
 8001644:	42c80000 	.word	0x42c80000
 8001648:	c2c80000 	.word	0xc2c80000
 800164c:	200001d0 	.word	0x200001d0
 8001650:	200001d4 	.word	0x200001d4
 8001654:	48000800 	.word	0x48000800
 8001658:	40000400 	.word	0x40000400

0800165c <behandle_snurr>:

////////// IKKE DENNE
////// SNURR - BØRSTELØS
void behandle_snurr(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 ///ENDRE_FREKVENS & 0x10
	// dersom bit for endre frekvens lik 1, skal kunne endre frek
	if(ENDRE_FREKVENS){
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <behandle_snurr+0x128>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d02c      	beq.n	80016c4 <behandle_snurr+0x68>
		// operator manpu gripe fra operator


 	 	float a = lowpass_manpu_borste.a;
 800166a:	4b47      	ldr	r3, [pc, #284]	; (8001788 <behandle_snurr+0x12c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
		operator_manpu.snurr = (1-a)*operator_manpu_forrige1.snurr + a*operator_manpu.snurr;
 8001670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001674:	edd7 7a02 	vldr	s15, [r7, #8]
 8001678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <behandle_snurr+0x130>)
 800167e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <behandle_snurr+0x134>)
 8001688:	edd3 6a01 	vldr	s13, [r3, #4]
 800168c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001698:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <behandle_snurr+0x134>)
 800169a:	edc3 7a01 	vstr	s15, [r3, #4]


		manu_CCR.snurr = beregn_CCR_snurr(operator_manpu.snurr, 1900, manpu_sensitivitet.snurr);
 800169e:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <behandle_snurr+0x134>)
 80016a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <behandle_snurr+0x138>)
 80016a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016aa:	eeb0 1a47 	vmov.f32	s2, s14
 80016ae:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8001798 <behandle_snurr+0x13c>
 80016b2:	eeb0 0a67 	vmov.f32	s0, s15
 80016b6:	f7ff fdd7 	bl	8001268 <beregn_CCR_snurr>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <behandle_snurr+0x140>)
 80016c0:	805a      	strh	r2, [r3, #2]
 80016c2:	e03f      	b.n	8001744 <behandle_snurr+0xe8>
	}
	else{
		/// default paadrag
		/// uansett verdi fra stikke, samme paadrag
		if(operator_manpu.snurr > 0){
 80016c4:	4b32      	ldr	r3, [pc, #200]	; (8001790 <behandle_snurr+0x134>)
 80016c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	dd03      	ble.n	80016dc <behandle_snurr+0x80>
			operator_manpu.snurr = 100;
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <behandle_snurr+0x134>)
 80016d6:	4a32      	ldr	r2, [pc, #200]	; (80017a0 <behandle_snurr+0x144>)
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	e00a      	b.n	80016f2 <behandle_snurr+0x96>
		}
		else if(operator_manpu.snurr < 0){
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <behandle_snurr+0x134>)
 80016de:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d502      	bpl.n	80016f2 <behandle_snurr+0x96>
			operator_manpu.snurr = -100;
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <behandle_snurr+0x134>)
 80016ee:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <behandle_snurr+0x148>)
 80016f0:	605a      	str	r2, [r3, #4]
		}


 	 	float a = lowpass_manpu_borste.a;
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <behandle_snurr+0x12c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]
		operator_manpu.snurr = (1-a)*operator_manpu_forrige1.snurr + a*operator_manpu.snurr;
 80016f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <behandle_snurr+0x130>)
 8001706:	edd3 7a01 	vldr	s15, [r3, #4]
 800170a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <behandle_snurr+0x134>)
 8001710:	edd3 6a01 	vldr	s13, [r3, #4]
 8001714:	edd7 7a03 	vldr	s15, [r7, #12]
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <behandle_snurr+0x134>)
 8001722:	edc3 7a01 	vstr	s15, [r3, #4]


		// setter maks bredde som er fast til feks 1700, kan endres.
		manu_CCR.snurr = beregn_CCR_snurr(operator_manpu.snurr, 1900, 1.0);
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <behandle_snurr+0x134>)
 8001728:	edd3 7a01 	vldr	s15, [r3, #4]
 800172c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001730:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001798 <behandle_snurr+0x13c>
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	f7ff fd96 	bl	8001268 <beregn_CCR_snurr>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <behandle_snurr+0x140>)
 8001742:	805a      	strh	r2, [r3, #2]
	}

	uint8_t sjekk_var = sjekk_for_forskjellig_fortegn(operator_manpu_int.snurr,operator_manpu_forrige1_int.snurr);
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <behandle_snurr+0x14c>)
 8001746:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <behandle_snurr+0x150>)
 800174c:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fc86 	bl	8001064 <sjekk_for_forskjellig_fortegn>
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]

	// dersom endring av fortegn, skrur av motor for så at skus på andre retning
	// neste gang.

	/// NB SETT ØNSKET FREKVENS I IOC
	if(sjekk_var){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <behandle_snurr+0x110>
		/// skriv til timer registere
		TIM8 -> CCR1 = manu_CCR.snurr; // PC06 snurr TIM8_CH1
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <behandle_snurr+0x140>)
 8001764:	885a      	ldrh	r2, [r3, #2]
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <behandle_snurr+0x154>)
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		TIM8 -> CCR1 = 1500;
		operator_manpu.snurr = 0;
	}

}
 800176a:	e007      	b.n	800177c <behandle_snurr+0x120>
		TIM8 -> CCR1 = 1500;
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <behandle_snurr+0x154>)
 800176e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001772:	635a      	str	r2, [r3, #52]	; 0x34
		operator_manpu.snurr = 0;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <behandle_snurr+0x134>)
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000001 	.word	0x20000001
 8001788:	2000001c 	.word	0x2000001c
 800178c:	200001c0 	.word	0x200001c0
 8001790:	200001b0 	.word	0x200001b0
 8001794:	20000058 	.word	0x20000058
 8001798:	44ed8000 	.word	0x44ed8000
 800179c:	200001e0 	.word	0x200001e0
 80017a0:	42c80000 	.word	0x42c80000
 80017a4:	c2c80000 	.word	0xc2c80000
 80017a8:	200001d0 	.word	0x200001d0
 80017ac:	200001d4 	.word	0x200001d4
 80017b0:	40013400 	.word	0x40013400

080017b4 <behandle_manipulator>:



void behandle_manipulator(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	/// casting
    operator_manpu.gripe = (float) operator_manpu_int.gripe;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <behandle_manipulator+0x6c>)
 80017ba:	f993 3000 	ldrsb.w	r3, [r3]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <behandle_manipulator+0x70>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
    operator_manpu.skyv = (float) operator_manpu_int.skyv;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <behandle_manipulator+0x6c>)
 80017ce:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <behandle_manipulator+0x70>)
 80017dc:	edc3 7a03 	vstr	s15, [r3, #12]
    operator_manpu.snurr = (float) operator_manpu_int.snurr;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <behandle_manipulator+0x6c>)
 80017e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <behandle_manipulator+0x70>)
 80017f0:	edc3 7a01 	vstr	s15, [r3, #4]
    operator_manpu.sving = (float) operator_manpu_int.sving;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <behandle_manipulator+0x6c>)
 80017f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <behandle_manipulator+0x70>)
 8001804:	edc3 7a02 	vstr	s15, [r3, #8]


	behandle_gripe();
 8001808:	f7ff fd8a 	bl	8001320 <behandle_gripe>
	behandle_skyv();
 800180c:	f7ff fe9c 	bl	8001548 <behandle_skyv>
	behandle_sving();
 8001810:	f7ff fe10 	bl	8001434 <behandle_sving>
	behandle_snurr();
 8001814:	f7ff ff22 	bl	800165c <behandle_snurr>

	manipulator_data_lagring();
 8001818:	f7ff fbd8 	bl	8000fcc <manipulator_data_lagring>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200001d0 	.word	0x200001d0
 8001824:	200001b0 	.word	0x200001b0

08001828 <null_PID_var>:

/////////////////////////// SENSOR

/////////////////////////// REGULERING

void null_PID_var(PID_var *PID){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

	 PID -> e_1 = 0;// lagre som forrige avvik
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
	 PID -> ui_1 = 0; // lagre som forrige integratorbidrag
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
	 PID -> YF_1 = 0; // lagre som forrige filtrerte verdi
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <beregn_generell_PID>:


void beregn_generell_PID(PID_var *PID, PID_var_felles felles){
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	eeb0 7a40 	vmov.f32	s14, s0
 8001860:	eef0 7a60 	vmov.f32	s15, s1
 8001864:	ed87 7a01 	vstr	s14, [r7, #4]
 8001868:	edc7 7a02 	vstr	s15, [r7, #8]
    float up,ui,ud;
    (PID->e) = (PID->Ref) - (PID->Y); // beregne avvik, error e
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	edd3 7a08 	vldr	s15, [r3, #32]
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	edc3 7a06 	vstr	s15, [r3, #24]

    up = (PID->Kp) * (PID->e); // proportional action
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	ed93 7a00 	vldr	s14, [r3]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	edd3 7a06 	vldr	s15, [r3, #24]
 800188e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001892:	edc7 7a06 	vstr	s15, [r7, #24]
    ui = PID->ui_1 + ( (PID->Ki * felles.Ts) * (PID->e + PID->e_1)/2 ); // intergal action
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	ed93 7a05 	vldr	s14, [r3, #20]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	edd3 6a01 	vldr	s13, [r3, #4]
 80018a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	ed93 6a06 	vldr	s12, [r3, #24]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80018b6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80018ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80018c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	edc7 7a07 	vstr	s15, [r7, #28]

    if (ui > (PID->uimaks)){ // pga integral action akkumulering av error, setter begrensning; anti-windup
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80018d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	dd03      	ble.n	80018ea <beregn_generell_PID+0x96>
        ui = (PID->uimaks);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	e00c      	b.n	8001904 <beregn_generell_PID+0xb0>
    }
    else if(ui < (PID->uimin)){
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80018f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d502      	bpl.n	8001904 <beregn_generell_PID+0xb0>
        ui = (PID->uimin);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	61fb      	str	r3, [r7, #28]
    }

    PID->YF = ( felles.a * PID->YF_1 ) + ( (1-felles.a) * PID->Y); // -filtere måleverdi for derivering
 8001904:	ed97 7a02 	vldr	s14, [r7, #8]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800190e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001912:	edd7 7a02 	vldr	s15, [r7, #8]
 8001916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800191a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	edd3 7a08 	vldr	s15, [r3, #32]
 8001924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // negativt fortegn for å minske endringer vekk fra ønsket punkt.
    // filtrering kan endre på forsinkelse til derivatledd
    ud = - PID->Kd * ( (PID->YF - PID->YF_1) / felles.Ts );
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	edd3 7a02 	vldr	s15, [r3, #8]
 8001938:	eeb1 7a67 	vneg.f32	s14, s15
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001948:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800194c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001950:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	edc7 7a05 	vstr	s15, [r7, #20]

    PID->u = up + ui + ud;
 800195c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001960:	edd7 7a07 	vldr	s15, [r7, #28]
 8001964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001968:	edd7 7a05 	vldr	s15, [r7, #20]
 800196c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	edc3 7a04 	vstr	s15, [r3, #16]
    if (PID->u > (PID->umaks)){ // maks paadrag lov (saturation)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	ed93 7a04 	vldr	s14, [r3, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	dd04      	ble.n	8001996 <beregn_generell_PID+0x142>
        PID->u = (PID->umaks);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	e00e      	b.n	80019b4 <beregn_generell_PID+0x160>
    }
    else if(PID->u < (PID->umin)){
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	ed93 7a04 	vldr	s14, [r3, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80019a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	d503      	bpl.n	80019b4 <beregn_generell_PID+0x160>
        PID->u = (PID->umin);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	611a      	str	r2, [r3, #16]
    }
    // NB
    PID -> e_1 = PID -> e;// lagre som forrige avvik
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	61da      	str	r2, [r3, #28]
    PID -> ui_1 = ui; // lagre som forrige integratorbidrag
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	615a      	str	r2, [r3, #20]
    PID -> YF_1 = PID -> YF; // lagre som forrige filtrerte verdi
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ca:	bf00      	nop
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <konverter_krefter_paadrag>:
//	else{
//		return 0;
//	}
//}

float konverter_krefter_paadrag(float kg){
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	ed87 0a01 	vstr	s0, [r7, #4]
    if(kg<0) {return (pos_kr_paa.a*kg + pos_kr_paa.b);}
 80019e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d50c      	bpl.n	8001a0a <konverter_krefter_paadrag+0x32>
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <konverter_krefter_paadrag+0x6c>)
 80019f2:	ed93 7a00 	vldr	s14, [r3]
 80019f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <konverter_krefter_paadrag+0x6c>)
 8001a00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a08:	e015      	b.n	8001a36 <konverter_krefter_paadrag+0x5e>
    else if(kg>0) {return (neg_kr_paa.a*kg + neg_kr_paa.b);}
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	dd0c      	ble.n	8001a32 <konverter_krefter_paadrag+0x5a>
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <konverter_krefter_paadrag+0x70>)
 8001a1a:	ed93 7a00 	vldr	s14, [r3]
 8001a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <konverter_krefter_paadrag+0x70>)
 8001a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	e001      	b.n	8001a36 <konverter_krefter_paadrag+0x5e>
    else {return 0;}
 8001a32:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001a4c <konverter_krefter_paadrag+0x74>
}
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	20000034 	.word	0x20000034
 8001a48:	2000003c 	.word	0x2000003c
 8001a4c:	00000000 	.word	0x00000000

08001a50 <hiv_regulering_init>:

void hiv_regulering_init(void){
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	// oppdater
	PID_hiv.Kp =  1.355; //1
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <hiv_regulering_init+0x7c>)
 8001a58:	601a      	str	r2, [r3, #0]
	PID_hiv.Ki = 0.386; //2
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <hiv_regulering_init+0x80>)
 8001a5e:	605a      	str	r2, [r3, #4]
	PID_hiv.Kd =  0.264; //3
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <hiv_regulering_init+0x84>)
 8001a64:	609a      	str	r2, [r3, #8]
	PID_hiv.Ref = 0;
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
	PID_hiv.u = 0;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
	PID_hiv.ui_1 = 0;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
	PID_hiv.e = 0;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
	PID_hiv.e_1 = 0;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
	PID_hiv.Y = 0;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
	PID_hiv.YF = 0;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
	PID_hiv.YF_1 = 0;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
	// oppdater

	// med 70 går opp til ca 59 på hver
	// med 100 går opp til rundt 80 på hver
	PID_hiv.uimaks = 70;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <hiv_regulering_init+0x88>)
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_hiv.uimin = -70;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <hiv_regulering_init+0x8c>)
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_hiv.umaks = 100;
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <hiv_regulering_init+0x90>)
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
	PID_hiv.umin = -100;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <hiv_regulering_init+0x78>)
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <hiv_regulering_init+0x94>)
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	200001e8 	.word	0x200001e8
 8001acc:	3fad70a4 	.word	0x3fad70a4
 8001ad0:	3ec5a1cb 	.word	0x3ec5a1cb
 8001ad4:	3e872b02 	.word	0x3e872b02
 8001ad8:	428c0000 	.word	0x428c0000
 8001adc:	c28c0000 	.word	0xc28c0000
 8001ae0:	42c80000 	.word	0x42c80000
 8001ae4:	c2c80000 	.word	0xc2c80000

08001ae8 <rull_regulering_init>:

// kanskje litt aggresiv (?)

void rull_regulering_init(void){
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	// oppdater
	PID_rull.Kp = 0.0094;; //1
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <rull_regulering_init+0x78>)
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <rull_regulering_init+0x7c>)
 8001af0:	601a      	str	r2, [r3, #0]
	PID_rull.Ki = 0.0723; //2
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <rull_regulering_init+0x78>)
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <rull_regulering_init+0x80>)
 8001af6:	605a      	str	r2, [r3, #4]
	PID_rull.Kd = 0.0158; //3
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <rull_regulering_init+0x78>)
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <rull_regulering_init+0x84>)
 8001afc:	609a      	str	r2, [r3, #8]
	PID_rull.Ref = 0;
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <rull_regulering_init+0x78>)
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
	PID_rull.u = 0;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <rull_regulering_init+0x78>)
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
	PID_rull.ui_1 = 0;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <rull_regulering_init+0x78>)
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
	PID_rull.e = 0;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <rull_regulering_init+0x78>)
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
	PID_rull.e_1 = 0;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <rull_regulering_init+0x78>)
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
	PID_rull.Y = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <rull_regulering_init+0x78>)
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
	PID_rull.YF = 0;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <rull_regulering_init+0x78>)
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
	PID_rull.YF_1 = 0;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <rull_regulering_init+0x78>)
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
	// oppdater
	PID_rull.uimaks = 70;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <rull_regulering_init+0x78>)
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <rull_regulering_init+0x88>)
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_rull.uimin = -70;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <rull_regulering_init+0x78>)
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <rull_regulering_init+0x8c>)
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
	PID_rull.umaks = 100;
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <rull_regulering_init+0x78>)
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <rull_regulering_init+0x90>)
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
	PID_rull.umin = -100;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <rull_regulering_init+0x78>)
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <rull_regulering_init+0x94>)
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000260 	.word	0x20000260
 8001b64:	3c1a0275 	.word	0x3c1a0275
 8001b68:	3d941206 	.word	0x3d941206
 8001b6c:	3c816f00 	.word	0x3c816f00
 8001b70:	428c0000 	.word	0x428c0000
 8001b74:	c28c0000 	.word	0xc28c0000
 8001b78:	42c80000 	.word	0x42c80000
 8001b7c:	c2c80000 	.word	0xc2c80000

08001b80 <stamp_regulering_init>:

void stamp_regulering_init(void){
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	// oppdater
	PID_stamp.Kp =  0.017; //1
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <stamp_regulering_init+0x7c>)
 8001b88:	601a      	str	r2, [r3, #0]
	PID_stamp.Ki = 0.130; //2
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001b8c:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <stamp_regulering_init+0x80>)
 8001b8e:	605a      	str	r2, [r3, #4]
	PID_stamp.Kd =  0.0287; //3
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <stamp_regulering_init+0x84>)
 8001b94:	609a      	str	r2, [r3, #8]
	PID_stamp.Ref = 0;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
	PID_stamp.u = 0;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
	PID_stamp.ui_1 = 0;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
	PID_stamp.e = 0;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
	PID_stamp.e_1 = 0;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
	PID_stamp.Y = 0;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
	PID_stamp.YF = 0;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
	PID_stamp.YF_1 = 0;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
	// oppdater
	PID_stamp.uimaks = 70;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <stamp_regulering_init+0x88>)
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_stamp.uimin = -70;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <stamp_regulering_init+0x8c>)
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_stamp.umaks = 100;
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <stamp_regulering_init+0x90>)
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34
	PID_stamp.umin = -100;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <stamp_regulering_init+0x78>)
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <stamp_regulering_init+0x94>)
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	20000224 	.word	0x20000224
 8001bfc:	3c8b4396 	.word	0x3c8b4396
 8001c00:	3e051eb8 	.word	0x3e051eb8
 8001c04:	3ceb1c43 	.word	0x3ceb1c43
 8001c08:	428c0000 	.word	0x428c0000
 8001c0c:	c28c0000 	.word	0xc28c0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	c2c80000 	.word	0xc2c80000

08001c18 <hiv_regulering>:


void hiv_regulering(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0

    PID_hiv.Y = sensordata.dybde;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <hiv_regulering+0x98>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <hiv_regulering+0x9c>)
 8001c22:	6213      	str	r3, [r2, #32]
    beregn_generell_PID(&PID_hiv, PID_felles);
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <hiv_regulering+0xa0>)
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c32:	eef0 0a67 	vmov.f32	s1, s15
 8001c36:	481f      	ldr	r0, [pc, #124]	; (8001cb4 <hiv_regulering+0x9c>)
 8001c38:	f7ff fe0c 	bl	8001854 <beregn_generell_PID>

    // fordel på 4 vertikale thrustere, og konverter til paadrag
    // fordeles likt

    reguleringbidrag_hiv.vhf = konverter_krefter_paadrag(-PID_hiv.u);
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <hiv_regulering+0x9c>)
 8001c3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c42:	eef1 7a67 	vneg.f32	s15, s15
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	f7ff fec5 	bl	80019d8 <konverter_krefter_paadrag>
 8001c4e:	eef0 7a40 	vmov.f32	s15, s0
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <hiv_regulering+0xa4>)
 8001c54:	edc3 7a04 	vstr	s15, [r3, #16]
    reguleringbidrag_hiv.vhb = konverter_krefter_paadrag(-PID_hiv.u);
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <hiv_regulering+0x9c>)
 8001c5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c5e:	eef1 7a67 	vneg.f32	s15, s15
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	f7ff feb7 	bl	80019d8 <konverter_krefter_paadrag>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <hiv_regulering+0xa4>)
 8001c70:	edc3 7a05 	vstr	s15, [r3, #20]
    reguleringbidrag_hiv.vvb = konverter_krefter_paadrag(-PID_hiv.u);
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <hiv_regulering+0x9c>)
 8001c76:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c7a:	eef1 7a67 	vneg.f32	s15, s15
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	f7ff fea9 	bl	80019d8 <konverter_krefter_paadrag>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <hiv_regulering+0xa4>)
 8001c8c:	edc3 7a06 	vstr	s15, [r3, #24]
    reguleringbidrag_hiv.vvf = konverter_krefter_paadrag(-PID_hiv.u);
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <hiv_regulering+0x9c>)
 8001c92:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c96:	eef1 7a67 	vneg.f32	s15, s15
 8001c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9e:	f7ff fe9b 	bl	80019d8 <konverter_krefter_paadrag>
 8001ca2:	eef0 7a40 	vmov.f32	s15, s0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <hiv_regulering+0xa4>)
 8001ca8:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000029c 	.word	0x2000029c
 8001cb4:	200001e8 	.word	0x200001e8
 8001cb8:	20000070 	.word	0x20000070
 8001cbc:	20000150 	.word	0x20000150

08001cc0 <stamp_regulering>:

void stamp_regulering(void){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

    PID_stamp.Ref = REF.stamp;
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <stamp_regulering+0xa0>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <stamp_regulering+0xa4>)
 8001cca:	60d3      	str	r3, [r2, #12]
    PID_stamp.Y = sensordata.stamp;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <stamp_regulering+0xa8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <stamp_regulering+0xa4>)
 8001cd2:	6213      	str	r3, [r2, #32]

    beregn_generell_PID(&PID_stamp, PID_felles);
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <stamp_regulering+0xac>)
 8001cd6:	ed93 7a00 	vldr	s14, [r3]
 8001cda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cde:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce2:	eef0 0a67 	vmov.f32	s1, s15
 8001ce6:	481f      	ldr	r0, [pc, #124]	; (8001d64 <stamp_regulering+0xa4>)
 8001ce8:	f7ff fdb4 	bl	8001854 <beregn_generell_PID>
    // to grupper
    // hhb og hvb , hhf og hvf
    // har motsatt fortegn av hverandre
    // NB SJEKK FOTEGN

    null_bidrag_horisontal(&reguleringbidrag_stamp);
 8001cec:	4820      	ldr	r0, [pc, #128]	; (8001d70 <stamp_regulering+0xb0>)
 8001cee:	f000 fcf1 	bl	80026d4 <null_bidrag_horisontal>

    reguleringbidrag_stamp.vhf = konverter_krefter_paadrag(-PID_stamp.u);
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <stamp_regulering+0xa4>)
 8001cf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cf8:	eef1 7a67 	vneg.f32	s15, s15
 8001cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001d00:	f7ff fe6a 	bl	80019d8 <konverter_krefter_paadrag>
 8001d04:	eef0 7a40 	vmov.f32	s15, s0
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <stamp_regulering+0xb0>)
 8001d0a:	edc3 7a04 	vstr	s15, [r3, #16]
    reguleringbidrag_stamp.vhb = konverter_krefter_paadrag(PID_stamp.u);
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <stamp_regulering+0xa4>)
 8001d10:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	f7ff fe5e 	bl	80019d8 <konverter_krefter_paadrag>
 8001d1c:	eef0 7a40 	vmov.f32	s15, s0
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <stamp_regulering+0xb0>)
 8001d22:	edc3 7a05 	vstr	s15, [r3, #20]
    reguleringbidrag_stamp.vvb = konverter_krefter_paadrag(PID_stamp.u);
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <stamp_regulering+0xa4>)
 8001d28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d30:	f7ff fe52 	bl	80019d8 <konverter_krefter_paadrag>
 8001d34:	eef0 7a40 	vmov.f32	s15, s0
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <stamp_regulering+0xb0>)
 8001d3a:	edc3 7a06 	vstr	s15, [r3, #24]
    reguleringbidrag_stamp.vvf = konverter_krefter_paadrag(-PID_stamp.u);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <stamp_regulering+0xa4>)
 8001d40:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d44:	eef1 7a67 	vneg.f32	s15, s15
 8001d48:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4c:	f7ff fe44 	bl	80019d8 <konverter_krefter_paadrag>
 8001d50:	eef0 7a40 	vmov.f32	s15, s0
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <stamp_regulering+0xb0>)
 8001d56:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002a8 	.word	0x200002a8
 8001d64:	20000224 	.word	0x20000224
 8001d68:	2000029c 	.word	0x2000029c
 8001d6c:	20000070 	.word	0x20000070
 8001d70:	20000170 	.word	0x20000170

08001d74 <rull_regulering>:

void rull_regulering(void){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0

    PID_rull.Ref = REF.rull;
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <rull_regulering+0xa0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <rull_regulering+0xa4>)
 8001d7e:	60d3      	str	r3, [r2, #12]
    PID_rull.Y = sensordata.rull;
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <rull_regulering+0xa8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <rull_regulering+0xa4>)
 8001d86:	6213      	str	r3, [r2, #32]

    beregn_generell_PID(&PID_rull, PID_felles);
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <rull_regulering+0xac>)
 8001d8a:	ed93 7a00 	vldr	s14, [r3]
 8001d8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d92:	eeb0 0a47 	vmov.f32	s0, s14
 8001d96:	eef0 0a67 	vmov.f32	s1, s15
 8001d9a:	481f      	ldr	r0, [pc, #124]	; (8001e18 <rull_regulering+0xa4>)
 8001d9c:	f7ff fd5a 	bl	8001854 <beregn_generell_PID>
    // fordel på 4 thrustere som virker i vertikale plan
    // fordeles likt,
    // vhb og vhf , vvb og vvf

    // u er utgangen fra reguleringsblokk
    null_bidrag_horisontal(&reguleringbidrag_rull);
 8001da0:	4820      	ldr	r0, [pc, #128]	; (8001e24 <rull_regulering+0xb0>)
 8001da2:	f000 fc97 	bl	80026d4 <null_bidrag_horisontal>

    reguleringbidrag_rull.vhf = konverter_krefter_paadrag(-PID_rull.u);
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <rull_regulering+0xa4>)
 8001da8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dac:	eef1 7a67 	vneg.f32	s15, s15
 8001db0:	eeb0 0a67 	vmov.f32	s0, s15
 8001db4:	f7ff fe10 	bl	80019d8 <konverter_krefter_paadrag>
 8001db8:	eef0 7a40 	vmov.f32	s15, s0
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <rull_regulering+0xb0>)
 8001dbe:	edc3 7a04 	vstr	s15, [r3, #16]
    reguleringbidrag_rull.vhb = konverter_krefter_paadrag(-PID_rull.u);
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <rull_regulering+0xa4>)
 8001dc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dc8:	eef1 7a67 	vneg.f32	s15, s15
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	f7ff fe02 	bl	80019d8 <konverter_krefter_paadrag>
 8001dd4:	eef0 7a40 	vmov.f32	s15, s0
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <rull_regulering+0xb0>)
 8001dda:	edc3 7a05 	vstr	s15, [r3, #20]
    reguleringbidrag_rull.vvb = konverter_krefter_paadrag(PID_rull.u);
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <rull_regulering+0xa4>)
 8001de0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	f7ff fdf6 	bl	80019d8 <konverter_krefter_paadrag>
 8001dec:	eef0 7a40 	vmov.f32	s15, s0
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <rull_regulering+0xb0>)
 8001df2:	edc3 7a06 	vstr	s15, [r3, #24]
    reguleringbidrag_rull.vvf = konverter_krefter_paadrag(PID_rull.u);
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <rull_regulering+0xa4>)
 8001df8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001e00:	f7ff fdea 	bl	80019d8 <konverter_krefter_paadrag>
 8001e04:	eef0 7a40 	vmov.f32	s15, s0
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <rull_regulering+0xb0>)
 8001e0a:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200002a8 	.word	0x200002a8
 8001e18:	20000260 	.word	0x20000260
 8001e1c:	2000029c 	.word	0x2000029c
 8001e20:	20000070 	.word	0x20000070
 8001e24:	20000190 	.word	0x20000190

08001e28 <beregn_reguleringbidrag>:


void beregn_reguleringbidrag(void){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	// konverter int til float for videre beregninger
	// "casting" (ny variabeltype)
	sensordata.rull = (float) sensordata_int.rull/100;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <beregn_reguleringbidrag+0xc8>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001ef4 <beregn_reguleringbidrag+0xcc>
 8001e3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <beregn_reguleringbidrag+0xd0>)
 8001e44:	edc3 7a00 	vstr	s15, [r3]
	sensordata.stamp = (float) sensordata_int.stamp/100;
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <beregn_reguleringbidrag+0xc8>)
 8001e4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e56:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001ef4 <beregn_reguleringbidrag+0xcc>
 8001e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <beregn_reguleringbidrag+0xd0>)
 8001e60:	edc3 7a01 	vstr	s15, [r3, #4]
	// egentlig være delt på 100, skal sende i cm men sender i mm
	sensordata.dybde = (float) sensordata_int.dybde/1000;
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <beregn_reguleringbidrag+0xc8>)
 8001e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001efc <beregn_reguleringbidrag+0xd4>
 8001e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <beregn_reguleringbidrag+0xd0>)
 8001e7c:	edc3 7a02 	vstr	s15, [r3, #8]
	// sjekke om reguleringsvar skal være aktiv eller ikke.
	// dersom 0 er ikke aktiv

	//////
	if(!(REG_AKTIVER & 0x01)){
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <beregn_reguleringbidrag+0xd8>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <beregn_reguleringbidrag+0x78>
		null_PID_var(&PID_rull);
 8001e8c:	481d      	ldr	r0, [pc, #116]	; (8001f04 <beregn_reguleringbidrag+0xdc>)
 8001e8e:	f7ff fccb 	bl	8001828 <null_PID_var>
		null_bidrag_horisontal(&reguleringbidrag_rull);
 8001e92:	481d      	ldr	r0, [pc, #116]	; (8001f08 <beregn_reguleringbidrag+0xe0>)
 8001e94:	f000 fc1e 	bl	80026d4 <null_bidrag_horisontal>
		null_bidrag_vertikal(&reguleringbidrag_rull);
 8001e98:	481b      	ldr	r0, [pc, #108]	; (8001f08 <beregn_reguleringbidrag+0xe0>)
 8001e9a:	f000 fc35 	bl	8002708 <null_bidrag_vertikal>
 8001e9e:	e001      	b.n	8001ea4 <beregn_reguleringbidrag+0x7c>
	}
	else{
		rull_regulering();
 8001ea0:	f7ff ff68 	bl	8001d74 <rull_regulering>
	}
	//////
	if(!(REG_AKTIVER & 0x04)){
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <beregn_reguleringbidrag+0xd8>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <beregn_reguleringbidrag+0x9c>
		null_PID_var(&PID_stamp);
 8001eb0:	4816      	ldr	r0, [pc, #88]	; (8001f0c <beregn_reguleringbidrag+0xe4>)
 8001eb2:	f7ff fcb9 	bl	8001828 <null_PID_var>
		null_bidrag_horisontal(&reguleringbidrag_stamp);
 8001eb6:	4816      	ldr	r0, [pc, #88]	; (8001f10 <beregn_reguleringbidrag+0xe8>)
 8001eb8:	f000 fc0c 	bl	80026d4 <null_bidrag_horisontal>
		null_bidrag_vertikal(&reguleringbidrag_stamp);
 8001ebc:	4814      	ldr	r0, [pc, #80]	; (8001f10 <beregn_reguleringbidrag+0xe8>)
 8001ebe:	f000 fc23 	bl	8002708 <null_bidrag_vertikal>
 8001ec2:	e001      	b.n	8001ec8 <beregn_reguleringbidrag+0xa0>
	}
	else{
		stamp_regulering();
 8001ec4:	f7ff fefc 	bl	8001cc0 <stamp_regulering>
	}
	//////
	if(!(REG_AKTIVER_DYBDE & 0x08)){
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <beregn_reguleringbidrag+0xec>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <beregn_reguleringbidrag+0xc0>
		null_PID_var(&PID_hiv);
 8001ed4:	4810      	ldr	r0, [pc, #64]	; (8001f18 <beregn_reguleringbidrag+0xf0>)
 8001ed6:	f7ff fca7 	bl	8001828 <null_PID_var>
		null_bidrag_horisontal(&reguleringbidrag_hiv);
 8001eda:	4810      	ldr	r0, [pc, #64]	; (8001f1c <beregn_reguleringbidrag+0xf4>)
 8001edc:	f000 fbfa 	bl	80026d4 <null_bidrag_horisontal>
		null_bidrag_vertikal(&reguleringbidrag_hiv);
 8001ee0:	480e      	ldr	r0, [pc, #56]	; (8001f1c <beregn_reguleringbidrag+0xf4>)
 8001ee2:	f000 fc11 	bl	8002708 <null_bidrag_vertikal>
	}
	else{
		hiv_regulering();
	}

}
 8001ee6:	e001      	b.n	8001eec <beregn_reguleringbidrag+0xc4>
		hiv_regulering();
 8001ee8:	f7ff fe96 	bl	8001c18 <hiv_regulering>
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200002b4 	.word	0x200002b4
 8001ef4:	42c80000 	.word	0x42c80000
 8001ef8:	2000029c 	.word	0x2000029c
 8001efc:	447a0000 	.word	0x447a0000
 8001f00:	200000aa 	.word	0x200000aa
 8001f04:	20000260 	.word	0x20000260
 8001f08:	20000190 	.word	0x20000190
 8001f0c:	20000224 	.word	0x20000224
 8001f10:	20000170 	.word	0x20000170
 8001f14:	200000a9 	.word	0x200000a9
 8001f18:	200001e8 	.word	0x200001e8
 8001f1c:	20000150 	.word	0x20000150

08001f20 <oppdater_parameter>:



///// OPPDATERING AV PARAMETRE

void oppdater_parameter(uint32_t param_id, float parameter){
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	ed87 0a02 	vstr	s0, [r7, #8]
	switch(param_id){
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f240 1249 	movw	r2, #329	; 0x149
 8001f34:	4293      	cmp	r3, r2
 8001f36:	f200 8376 	bhi.w	8002626 <oppdater_parameter+0x706>
 8001f3a:	a101      	add	r1, pc, #4	; (adr r1, 8001f40 <oppdater_parameter+0x20>)
 8001f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f40:	08002469 	.word	0x08002469
 8001f44:	08002471 	.word	0x08002471
 8001f48:	08002479 	.word	0x08002479
 8001f4c:	08002481 	.word	0x08002481
 8001f50:	08002489 	.word	0x08002489
 8001f54:	08002491 	.word	0x08002491
 8001f58:	08002499 	.word	0x08002499
 8001f5c:	080024a1 	.word	0x080024a1
 8001f60:	080024a9 	.word	0x080024a9
 8001f64:	080024b1 	.word	0x080024b1
 8001f68:	080024b9 	.word	0x080024b9
 8001f6c:	08002627 	.word	0x08002627
 8001f70:	08002627 	.word	0x08002627
 8001f74:	08002627 	.word	0x08002627
 8001f78:	080024c1 	.word	0x080024c1
 8001f7c:	080024c9 	.word	0x080024c9
 8001f80:	080024d1 	.word	0x080024d1
 8001f84:	080024d9 	.word	0x080024d9
 8001f88:	080024e1 	.word	0x080024e1
 8001f8c:	080024e9 	.word	0x080024e9
 8001f90:	08002627 	.word	0x08002627
 8001f94:	08002627 	.word	0x08002627
 8001f98:	08002627 	.word	0x08002627
 8001f9c:	08002627 	.word	0x08002627
 8001fa0:	08002627 	.word	0x08002627
 8001fa4:	08002627 	.word	0x08002627
 8001fa8:	08002627 	.word	0x08002627
 8001fac:	08002627 	.word	0x08002627
 8001fb0:	08002627 	.word	0x08002627
 8001fb4:	080024f1 	.word	0x080024f1
 8001fb8:	080024f9 	.word	0x080024f9
 8001fbc:	08002501 	.word	0x08002501
 8001fc0:	08002509 	.word	0x08002509
 8001fc4:	08002511 	.word	0x08002511
 8001fc8:	08002519 	.word	0x08002519
 8001fcc:	08002521 	.word	0x08002521
 8001fd0:	08002627 	.word	0x08002627
 8001fd4:	08002627 	.word	0x08002627
 8001fd8:	08002627 	.word	0x08002627
 8001fdc:	08002627 	.word	0x08002627
 8001fe0:	08002627 	.word	0x08002627
 8001fe4:	08002627 	.word	0x08002627
 8001fe8:	08002627 	.word	0x08002627
 8001fec:	08002627 	.word	0x08002627
 8001ff0:	08002627 	.word	0x08002627
 8001ff4:	08002627 	.word	0x08002627
 8001ff8:	08002627 	.word	0x08002627
 8001ffc:	08002627 	.word	0x08002627
 8002000:	08002627 	.word	0x08002627
 8002004:	08002529 	.word	0x08002529
 8002008:	08002531 	.word	0x08002531
 800200c:	08002539 	.word	0x08002539
 8002010:	08002541 	.word	0x08002541
 8002014:	08002549 	.word	0x08002549
 8002018:	08002551 	.word	0x08002551
 800201c:	08002627 	.word	0x08002627
 8002020:	08002627 	.word	0x08002627
 8002024:	08002627 	.word	0x08002627
 8002028:	08002627 	.word	0x08002627
 800202c:	08002627 	.word	0x08002627
 8002030:	08002627 	.word	0x08002627
 8002034:	08002627 	.word	0x08002627
 8002038:	08002627 	.word	0x08002627
 800203c:	08002627 	.word	0x08002627
 8002040:	08002627 	.word	0x08002627
 8002044:	08002627 	.word	0x08002627
 8002048:	08002627 	.word	0x08002627
 800204c:	08002627 	.word	0x08002627
 8002050:	08002627 	.word	0x08002627
 8002054:	08002627 	.word	0x08002627
 8002058:	08002627 	.word	0x08002627
 800205c:	08002627 	.word	0x08002627
 8002060:	08002627 	.word	0x08002627
 8002064:	08002627 	.word	0x08002627
 8002068:	08002627 	.word	0x08002627
 800206c:	08002627 	.word	0x08002627
 8002070:	08002627 	.word	0x08002627
 8002074:	08002627 	.word	0x08002627
 8002078:	08002627 	.word	0x08002627
 800207c:	08002627 	.word	0x08002627
 8002080:	08002627 	.word	0x08002627
 8002084:	08002627 	.word	0x08002627
 8002088:	08002627 	.word	0x08002627
 800208c:	08002627 	.word	0x08002627
 8002090:	08002627 	.word	0x08002627
 8002094:	08002627 	.word	0x08002627
 8002098:	08002627 	.word	0x08002627
 800209c:	08002627 	.word	0x08002627
 80020a0:	08002627 	.word	0x08002627
 80020a4:	08002627 	.word	0x08002627
 80020a8:	08002627 	.word	0x08002627
 80020ac:	08002627 	.word	0x08002627
 80020b0:	08002627 	.word	0x08002627
 80020b4:	08002627 	.word	0x08002627
 80020b8:	08002627 	.word	0x08002627
 80020bc:	08002627 	.word	0x08002627
 80020c0:	08002627 	.word	0x08002627
 80020c4:	08002627 	.word	0x08002627
 80020c8:	08002627 	.word	0x08002627
 80020cc:	08002559 	.word	0x08002559
 80020d0:	08002627 	.word	0x08002627
 80020d4:	08002627 	.word	0x08002627
 80020d8:	08002627 	.word	0x08002627
 80020dc:	08002627 	.word	0x08002627
 80020e0:	08002627 	.word	0x08002627
 80020e4:	08002627 	.word	0x08002627
 80020e8:	08002627 	.word	0x08002627
 80020ec:	08002627 	.word	0x08002627
 80020f0:	08002627 	.word	0x08002627
 80020f4:	08002627 	.word	0x08002627
 80020f8:	08002627 	.word	0x08002627
 80020fc:	08002627 	.word	0x08002627
 8002100:	08002627 	.word	0x08002627
 8002104:	08002627 	.word	0x08002627
 8002108:	08002627 	.word	0x08002627
 800210c:	08002627 	.word	0x08002627
 8002110:	08002627 	.word	0x08002627
 8002114:	08002627 	.word	0x08002627
 8002118:	08002627 	.word	0x08002627
 800211c:	08002627 	.word	0x08002627
 8002120:	08002627 	.word	0x08002627
 8002124:	08002627 	.word	0x08002627
 8002128:	08002627 	.word	0x08002627
 800212c:	08002627 	.word	0x08002627
 8002130:	08002627 	.word	0x08002627
 8002134:	08002627 	.word	0x08002627
 8002138:	08002627 	.word	0x08002627
 800213c:	08002627 	.word	0x08002627
 8002140:	08002627 	.word	0x08002627
 8002144:	08002627 	.word	0x08002627
 8002148:	08002627 	.word	0x08002627
 800214c:	08002627 	.word	0x08002627
 8002150:	08002627 	.word	0x08002627
 8002154:	08002627 	.word	0x08002627
 8002158:	08002627 	.word	0x08002627
 800215c:	08002627 	.word	0x08002627
 8002160:	08002627 	.word	0x08002627
 8002164:	08002627 	.word	0x08002627
 8002168:	08002627 	.word	0x08002627
 800216c:	08002627 	.word	0x08002627
 8002170:	08002627 	.word	0x08002627
 8002174:	08002627 	.word	0x08002627
 8002178:	08002627 	.word	0x08002627
 800217c:	08002627 	.word	0x08002627
 8002180:	08002627 	.word	0x08002627
 8002184:	08002627 	.word	0x08002627
 8002188:	08002627 	.word	0x08002627
 800218c:	08002627 	.word	0x08002627
 8002190:	08002627 	.word	0x08002627
 8002194:	08002627 	.word	0x08002627
 8002198:	08002627 	.word	0x08002627
 800219c:	08002627 	.word	0x08002627
 80021a0:	08002627 	.word	0x08002627
 80021a4:	08002627 	.word	0x08002627
 80021a8:	08002627 	.word	0x08002627
 80021ac:	08002627 	.word	0x08002627
 80021b0:	08002627 	.word	0x08002627
 80021b4:	08002627 	.word	0x08002627
 80021b8:	08002627 	.word	0x08002627
 80021bc:	08002627 	.word	0x08002627
 80021c0:	08002627 	.word	0x08002627
 80021c4:	08002627 	.word	0x08002627
 80021c8:	08002627 	.word	0x08002627
 80021cc:	08002627 	.word	0x08002627
 80021d0:	08002627 	.word	0x08002627
 80021d4:	08002627 	.word	0x08002627
 80021d8:	08002627 	.word	0x08002627
 80021dc:	08002627 	.word	0x08002627
 80021e0:	08002627 	.word	0x08002627
 80021e4:	08002627 	.word	0x08002627
 80021e8:	08002627 	.word	0x08002627
 80021ec:	08002627 	.word	0x08002627
 80021f0:	08002627 	.word	0x08002627
 80021f4:	08002627 	.word	0x08002627
 80021f8:	08002627 	.word	0x08002627
 80021fc:	08002627 	.word	0x08002627
 8002200:	08002627 	.word	0x08002627
 8002204:	08002627 	.word	0x08002627
 8002208:	08002627 	.word	0x08002627
 800220c:	08002627 	.word	0x08002627
 8002210:	08002627 	.word	0x08002627
 8002214:	08002627 	.word	0x08002627
 8002218:	08002627 	.word	0x08002627
 800221c:	08002627 	.word	0x08002627
 8002220:	08002627 	.word	0x08002627
 8002224:	08002627 	.word	0x08002627
 8002228:	08002627 	.word	0x08002627
 800222c:	08002627 	.word	0x08002627
 8002230:	08002627 	.word	0x08002627
 8002234:	08002627 	.word	0x08002627
 8002238:	08002627 	.word	0x08002627
 800223c:	08002627 	.word	0x08002627
 8002240:	08002627 	.word	0x08002627
 8002244:	08002627 	.word	0x08002627
 8002248:	08002627 	.word	0x08002627
 800224c:	08002627 	.word	0x08002627
 8002250:	08002627 	.word	0x08002627
 8002254:	08002627 	.word	0x08002627
 8002258:	08002627 	.word	0x08002627
 800225c:	0800256f 	.word	0x0800256f
 8002260:	08002577 	.word	0x08002577
 8002264:	0800257f 	.word	0x0800257f
 8002268:	08002587 	.word	0x08002587
 800226c:	0800258f 	.word	0x0800258f
 8002270:	08002597 	.word	0x08002597
 8002274:	0800259f 	.word	0x0800259f
 8002278:	080025a7 	.word	0x080025a7
 800227c:	08002627 	.word	0x08002627
 8002280:	08002627 	.word	0x08002627
 8002284:	08002627 	.word	0x08002627
 8002288:	08002627 	.word	0x08002627
 800228c:	08002627 	.word	0x08002627
 8002290:	08002627 	.word	0x08002627
 8002294:	08002627 	.word	0x08002627
 8002298:	08002627 	.word	0x08002627
 800229c:	08002627 	.word	0x08002627
 80022a0:	08002627 	.word	0x08002627
 80022a4:	08002627 	.word	0x08002627
 80022a8:	08002627 	.word	0x08002627
 80022ac:	08002627 	.word	0x08002627
 80022b0:	08002627 	.word	0x08002627
 80022b4:	08002627 	.word	0x08002627
 80022b8:	08002627 	.word	0x08002627
 80022bc:	08002627 	.word	0x08002627
 80022c0:	08002627 	.word	0x08002627
 80022c4:	08002627 	.word	0x08002627
 80022c8:	08002627 	.word	0x08002627
 80022cc:	08002627 	.word	0x08002627
 80022d0:	08002627 	.word	0x08002627
 80022d4:	08002627 	.word	0x08002627
 80022d8:	08002627 	.word	0x08002627
 80022dc:	08002627 	.word	0x08002627
 80022e0:	08002627 	.word	0x08002627
 80022e4:	08002627 	.word	0x08002627
 80022e8:	08002627 	.word	0x08002627
 80022ec:	08002627 	.word	0x08002627
 80022f0:	08002627 	.word	0x08002627
 80022f4:	08002627 	.word	0x08002627
 80022f8:	08002627 	.word	0x08002627
 80022fc:	08002627 	.word	0x08002627
 8002300:	08002627 	.word	0x08002627
 8002304:	08002627 	.word	0x08002627
 8002308:	08002627 	.word	0x08002627
 800230c:	08002627 	.word	0x08002627
 8002310:	08002627 	.word	0x08002627
 8002314:	08002627 	.word	0x08002627
 8002318:	08002627 	.word	0x08002627
 800231c:	08002627 	.word	0x08002627
 8002320:	08002627 	.word	0x08002627
 8002324:	08002627 	.word	0x08002627
 8002328:	08002627 	.word	0x08002627
 800232c:	08002627 	.word	0x08002627
 8002330:	08002627 	.word	0x08002627
 8002334:	08002627 	.word	0x08002627
 8002338:	08002627 	.word	0x08002627
 800233c:	08002627 	.word	0x08002627
 8002340:	08002627 	.word	0x08002627
 8002344:	08002627 	.word	0x08002627
 8002348:	08002627 	.word	0x08002627
 800234c:	08002627 	.word	0x08002627
 8002350:	08002627 	.word	0x08002627
 8002354:	08002627 	.word	0x08002627
 8002358:	08002627 	.word	0x08002627
 800235c:	08002627 	.word	0x08002627
 8002360:	08002627 	.word	0x08002627
 8002364:	08002627 	.word	0x08002627
 8002368:	08002627 	.word	0x08002627
 800236c:	08002627 	.word	0x08002627
 8002370:	08002627 	.word	0x08002627
 8002374:	08002627 	.word	0x08002627
 8002378:	08002627 	.word	0x08002627
 800237c:	08002627 	.word	0x08002627
 8002380:	08002627 	.word	0x08002627
 8002384:	08002627 	.word	0x08002627
 8002388:	08002627 	.word	0x08002627
 800238c:	08002627 	.word	0x08002627
 8002390:	08002627 	.word	0x08002627
 8002394:	08002627 	.word	0x08002627
 8002398:	08002627 	.word	0x08002627
 800239c:	08002627 	.word	0x08002627
 80023a0:	08002627 	.word	0x08002627
 80023a4:	08002627 	.word	0x08002627
 80023a8:	08002627 	.word	0x08002627
 80023ac:	08002627 	.word	0x08002627
 80023b0:	08002627 	.word	0x08002627
 80023b4:	08002627 	.word	0x08002627
 80023b8:	08002627 	.word	0x08002627
 80023bc:	08002627 	.word	0x08002627
 80023c0:	08002627 	.word	0x08002627
 80023c4:	08002627 	.word	0x08002627
 80023c8:	08002627 	.word	0x08002627
 80023cc:	08002627 	.word	0x08002627
 80023d0:	08002627 	.word	0x08002627
 80023d4:	08002627 	.word	0x08002627
 80023d8:	08002627 	.word	0x08002627
 80023dc:	08002627 	.word	0x08002627
 80023e0:	08002627 	.word	0x08002627
 80023e4:	08002627 	.word	0x08002627
 80023e8:	08002627 	.word	0x08002627
 80023ec:	080025af 	.word	0x080025af
 80023f0:	080025b7 	.word	0x080025b7
 80023f4:	080025bf 	.word	0x080025bf
 80023f8:	080025c7 	.word	0x080025c7
 80023fc:	080025db 	.word	0x080025db
 8002400:	080025ef 	.word	0x080025ef
 8002404:	08002603 	.word	0x08002603
 8002408:	08002627 	.word	0x08002627
 800240c:	08002617 	.word	0x08002617
 8002410:	08002627 	.word	0x08002627
 8002414:	08002627 	.word	0x08002627
 8002418:	08002627 	.word	0x08002627
 800241c:	08002627 	.word	0x08002627
 8002420:	08002627 	.word	0x08002627
 8002424:	08002627 	.word	0x08002627
 8002428:	08002627 	.word	0x08002627
 800242c:	08002627 	.word	0x08002627
 8002430:	08002627 	.word	0x08002627
 8002434:	08002627 	.word	0x08002627
 8002438:	08002627 	.word	0x08002627
 800243c:	08002627 	.word	0x08002627
 8002440:	08002627 	.word	0x08002627
 8002444:	08002627 	.word	0x08002627
 8002448:	08002627 	.word	0x08002627
 800244c:	08002627 	.word	0x08002627
 8002450:	08002627 	.word	0x08002627
 8002454:	08002627 	.word	0x08002627
 8002458:	08002627 	.word	0x08002627
 800245c:	08002627 	.word	0x08002627
 8002460:	08002627 	.word	0x08002627
 8002464:	0800261f 	.word	0x0800261f

///// fra id    til     : regulering av hiv parametre
	case 1:
		PID_rull.Ki = parameter;			break;
 8002468:	4a72      	ldr	r2, [pc, #456]	; (8002634 <oppdater_parameter+0x714>)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6053      	str	r3, [r2, #4]
 800246e:	e0da      	b.n	8002626 <oppdater_parameter+0x706>
	case 2:
		PID_rull.Kd = parameter;			break;
 8002470:	4a70      	ldr	r2, [pc, #448]	; (8002634 <oppdater_parameter+0x714>)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6093      	str	r3, [r2, #8]
 8002476:	e0d6      	b.n	8002626 <oppdater_parameter+0x706>
	case 3:
		PID_rull.Kp = parameter;			break;
 8002478:	4a6e      	ldr	r2, [pc, #440]	; (8002634 <oppdater_parameter+0x714>)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e0d2      	b.n	8002626 <oppdater_parameter+0x706>
	case 4:
		PID_stamp.Ki = parameter;			break;
 8002480:	4a6d      	ldr	r2, [pc, #436]	; (8002638 <oppdater_parameter+0x718>)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6053      	str	r3, [r2, #4]
 8002486:	e0ce      	b.n	8002626 <oppdater_parameter+0x706>
	case 5:
		PID_stamp.Kd = parameter;			break;
 8002488:	4a6b      	ldr	r2, [pc, #428]	; (8002638 <oppdater_parameter+0x718>)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6093      	str	r3, [r2, #8]
 800248e:	e0ca      	b.n	8002626 <oppdater_parameter+0x706>
	case 6:
		PID_stamp.Kp = parameter;			break;
 8002490:	4a69      	ldr	r2, [pc, #420]	; (8002638 <oppdater_parameter+0x718>)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e0c6      	b.n	8002626 <oppdater_parameter+0x706>
	case 7:
		PID_hiv.Ki = parameter;				break;
 8002498:	4a68      	ldr	r2, [pc, #416]	; (800263c <oppdater_parameter+0x71c>)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6053      	str	r3, [r2, #4]
 800249e:	e0c2      	b.n	8002626 <oppdater_parameter+0x706>
	case 8:
		PID_hiv.Kd = parameter;				break;
 80024a0:	4a66      	ldr	r2, [pc, #408]	; (800263c <oppdater_parameter+0x71c>)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6093      	str	r3, [r2, #8]
 80024a6:	e0be      	b.n	8002626 <oppdater_parameter+0x706>
	case 9:
		PID_hiv.Kp = parameter;				break;
 80024a8:	4a64      	ldr	r2, [pc, #400]	; (800263c <oppdater_parameter+0x71c>)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e0ba      	b.n	8002626 <oppdater_parameter+0x706>
	case 10:
		PID_felles.Ts = parameter;			break;
 80024b0:	4a63      	ldr	r2, [pc, #396]	; (8002640 <oppdater_parameter+0x720>)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e0b6      	b.n	8002626 <oppdater_parameter+0x706>
	case 11:
		PID_felles.a = parameter;		   break;
 80024b8:	4a61      	ldr	r2, [pc, #388]	; (8002640 <oppdater_parameter+0x720>)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6053      	str	r3, [r2, #4]
 80024be:	e0b2      	b.n	8002626 <oppdater_parameter+0x706>


	/// fra id    til     : lowpass filter parametre
	case 15:
		/// b blir oppdatert automatisk i kode.
		lowpass_thruster.a =  parameter;        	break;
 80024c0:	4a60      	ldr	r2, [pc, #384]	; (8002644 <oppdater_parameter+0x724>)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e0ae      	b.n	8002626 <oppdater_parameter+0x706>
	case 16:
		/// b blir oppdatert automatisk i kode.
		lowpass_manpu_steg.a =  parameter;        break;
 80024c8:	4a5f      	ldr	r2, [pc, #380]	; (8002648 <oppdater_parameter+0x728>)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e0aa      	b.n	8002626 <oppdater_parameter+0x706>
	case 17:
		/// b blir oppdatert automatisk i kode.
		lowpass_manpu_borste.a = parameter;       break;
 80024d0:	4a5e      	ldr	r2, [pc, #376]	; (800264c <oppdater_parameter+0x72c>)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e0a6      	b.n	8002626 <oppdater_parameter+0x706>


	case 18:
		BEGRENSING = parameter; break;
 80024d8:	4a5d      	ldr	r2, [pc, #372]	; (8002650 <oppdater_parameter+0x730>)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e0a2      	b.n	8002626 <oppdater_parameter+0x706>

	case 19:
		d_effekt.horisontal = parameter; break;
 80024e0:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <oppdater_parameter+0x734>)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e09e      	b.n	8002626 <oppdater_parameter+0x706>
	case 20:
		d_effekt.horisontal = parameter; break;
 80024e8:	4a5a      	ldr	r2, [pc, #360]	; (8002654 <oppdater_parameter+0x734>)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e09a      	b.n	8002626 <oppdater_parameter+0x706>


	/// fra id    til     : sensitivitet parametre
	case 30:
		thrust_sensitivitet.gir = (float) parameter;			break;
 80024f0:	4a59      	ldr	r2, [pc, #356]	; (8002658 <oppdater_parameter+0x738>)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6093      	str	r3, [r2, #8]
 80024f6:	e096      	b.n	8002626 <oppdater_parameter+0x706>
	case 31:
		thrust_sensitivitet.hiv = (float) parameter;			break;
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <oppdater_parameter+0x738>)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	60d3      	str	r3, [r2, #12]
 80024fe:	e092      	b.n	8002626 <oppdater_parameter+0x706>
	case 32:
		thrust_sensitivitet.jag = (float) parameter;			break;
 8002500:	4a55      	ldr	r2, [pc, #340]	; (8002658 <oppdater_parameter+0x738>)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e08e      	b.n	8002626 <oppdater_parameter+0x706>
	case 33:
		thrust_sensitivitet.svai = (float) parameter;			break;
 8002508:	4a53      	ldr	r2, [pc, #332]	; (8002658 <oppdater_parameter+0x738>)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6053      	str	r3, [r2, #4]
 800250e:	e08a      	b.n	8002626 <oppdater_parameter+0x706>

	case 34:
		manpu_sensitivitet.gripe = (float) parameter;		break;
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <oppdater_parameter+0x73c>)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e086      	b.n	8002626 <oppdater_parameter+0x706>
	case 35:
		manpu_sensitivitet.snurr = (float) parameter;		break;
 8002518:	4a50      	ldr	r2, [pc, #320]	; (800265c <oppdater_parameter+0x73c>)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6053      	str	r3, [r2, #4]
 800251e:	e082      	b.n	8002626 <oppdater_parameter+0x706>
	case 36:
		manpu_sensitivitet.sving = (float) parameter;		break;
 8002520:	4a4e      	ldr	r2, [pc, #312]	; (800265c <oppdater_parameter+0x73c>)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6093      	str	r3, [r2, #8]
 8002526:	e07e      	b.n	8002626 <oppdater_parameter+0x706>
//	case (..):
//			manpu_sensitivitet.skyv = (float) parameter;		break;


	case 50:
		PID_rull.uimaks = parameter;			break;
 8002528:	4a42      	ldr	r2, [pc, #264]	; (8002634 <oppdater_parameter+0x714>)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800252e:	e07a      	b.n	8002626 <oppdater_parameter+0x706>
	case 51:
		PID_rull.uimin = parameter;			   break;
 8002530:	4a40      	ldr	r2, [pc, #256]	; (8002634 <oppdater_parameter+0x714>)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	e076      	b.n	8002626 <oppdater_parameter+0x706>
	case 52:
		PID_stamp.uimaks = parameter;			break;
 8002538:	4a3f      	ldr	r2, [pc, #252]	; (8002638 <oppdater_parameter+0x718>)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800253e:	e072      	b.n	8002626 <oppdater_parameter+0x706>
	case 53:
		PID_stamp.uimin = parameter;			break;
 8002540:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <oppdater_parameter+0x718>)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	e06e      	b.n	8002626 <oppdater_parameter+0x706>
	case 54:
		PID_hiv.uimaks = parameter;			break;
 8002548:	4a3c      	ldr	r2, [pc, #240]	; (800263c <oppdater_parameter+0x71c>)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800254e:	e06a      	b.n	8002626 <oppdater_parameter+0x706>
	case 55:
		PID_hiv.uimin = parameter;			break;
 8002550:	4a3a      	ldr	r2, [pc, #232]	; (800263c <oppdater_parameter+0x71c>)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	e066      	b.n	8002626 <oppdater_parameter+0x706>

	case 100:
		ENDRE_FREKVENS = (uint8_t) parameter; break;
 8002558:	edd7 7a02 	vldr	s15, [r7, #8]
 800255c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002560:	edc7 7a01 	vstr	s15, [r7, #4]
 8002564:	793b      	ldrb	r3, [r7, #4]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <oppdater_parameter+0x740>)
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e05b      	b.n	8002626 <oppdater_parameter+0x706>


	case 200:
		pos_paa_PWM.a = parameter; break;
 800256e:	4a3d      	ldr	r2, [pc, #244]	; (8002664 <oppdater_parameter+0x744>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e057      	b.n	8002626 <oppdater_parameter+0x706>
	case 201:
		pos_paa_PWM.b = parameter; break;
 8002576:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <oppdater_parameter+0x744>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6053      	str	r3, [r2, #4]
 800257c:	e053      	b.n	8002626 <oppdater_parameter+0x706>
	case 202:
		neg_paa_PWM.a = parameter; break;
 800257e:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <oppdater_parameter+0x748>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e04f      	b.n	8002626 <oppdater_parameter+0x706>
	case 203:
		neg_paa_PWM.b = parameter; break;
 8002586:	4a38      	ldr	r2, [pc, #224]	; (8002668 <oppdater_parameter+0x748>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6053      	str	r3, [r2, #4]
 800258c:	e04b      	b.n	8002626 <oppdater_parameter+0x706>
	case 204:
		pos_kr_paa.a = parameter; break;
 800258e:	4a37      	ldr	r2, [pc, #220]	; (800266c <oppdater_parameter+0x74c>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e047      	b.n	8002626 <oppdater_parameter+0x706>
	case 205:
		pos_kr_paa.b = parameter; break;
 8002596:	4a35      	ldr	r2, [pc, #212]	; (800266c <oppdater_parameter+0x74c>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	e043      	b.n	8002626 <oppdater_parameter+0x706>
	case 206:
		neg_kr_paa.a = parameter; break;
 800259e:	4a34      	ldr	r2, [pc, #208]	; (8002670 <oppdater_parameter+0x750>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e03f      	b.n	8002626 <oppdater_parameter+0x706>
	case 207:
		neg_kr_paa.b = parameter; break;
 80025a6:	4a32      	ldr	r2, [pc, #200]	; (8002670 <oppdater_parameter+0x750>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6053      	str	r3, [r2, #4]
 80025ac:	e03b      	b.n	8002626 <oppdater_parameter+0x706>


	case 300:
		REF.dybde = parameter; break;
 80025ae:	4a31      	ldr	r2, [pc, #196]	; (8002674 <oppdater_parameter+0x754>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	6093      	str	r3, [r2, #8]
 80025b4:	e037      	b.n	8002626 <oppdater_parameter+0x706>
	case 301:
		REF.rull = parameter; break;
 80025b6:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <oppdater_parameter+0x754>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e033      	b.n	8002626 <oppdater_parameter+0x706>
	case 302:
		REF.stamp = parameter; break;
 80025be:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <oppdater_parameter+0x754>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6053      	str	r3, [r2, #4]
 80025c4:	e02f      	b.n	8002626 <oppdater_parameter+0x706>

	case 303:
		 manu_ARR_default.gripe = parameter; break;
 80025c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ce:	ee17 3a90 	vmov	r3, s15
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <oppdater_parameter+0x758>)
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	e025      	b.n	8002626 <oppdater_parameter+0x706>
	case 304:
		 manu_ARR_default.skyv = parameter; break;
 80025da:	edd7 7a02 	vldr	s15, [r7, #8]
 80025de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e2:	ee17 3a90 	vmov	r3, s15
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <oppdater_parameter+0x758>)
 80025ea:	80da      	strh	r2, [r3, #6]
 80025ec:	e01b      	b.n	8002626 <oppdater_parameter+0x706>
	case 305:
		 manu_ARR_default.snurr= parameter; break;
 80025ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f6:	ee17 3a90 	vmov	r3, s15
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <oppdater_parameter+0x758>)
 80025fe:	805a      	strh	r2, [r3, #2]
 8002600:	e011      	b.n	8002626 <oppdater_parameter+0x706>
	case 306:
		 manu_ARR_default.sving= parameter; break;
 8002602:	edd7 7a02 	vldr	s15, [r7, #8]
 8002606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260a:	ee17 3a90 	vmov	r3, s15
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <oppdater_parameter+0x758>)
 8002612:	809a      	strh	r2, [r3, #4]
 8002614:	e007      	b.n	8002626 <oppdater_parameter+0x706>

	case 308:
		 motorkar.max_neg_retn = parameter; break;
 8002616:	4a19      	ldr	r2, [pc, #100]	; (800267c <oppdater_parameter+0x75c>)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e003      	b.n	8002626 <oppdater_parameter+0x706>


	case 330:
		kraftdata.EFFEKT_begrensing = parameter; break;
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <oppdater_parameter+0x760>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6113      	str	r3, [r2, #16]
 8002624:	bf00      	nop
	}
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000260 	.word	0x20000260
 8002638:	20000224 	.word	0x20000224
 800263c:	200001e8 	.word	0x200001e8
 8002640:	20000070 	.word	0x20000070
 8002644:	2000000c 	.word	0x2000000c
 8002648:	20000014 	.word	0x20000014
 800264c:	2000001c 	.word	0x2000001c
 8002650:	20000004 	.word	0x20000004
 8002654:	200002bc 	.word	0x200002bc
 8002658:	20000044 	.word	0x20000044
 800265c:	20000058 	.word	0x20000058
 8002660:	20000001 	.word	0x20000001
 8002664:	20000024 	.word	0x20000024
 8002668:	2000002c 	.word	0x2000002c
 800266c:	20000034 	.word	0x20000034
 8002670:	2000003c 	.word	0x2000003c
 8002674:	200002a8 	.word	0x200002a8
 8002678:	20000068 	.word	0x20000068
 800267c:	20000008 	.word	0x20000008
 8002680:	200002c4 	.word	0x200002c4

08002684 <sjekk_bryter>:

#include <globvariabler_dek.h>
#include <funksjoner_manpu.h>
#include "main.h"

void sjekk_bryter(void){
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
	if (GPIOC->IDR & B1_Pin) { 			// Sjekker om bryteren er trykket inn
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <sjekk_bryter+0x40>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <sjekk_bryter+0x26>
       if(!bryter_forrige_status) { 				// Var bryteren trykket inn sist kontrollsjekk
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <sjekk_bryter+0x44>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <sjekk_bryter+0x2c>
    	   bryter_forrige_status = 1;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <sjekk_bryter+0x44>)
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    	   bryter_trykk = 1;      				// Nytt brytertrykk registrert
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <sjekk_bryter+0x48>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e002      	b.n	80026b0 <sjekk_bryter+0x2c>
       }
	}
	else {
		bryter_forrige_status = 0;
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <sjekk_bryter+0x44>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
	}


	TIM8 -> CCR1 = 1500;
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <sjekk_bryter+0x4c>)
 80026b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	48000800 	.word	0x48000800
 80026c8:	200002dd 	.word	0x200002dd
 80026cc:	200002dc 	.word	0x200002dc
 80026d0:	40013400 	.word	0x40013400

080026d4 <null_bidrag_horisontal>:
#include "math.h"


/////////////////////////// THUSTER-STRYING

void null_bidrag_horisontal(thruster_struct *bidrag){
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    bidrag->hhb = 0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	605a      	str	r2, [r3, #4]
    bidrag->hhf = 0;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    bidrag->hvb = 0;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
    bidrag->hvf = 0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <null_bidrag_vertikal>:

void null_bidrag_vertikal(thruster_struct *bidrag){
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    bidrag->vhb = 0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
    bidrag->vhf = 0;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
    bidrag->vvb = 0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
    bidrag->vvf = 0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <null_bidrag_alle_regvar>:

//// sette alle regvar-bidrag for prosjekt til 0.
void null_bidrag_alle_regvar(void){
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
    null_bidrag_horisontal(&reguleringbidrag_hiv);
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <null_bidrag_alle_regvar+0x2c>)
 8002742:	f7ff ffc7 	bl	80026d4 <null_bidrag_horisontal>
    null_bidrag_vertikal(&reguleringbidrag_hiv);
 8002746:	4808      	ldr	r0, [pc, #32]	; (8002768 <null_bidrag_alle_regvar+0x2c>)
 8002748:	f7ff ffde 	bl	8002708 <null_bidrag_vertikal>
    null_bidrag_horisontal(&reguleringbidrag_stamp);
 800274c:	4807      	ldr	r0, [pc, #28]	; (800276c <null_bidrag_alle_regvar+0x30>)
 800274e:	f7ff ffc1 	bl	80026d4 <null_bidrag_horisontal>
    null_bidrag_vertikal(&reguleringbidrag_stamp);
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <null_bidrag_alle_regvar+0x30>)
 8002754:	f7ff ffd8 	bl	8002708 <null_bidrag_vertikal>
    null_bidrag_horisontal(&reguleringbidrag_rull);
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <null_bidrag_alle_regvar+0x34>)
 800275a:	f7ff ffbb 	bl	80026d4 <null_bidrag_horisontal>
    null_bidrag_vertikal(&reguleringbidrag_rull);
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <null_bidrag_alle_regvar+0x34>)
 8002760:	f7ff ffd2 	bl	8002708 <null_bidrag_vertikal>
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000150 	.word	0x20000150
 800276c:	20000170 	.word	0x20000170
 8002770:	20000190 	.word	0x20000190

08002774 <beregning_operatorbidrag>:

void beregning_operatorbidrag(void){
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
	operator_referanse.jag = (float) operator_referanse_int.jag;
 800277a:	4b94      	ldr	r3, [pc, #592]	; (80029cc <beregning_operatorbidrag+0x258>)
 800277c:	f993 3000 	ldrsb.w	r3, [r3]
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002788:	4b91      	ldr	r3, [pc, #580]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 800278a:	edc3 7a00 	vstr	s15, [r3]
	operator_referanse.svai = (float) operator_referanse_int.svai;
 800278e:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <beregning_operatorbidrag+0x258>)
 8002790:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279c:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 800279e:	edc3 7a01 	vstr	s15, [r3, #4]
	operator_referanse.gir = (float) operator_referanse_int.gir;
 80027a2:	4b8a      	ldr	r3, [pc, #552]	; (80029cc <beregning_operatorbidrag+0x258>)
 80027a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b0:	4b87      	ldr	r3, [pc, #540]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 80027b2:	edc3 7a02 	vstr	s15, [r3, #8]
	operator_referanse.hiv = (float) operator_referanse_int.hiv;
 80027b6:	4b85      	ldr	r3, [pc, #532]	; (80029cc <beregning_operatorbidrag+0x258>)
 80027b8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c4:	4b82      	ldr	r3, [pc, #520]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 80027c6:	edc3 7a03 	vstr	s15, [r3, #12]

	static uint32_t teller_til_aktiver_reg_hiv = 0;

	// dersom er jag eller svai i melding
	if (operator_referanse.jag || operator_referanse.svai){
 80027ca:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	d107      	bne.n	80027ea <beregning_operatorbidrag+0x76>
 80027da:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 80027dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80027e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	d03e      	beq.n	8002868 <beregning_operatorbidrag+0xf4>
        float jag = operator_referanse.jag * thrust_sensitivitet.jag;
 80027ea:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 80027ec:	ed93 7a00 	vldr	s14, [r3]
 80027f0:	4b78      	ldr	r3, [pc, #480]	; (80029d4 <beregning_operatorbidrag+0x260>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fa:	edc7 7a03 	vstr	s15, [r7, #12]
        float svai = operator_referanse.svai * thrust_sensitivitet.svai;
 80027fe:	4b74      	ldr	r3, [pc, #464]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 8002800:	ed93 7a01 	vldr	s14, [r3, #4]
 8002804:	4b73      	ldr	r3, [pc, #460]	; (80029d4 <beregning_operatorbidrag+0x260>)
 8002806:	edd3 7a01 	vldr	s15, [r3, #4]
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	edc7 7a02 	vstr	s15, [r7, #8]

        operatorbidrag.hhf = (jag - svai) / sqrtf(2);
 8002812:	ed97 7a03 	vldr	s14, [r7, #12]
 8002816:	edd7 7a02 	vldr	s15, [r7, #8]
 800281a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800281e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80029d8 <beregning_operatorbidrag+0x264>
 8002822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002826:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
        operatorbidrag.hvf = (jag + svai) / sqrtf(2);
 800282c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002830:	edd7 7a02 	vldr	s15, [r7, #8]
 8002834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002838:	eddf 6a67 	vldr	s13, [pc, #412]	; 80029d8 <beregning_operatorbidrag+0x264>
 800283c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002840:	4b66      	ldr	r3, [pc, #408]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002842:	edc3 7a03 	vstr	s15, [r3, #12]
        operatorbidrag.hhb = - operatorbidrag.hvf;
 8002846:	4b65      	ldr	r3, [pc, #404]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002848:	edd3 7a03 	vldr	s15, [r3, #12]
 800284c:	eef1 7a67 	vneg.f32	s15, s15
 8002850:	4b62      	ldr	r3, [pc, #392]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002852:	edc3 7a01 	vstr	s15, [r3, #4]
        operatorbidrag.hvb = - operatorbidrag.hhf;
 8002856:	4b61      	ldr	r3, [pc, #388]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	eef1 7a67 	vneg.f32	s15, s15
 8002860:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002862:	edc3 7a02 	vstr	s15, [r3, #8]
	if (operator_referanse.jag || operator_referanse.svai){
 8002866:	e00f      	b.n	8002888 <beregning_operatorbidrag+0x114>
    }
    else{
    	// må sette til null hvis melding tom, hvis ikke fortsetter å skrive
    	// forrige verdi
    	operatorbidrag.hhf = 0;
 8002868:	4b5c      	ldr	r3, [pc, #368]	; (80029dc <beregning_operatorbidrag+0x268>)
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    	operatorbidrag.hvf = 0;
 8002870:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
    	operatorbidrag.hhb = 0;
 8002878:	4b58      	ldr	r3, [pc, #352]	; (80029dc <beregning_operatorbidrag+0x268>)
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
    	operatorbidrag.hvb = 0;
 8002880:	4b56      	ldr	r3, [pc, #344]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
    }

    // dersom er gir i melding
    if (operator_referanse.gir){
 8002888:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 800288a:	edd3 7a02 	vldr	s15, [r3, #8]
 800288e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002896:	d031      	beq.n	80028fc <beregning_operatorbidrag+0x188>
        // vil ha gir-rotasjon-krefter vesentlig svakere enn de andre
        float gir = operator_referanse.gir * thrust_sensitivitet.gir;
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 800289a:	ed93 7a02 	vldr	s14, [r3, #8]
 800289e:	4b4d      	ldr	r3, [pc, #308]	; (80029d4 <beregning_operatorbidrag+0x260>)
 80028a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	edc7 7a01 	vstr	s15, [r7, #4]
        operatorbidrag.hhf -= gir;
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028ae:	ed93 7a00 	vldr	s14, [r3]
 80028b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ba:	4b48      	ldr	r3, [pc, #288]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028bc:	edc3 7a00 	vstr	s15, [r3]
        operatorbidrag.hhb += gir;
 80028c0:	4b46      	ldr	r3, [pc, #280]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80028c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ce:	4b43      	ldr	r3, [pc, #268]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028d0:	edc3 7a01 	vstr	s15, [r3, #4]
        operatorbidrag.hvb -= gir;
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80028da:	edd7 7a01 	vldr	s15, [r7, #4]
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028e4:	edc3 7a02 	vstr	s15, [r3, #8]
        operatorbidrag.hvf += gir;
 80028e8:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80028ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80028f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f6:	4b39      	ldr	r3, [pc, #228]	; (80029dc <beregning_operatorbidrag+0x268>)
 80028f8:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    // Bidrag til vertikale thrustere i tilfelle hiv
    if (operator_referanse.hiv){
 80028fc:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 80028fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002902:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	d020      	beq.n	800294e <beregning_operatorbidrag+0x1da>

    	// settte flag for reg av hiv til 0
    	REG_AKTIVER_DYBDE = REG_AKTIVER_DYBDE & (~0x08);
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <beregning_operatorbidrag+0x26c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f023 0308 	bic.w	r3, r3, #8
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <beregning_operatorbidrag+0x26c>)
 8002918:	701a      	strb	r2, [r3, #0]

    	teller_til_aktiver_reg_hiv = 0;
 800291a:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <beregning_operatorbidrag+0x270>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        float hiv = operator_referanse.hiv * thrust_sensitivitet.hiv;
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <beregning_operatorbidrag+0x25c>)
 8002922:	ed93 7a03 	vldr	s14, [r3, #12]
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <beregning_operatorbidrag+0x260>)
 8002928:	edd3 7a03 	vldr	s15, [r3, #12]
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	edc7 7a00 	vstr	s15, [r7]
        operatorbidrag.vhf = hiv;
 8002934:	4a29      	ldr	r2, [pc, #164]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6113      	str	r3, [r2, #16]
        operatorbidrag.vhb = hiv;
 800293a:	4a28      	ldr	r2, [pc, #160]	; (80029dc <beregning_operatorbidrag+0x268>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6153      	str	r3, [r2, #20]
        operatorbidrag.vvb = hiv;
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6193      	str	r3, [r2, #24]
        operatorbidrag.vvf = hiv;
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <beregning_operatorbidrag+0x268>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	61d3      	str	r3, [r2, #28]
    	operatorbidrag.vhf = 0;
        operatorbidrag.vhb = 0;
        operatorbidrag.vvb = 0;
        operatorbidrag.vvf = 0;
    }
}
 800294c:	e038      	b.n	80029c0 <beregning_operatorbidrag+0x24c>
    	if(teller_til_aktiver_reg_hiv == 6){
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <beregning_operatorbidrag+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b06      	cmp	r3, #6
 8002954:	d118      	bne.n	8002988 <beregning_operatorbidrag+0x214>
    		if (REG_AKTIVER & (0x08)){
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <beregning_operatorbidrag+0x274>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <beregning_operatorbidrag+0x206>
    			REG_AKTIVER_DYBDE = REG_AKTIVER_DYBDE | (0x08);
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <beregning_operatorbidrag+0x26c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f043 0308 	orr.w	r3, r3, #8
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <beregning_operatorbidrag+0x26c>)
 800296e:	701a      	strb	r2, [r3, #0]
    			PID_hiv.Ref = sensordata.dybde;
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <beregning_operatorbidrag+0x278>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <beregning_operatorbidrag+0x27c>)
 8002976:	60d3      	str	r3, [r2, #12]
 8002978:	e006      	b.n	8002988 <beregning_operatorbidrag+0x214>
    			REG_AKTIVER_DYBDE = REG_AKTIVER_DYBDE & (~0x08);
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <beregning_operatorbidrag+0x26c>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	f023 0308 	bic.w	r3, r3, #8
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <beregning_operatorbidrag+0x26c>)
 8002986:	701a      	strb	r2, [r3, #0]
    	teller_til_aktiver_reg_hiv++;
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <beregning_operatorbidrag+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <beregning_operatorbidrag+0x270>)
 8002990:	6013      	str	r3, [r2, #0]
    	if(teller_til_aktiver_reg_hiv>100){
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <beregning_operatorbidrag+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d902      	bls.n	80029a0 <beregning_operatorbidrag+0x22c>
    		teller_til_aktiver_reg_hiv = 10;
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <beregning_operatorbidrag+0x270>)
 800299c:	220a      	movs	r2, #10
 800299e:	601a      	str	r2, [r3, #0]
    	operatorbidrag.vhf = 0;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <beregning_operatorbidrag+0x268>)
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
        operatorbidrag.vhb = 0;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <beregning_operatorbidrag+0x268>)
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
        operatorbidrag.vvb = 0;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <beregning_operatorbidrag+0x268>)
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
        operatorbidrag.vvf = 0;
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <beregning_operatorbidrag+0x268>)
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	200000e0 	.word	0x200000e0
 80029d0:	200000cc 	.word	0x200000cc
 80029d4:	20000044 	.word	0x20000044
 80029d8:	3fb504f3 	.word	0x3fb504f3
 80029dc:	200000f0 	.word	0x200000f0
 80029e0:	200000a9 	.word	0x200000a9
 80029e4:	200000a0 	.word	0x200000a0
 80029e8:	200000aa 	.word	0x200000aa
 80029ec:	2000029c 	.word	0x2000029c
 80029f0:	200001e8 	.word	0x200001e8

080029f4 <beregn_sum_bidrag>:
//		var_shift = var_shift | VF;
//	}

	//shiftUT(var_shift);

void beregn_sum_bidrag(void) {
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
    // horisontal
    sum_bidrag.hhf =
            operatorbidrag.hhf + reguleringbidrag_hiv.hhf + reguleringbidrag_stamp.hhf + reguleringbidrag_rull.hhf;
 80029f8:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <beregn_sum_bidrag+0x160>)
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a08:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hhf =
 8002a1c:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002a1e:	edc3 7a00 	vstr	s15, [r3]
    sum_bidrag.hhb =
            operatorbidrag.hhb + reguleringbidrag_hiv.hhb + reguleringbidrag_stamp.hhb + reguleringbidrag_rull.hhb;
 8002a22:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <beregn_sum_bidrag+0x160>)
 8002a24:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a28:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002a2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a3c:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002a3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a42:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hhb =
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002a48:	edc3 7a01 	vstr	s15, [r3, #4]
    sum_bidrag.hvf =
            operatorbidrag.hvf + reguleringbidrag_hiv.hvf + reguleringbidrag_stamp.hvf + reguleringbidrag_rull.hvf;
 8002a4c:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <beregn_sum_bidrag+0x160>)
 8002a4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a52:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002a54:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002a5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a66:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hvf =
 8002a70:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002a72:	edc3 7a03 	vstr	s15, [r3, #12]
    sum_bidrag.hvb =
            operatorbidrag.hvb + reguleringbidrag_hiv.hvb + reguleringbidrag_stamp.hvb + reguleringbidrag_rull.hvb;
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <beregn_sum_bidrag+0x160>)
 8002a78:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002a7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a86:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002a88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a90:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002a92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a96:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.hvb =
 8002a9a:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002a9c:	edc3 7a02 	vstr	s15, [r3, #8]
    // vertikal
    sum_bidrag.vhf =
            operatorbidrag.vhf + reguleringbidrag_hiv.vhf + reguleringbidrag_stamp.vhf + reguleringbidrag_rull.vhf;
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <beregn_sum_bidrag+0x160>)
 8002aa2:	ed93 7a04 	vldr	s14, [r3, #16]
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002aa8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002ab2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002abc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vhf =
 8002ac4:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002ac6:	edc3 7a04 	vstr	s15, [r3, #16]
    sum_bidrag.vhb =
            operatorbidrag.vhb + reguleringbidrag_hiv.vhb + reguleringbidrag_stamp.vhb + reguleringbidrag_rull.vhb;
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <beregn_sum_bidrag+0x160>)
 8002acc:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002ad2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002adc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002ae6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002aea:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vhb =
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002af0:	edc3 7a05 	vstr	s15, [r3, #20]
    sum_bidrag.vvf =
            operatorbidrag.vvf + reguleringbidrag_hiv.vvf + reguleringbidrag_stamp.vvf + reguleringbidrag_rull.vvf;
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <beregn_sum_bidrag+0x160>)
 8002af6:	ed93 7a07 	vldr	s14, [r3, #28]
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002afc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002b06:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002b10:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b14:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vvf =
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002b1a:	edc3 7a07 	vstr	s15, [r3, #28]
    sum_bidrag.vvb =
            operatorbidrag.vvb + reguleringbidrag_hiv.vvb + reguleringbidrag_stamp.vvb + reguleringbidrag_rull.vvb;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <beregn_sum_bidrag+0x160>)
 8002b20:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <beregn_sum_bidrag+0x164>)
 8002b26:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <beregn_sum_bidrag+0x168>)
 8002b30:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <beregn_sum_bidrag+0x16c>)
 8002b3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum_bidrag.vvb =
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <beregn_sum_bidrag+0x170>)
 8002b44:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	200000f0 	.word	0x200000f0
 8002b58:	20000150 	.word	0x20000150
 8002b5c:	20000170 	.word	0x20000170
 8002b60:	20000190 	.word	0x20000190
 8002b64:	20000110 	.word	0x20000110

08002b68 <skalere_ned_saturation_neg>:

void skalere_ned_saturation_neg(float grense_variabel) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08e      	sub	sp, #56	; 0x38
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	ed87 0a01 	vstr	s0, [r7, #4]
    grense_variabel = grense_variabel;
    float over_grense[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	2220      	movs	r2, #32
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f007 f886 	bl	8009c8c <memset>

    if (sum_bidrag.hhf < grense_variabel) { over_grense[0] = sum_bidrag.hhf; }
 8002b80:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	dd02      	ble.n	8002b9a <skalere_ned_saturation_neg+0x32>
 8002b94:	4b6e      	ldr	r3, [pc, #440]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]
    if (sum_bidrag.hhb < grense_variabel) { over_grense[1] = sum_bidrag.hhb; }
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ba0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	dd02      	ble.n	8002bb4 <skalere_ned_saturation_neg+0x4c>
 8002bae:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]
    if (sum_bidrag.hvf < grense_variabel) { over_grense[2] = sum_bidrag.hvf; }
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bba:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	dd02      	ble.n	8002bce <skalere_ned_saturation_neg+0x66>
 8002bc8:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	613b      	str	r3, [r7, #16]
    if (sum_bidrag.hvb < grense_variabel) { over_grense[3] = sum_bidrag.hvb; }
 8002bce:	4b60      	ldr	r3, [pc, #384]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002bd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	dd02      	ble.n	8002be8 <skalere_ned_saturation_neg+0x80>
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	617b      	str	r3, [r7, #20]

    if (sum_bidrag.vhf < grense_variabel) { over_grense[4] = sum_bidrag.vhf; }
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002bea:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bee:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	dd02      	ble.n	8002c02 <skalere_ned_saturation_neg+0x9a>
 8002bfc:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	61bb      	str	r3, [r7, #24]
    if (sum_bidrag.vhb < grense_variabel) { over_grense[5] = sum_bidrag.vhb; }
 8002c02:	4b53      	ldr	r3, [pc, #332]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002c04:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c08:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd02      	ble.n	8002c1c <skalere_ned_saturation_neg+0xb4>
 8002c16:	4b4e      	ldr	r3, [pc, #312]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	61fb      	str	r3, [r7, #28]
    if (sum_bidrag.vvf < grense_variabel) { over_grense[6] = sum_bidrag.vvf; }
 8002c1c:	4b4c      	ldr	r3, [pc, #304]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002c1e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c22:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	dd02      	ble.n	8002c36 <skalere_ned_saturation_neg+0xce>
 8002c30:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	623b      	str	r3, [r7, #32]
    if (sum_bidrag.vvb < grense_variabel) { over_grense[7] = sum_bidrag.vvb;}
 8002c36:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002c38:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	dd02      	ble.n	8002c50 <skalere_ned_saturation_neg+0xe8>
 8002c4a:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24

    //Calculate length of array arr
    // int length = sizeof(over_grense) / sizeof(over_grense[0]);
    int length = 8;
 8002c50:	2308      	movs	r3, #8
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c

    //Initialize min with first element of array.
    float mest_neg = over_grense[0];
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34

    //Loop through the array
    for (int i = 0; i < length; i++) {
 8002c58:	2300      	movs	r3, #0
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c5c:	e017      	b.n	8002c8e <skalere_ned_saturation_neg+0x126>
        //Compare elements of array with min
        if (over_grense[i] < mest_neg)
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3338      	adds	r3, #56	; 0x38
 8002c64:	443b      	add	r3, r7
 8002c66:	3b30      	subs	r3, #48	; 0x30
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	dd06      	ble.n	8002c88 <skalere_ned_saturation_neg+0x120>
            mest_neg = over_grense[i];
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	3338      	adds	r3, #56	; 0x38
 8002c80:	443b      	add	r3, r7
 8002c82:	3b30      	subs	r3, #48	; 0x30
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < length; i++) {
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dbe3      	blt.n	8002c5e <skalere_ned_saturation_neg+0xf6>
    }

    float skalerings_variabel = grense_variabel/mest_neg;
 8002c96:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    sum_bidrag.hhf *= skalerings_variabel;
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002ca8:	ed93 7a00 	vldr	s14, [r3]
 8002cac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb4:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002cb6:	edc3 7a00 	vstr	s15, [r3]
    sum_bidrag.hhb *= skalerings_variabel;
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cc0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002cca:	edc3 7a01 	vstr	s15, [r3, #4]
    sum_bidrag.hvf *= skalerings_variabel;
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002cd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002cd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002cde:	edc3 7a03 	vstr	s15, [r3, #12]
    sum_bidrag.hvb *= skalerings_variabel;
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002ce4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ce8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002cf2:	edc3 7a02 	vstr	s15, [r3, #8]

    sum_bidrag.vhf *= skalerings_variabel;
 8002cf6:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002cf8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002d06:	edc3 7a04 	vstr	s15, [r3, #16]
    sum_bidrag.vhb *= skalerings_variabel;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002d0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002d1a:	edc3 7a05 	vstr	s15, [r3, #20]
    sum_bidrag.vvf *= skalerings_variabel;
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002d20:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002d2e:	edc3 7a07 	vstr	s15, [r3, #28]
    sum_bidrag.vvb *= skalerings_variabel;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002d34:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <skalere_ned_saturation_neg+0x1e8>)
 8002d42:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8002d46:	bf00      	nop
 8002d48:	3738      	adds	r7, #56	; 0x38
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000110 	.word	0x20000110

08002d54 <skalere_ned_saturation_pos>:

void skalere_ned_saturation_pos(float grense_variabel) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	ed87 0a01 	vstr	s0, [r7, #4]
    grense_variabel = fabsf(grense_variabel);
 8002d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d62:	eef0 7ae7 	vabs.f32	s15, s15
 8002d66:	edc7 7a01 	vstr	s15, [r7, #4]
    float over_grense[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	2220      	movs	r2, #32
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f006 ff8a 	bl	8009c8c <memset>

    if (fabsf(sum_bidrag.hhf) > grense_variabel) { over_grense[0] = fabsf(sum_bidrag.hhf); }
 8002d78:	4b8b      	ldr	r3, [pc, #556]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	eef0 7ae7 	vabs.f32	s15, s15
 8002d82:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d506      	bpl.n	8002d9e <skalere_ned_saturation_pos+0x4a>
 8002d90:	4b85      	ldr	r3, [pc, #532]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	eef0 7ae7 	vabs.f32	s15, s15
 8002d9a:	edc7 7a02 	vstr	s15, [r7, #8]
    if (fabsf(sum_bidrag.hhb) > grense_variabel) { over_grense[1] = fabsf(sum_bidrag.hhb); }
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002da0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da4:	eef0 7ae7 	vabs.f32	s15, s15
 8002da8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	d506      	bpl.n	8002dc4 <skalere_ned_saturation_pos+0x70>
 8002db6:	4b7c      	ldr	r3, [pc, #496]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002db8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dbc:	eef0 7ae7 	vabs.f32	s15, s15
 8002dc0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (fabsf(sum_bidrag.hvf) > grense_variabel) { over_grense[2] = fabsf(sum_bidrag.hvf) ; }
 8002dc4:	4b78      	ldr	r3, [pc, #480]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002dc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dca:	eef0 7ae7 	vabs.f32	s15, s15
 8002dce:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	d506      	bpl.n	8002dea <skalere_ned_saturation_pos+0x96>
 8002ddc:	4b72      	ldr	r3, [pc, #456]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002dde:	edd3 7a03 	vldr	s15, [r3, #12]
 8002de2:	eef0 7ae7 	vabs.f32	s15, s15
 8002de6:	edc7 7a04 	vstr	s15, [r7, #16]
    if (fabsf(sum_bidrag.hvb) > grense_variabel) { over_grense[3] = fabsf(sum_bidrag.hvb); }
 8002dea:	4b6f      	ldr	r3, [pc, #444]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002dec:	edd3 7a02 	vldr	s15, [r3, #8]
 8002df0:	eef0 7ae7 	vabs.f32	s15, s15
 8002df4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	d506      	bpl.n	8002e10 <skalere_ned_saturation_pos+0xbc>
 8002e02:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e04:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e08:	eef0 7ae7 	vabs.f32	s15, s15
 8002e0c:	edc7 7a05 	vstr	s15, [r7, #20]

    if (fabsf(sum_bidrag.vhf) > grense_variabel) { over_grense[4] = fabsf(sum_bidrag.vhf) ; }
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e12:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e16:	eef0 7ae7 	vabs.f32	s15, s15
 8002e1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d506      	bpl.n	8002e36 <skalere_ned_saturation_pos+0xe2>
 8002e28:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8002e32:	edc7 7a06 	vstr	s15, [r7, #24]
    if (fabsf(sum_bidrag.vhb) > grense_variabel) { over_grense[5] = fabsf(sum_bidrag.vhb); }
 8002e36:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e38:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e3c:	eef0 7ae7 	vabs.f32	s15, s15
 8002e40:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	d506      	bpl.n	8002e5c <skalere_ned_saturation_pos+0x108>
 8002e4e:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e50:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e54:	eef0 7ae7 	vabs.f32	s15, s15
 8002e58:	edc7 7a07 	vstr	s15, [r7, #28]
    if (fabsf(sum_bidrag.vvf) > grense_variabel) { over_grense[6] = fabsf(sum_bidrag.vvf) ; }
 8002e5c:	4b52      	ldr	r3, [pc, #328]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e62:	eef0 7ae7 	vabs.f32	s15, s15
 8002e66:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d506      	bpl.n	8002e82 <skalere_ned_saturation_pos+0x12e>
 8002e74:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e76:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e7a:	eef0 7ae7 	vabs.f32	s15, s15
 8002e7e:	edc7 7a08 	vstr	s15, [r7, #32]
    if (fabsf(sum_bidrag.vvb) > grense_variabel) { over_grense[7] = fabsf(sum_bidrag.vvb);}
 8002e82:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e84:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e88:	eef0 7ae7 	vabs.f32	s15, s15
 8002e8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	d506      	bpl.n	8002ea8 <skalere_ned_saturation_pos+0x154>
 8002e9a:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002e9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ea0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    //Calculate length of array arr
    // int length = sizeof(over_grense) / sizeof(over_grense[0]);
    // bedre med fast verdi her, slipper dele operasjon.
    int length = 8;
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

    //Initialize min with first element of array.
    float hoyest = over_grense[0];
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34

    //Loop through the array
    for (int i = 0; i < length; i++) {
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb4:	e017      	b.n	8002ee6 <skalere_ned_saturation_pos+0x192>
        //Compare elements of array with min
        if (over_grense[i] > hoyest)
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	3338      	adds	r3, #56	; 0x38
 8002ebc:	443b      	add	r3, r7
 8002ebe:	3b30      	subs	r3, #48	; 0x30
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed0:	d506      	bpl.n	8002ee0 <skalere_ned_saturation_pos+0x18c>
            hoyest = over_grense[i];
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	3338      	adds	r3, #56	; 0x38
 8002ed8:	443b      	add	r3, r7
 8002eda:	3b30      	subs	r3, #48	; 0x30
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < length; i++) {
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	dbe3      	blt.n	8002eb6 <skalere_ned_saturation_pos+0x162>
    }

    float skalerings_variabel = grense_variabel/hoyest;
 8002eee:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ef2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002efa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    sum_bidrag.hhf *= skalerings_variabel;
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f00:	ed93 7a00 	vldr	s14, [r3]
 8002f04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f0e:	edc3 7a00 	vstr	s15, [r3]
    sum_bidrag.hhb *= skalerings_variabel;
 8002f12:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f14:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f22:	edc3 7a01 	vstr	s15, [r3, #4]
    sum_bidrag.hvf *= skalerings_variabel;
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f28:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f34:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f36:	edc3 7a03 	vstr	s15, [r3, #12]
    sum_bidrag.hvb *= skalerings_variabel;
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f4a:	edc3 7a02 	vstr	s15, [r3, #8]

    sum_bidrag.vhf *= skalerings_variabel;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f50:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f5e:	edc3 7a04 	vstr	s15, [r3, #16]
    sum_bidrag.vhb *= skalerings_variabel;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f64:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f72:	edc3 7a05 	vstr	s15, [r3, #20]
    sum_bidrag.vvf *= skalerings_variabel;
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f78:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f86:	edc3 7a07 	vstr	s15, [r3, #28]
    sum_bidrag.vvb *= skalerings_variabel;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f8c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <skalere_ned_saturation_pos+0x254>)
 8002f9a:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8002f9e:	bf00      	nop
 8002fa0:	3738      	adds	r7, #56	; 0x38
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000110 	.word	0x20000110

08002fac <sjekk_saturation_minus>:

uint8_t sjekk_saturation_minus(void) {
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
    // Sjekk om sum er mer negativ enn feks -70 som er maks i negativ retning relativt til positiv.
    // dersom tilfellet -> trenger da å skalere ned
    if ( (sum_bidrag.hhf < motorkar.max_neg_retn) || (sum_bidrag.hhb < motorkar.max_neg_retn) || \
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <sjekk_saturation_minus+0xc4>)
 8002fb2:	ed93 7a00 	vldr	s14, [r3]
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <sjekk_saturation_minus+0xc8>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	d44c      	bmi.n	8003060 <sjekk_saturation_minus+0xb4>
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <sjekk_saturation_minus+0xc4>)
 8002fc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <sjekk_saturation_minus+0xc8>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	d441      	bmi.n	8003060 <sjekk_saturation_minus+0xb4>
         (sum_bidrag.hvf < motorkar.max_neg_retn) || (sum_bidrag.hvb < motorkar.max_neg_retn) || \
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <sjekk_saturation_minus+0xc4>)
 8002fde:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <sjekk_saturation_minus+0xc8>)
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
    if ( (sum_bidrag.hhf < motorkar.max_neg_retn) || (sum_bidrag.hhb < motorkar.max_neg_retn) || \
 8002fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff0:	d436      	bmi.n	8003060 <sjekk_saturation_minus+0xb4>
         (sum_bidrag.hvf < motorkar.max_neg_retn) || (sum_bidrag.hvb < motorkar.max_neg_retn) || \
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <sjekk_saturation_minus+0xc4>)
 8002ff4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <sjekk_saturation_minus+0xc8>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003006:	d42b      	bmi.n	8003060 <sjekk_saturation_minus+0xb4>
         (sum_bidrag.vhf < motorkar.max_neg_retn) || (sum_bidrag.vhb < motorkar.max_neg_retn) || \
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <sjekk_saturation_minus+0xc4>)
 800300a:	ed93 7a04 	vldr	s14, [r3, #16]
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <sjekk_saturation_minus+0xc8>)
 8003010:	edd3 7a00 	vldr	s15, [r3]
         (sum_bidrag.hvf < motorkar.max_neg_retn) || (sum_bidrag.hvb < motorkar.max_neg_retn) || \
 8003014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d420      	bmi.n	8003060 <sjekk_saturation_minus+0xb4>
         (sum_bidrag.vhf < motorkar.max_neg_retn) || (sum_bidrag.vhb < motorkar.max_neg_retn) || \
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <sjekk_saturation_minus+0xc4>)
 8003020:	ed93 7a05 	vldr	s14, [r3, #20]
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <sjekk_saturation_minus+0xc8>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003032:	d415      	bmi.n	8003060 <sjekk_saturation_minus+0xb4>
         (sum_bidrag.vvf < motorkar.max_neg_retn) || (sum_bidrag.vvb < motorkar.max_neg_retn)) {
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <sjekk_saturation_minus+0xc4>)
 8003036:	ed93 7a07 	vldr	s14, [r3, #28]
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <sjekk_saturation_minus+0xc8>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
         (sum_bidrag.vhf < motorkar.max_neg_retn) || (sum_bidrag.vhb < motorkar.max_neg_retn) || \
 8003040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003048:	d40a      	bmi.n	8003060 <sjekk_saturation_minus+0xb4>
         (sum_bidrag.vvf < motorkar.max_neg_retn) || (sum_bidrag.vvb < motorkar.max_neg_retn)) {
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <sjekk_saturation_minus+0xc4>)
 800304c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <sjekk_saturation_minus+0xc8>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	d501      	bpl.n	8003064 <sjekk_saturation_minus+0xb8>
            return 1;
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <sjekk_saturation_minus+0xba>
        }
    return 0;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	20000110 	.word	0x20000110
 8003074:	20000008 	.word	0x20000008

08003078 <sjekk_saturation_pos>:


int8_t sjekk_saturation_pos(void){
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
    // sjekk om sum større enn 100 -> trenger da å skalere ned

    if ( (fabsf(sum_bidrag.hhf) > 100) || (fabsf(sum_bidrag.hhb) > 100) || \
 800307c:	4b33      	ldr	r3, [pc, #204]	; (800314c <sjekk_saturation_pos+0xd4>)
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	eef0 7ae7 	vabs.f32	s15, s15
 8003086:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003150 <sjekk_saturation_pos+0xd8>
 800308a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	dc53      	bgt.n	800313c <sjekk_saturation_pos+0xc4>
 8003094:	4b2d      	ldr	r3, [pc, #180]	; (800314c <sjekk_saturation_pos+0xd4>)
 8003096:	edd3 7a01 	vldr	s15, [r3, #4]
 800309a:	eef0 7ae7 	vabs.f32	s15, s15
 800309e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003150 <sjekk_saturation_pos+0xd8>
 80030a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030aa:	dc47      	bgt.n	800313c <sjekk_saturation_pos+0xc4>
         (fabsf(sum_bidrag.hvf) > 100) || (fabsf(sum_bidrag.hvb) > 100) || \
 80030ac:	4b27      	ldr	r3, [pc, #156]	; (800314c <sjekk_saturation_pos+0xd4>)
 80030ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80030b2:	eef0 7ae7 	vabs.f32	s15, s15
    if ( (fabsf(sum_bidrag.hhf) > 100) || (fabsf(sum_bidrag.hhb) > 100) || \
 80030b6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003150 <sjekk_saturation_pos+0xd8>
 80030ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	dc3b      	bgt.n	800313c <sjekk_saturation_pos+0xc4>
         (fabsf(sum_bidrag.hvf) > 100) || (fabsf(sum_bidrag.hvb) > 100) || \
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <sjekk_saturation_pos+0xd4>)
 80030c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80030ca:	eef0 7ae7 	vabs.f32	s15, s15
 80030ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003150 <sjekk_saturation_pos+0xd8>
 80030d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	dc2f      	bgt.n	800313c <sjekk_saturation_pos+0xc4>
         (fabsf(sum_bidrag.vhf) > 100) || (fabsf(sum_bidrag.vhb) > 100) || \
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <sjekk_saturation_pos+0xd4>)
 80030de:	edd3 7a04 	vldr	s15, [r3, #16]
 80030e2:	eef0 7ae7 	vabs.f32	s15, s15
         (fabsf(sum_bidrag.hvf) > 100) || (fabsf(sum_bidrag.hvb) > 100) || \
 80030e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003150 <sjekk_saturation_pos+0xd8>
 80030ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	dc23      	bgt.n	800313c <sjekk_saturation_pos+0xc4>
         (fabsf(sum_bidrag.vhf) > 100) || (fabsf(sum_bidrag.vhb) > 100) || \
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <sjekk_saturation_pos+0xd4>)
 80030f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80030fa:	eef0 7ae7 	vabs.f32	s15, s15
 80030fe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003150 <sjekk_saturation_pos+0xd8>
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	dc17      	bgt.n	800313c <sjekk_saturation_pos+0xc4>
         (fabsf(sum_bidrag.vvf) > 100) || (fabsf(sum_bidrag.vvb) > 100)) {
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <sjekk_saturation_pos+0xd4>)
 800310e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003112:	eef0 7ae7 	vabs.f32	s15, s15
         (fabsf(sum_bidrag.vhf) > 100) || (fabsf(sum_bidrag.vhb) > 100) || \
 8003116:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003150 <sjekk_saturation_pos+0xd8>
 800311a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	dc0b      	bgt.n	800313c <sjekk_saturation_pos+0xc4>
         (fabsf(sum_bidrag.vvf) > 100) || (fabsf(sum_bidrag.vvb) > 100)) {
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <sjekk_saturation_pos+0xd4>)
 8003126:	edd3 7a06 	vldr	s15, [r3, #24]
 800312a:	eef0 7ae7 	vabs.f32	s15, s15
 800312e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003150 <sjekk_saturation_pos+0xd8>
 8003132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313a:	dd01      	ble.n	8003140 <sjekk_saturation_pos+0xc8>
        return 1;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <sjekk_saturation_pos+0xca>
    }
    return 0;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000110 	.word	0x20000110
 8003150:	42c80000 	.word	0x42c80000

08003154 <horisontal_demping>:

void horisontal_demping(void){
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
	// first order lowpass
	// y[k] = a*y[k-1] + (1-a)*x[k]
	float a =  lowpass_thruster.a;
 800315a:	4b32      	ldr	r3, [pc, #200]	; (8003224 <horisontal_demping+0xd0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	607b      	str	r3, [r7, #4]
    sum_bidrag.hhf = (1-a) *sum_bidrag_forrige1.hhf +   a*sum_bidrag.hhf;
 8003160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003164:	edd7 7a01 	vldr	s15, [r7, #4]
 8003168:	ee37 7a67 	vsub.f32	s14, s14, s15
 800316c:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <horisontal_demping+0xd4>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <horisontal_demping+0xd8>)
 8003178:	edd3 6a00 	vldr	s13, [r3]
 800317c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003188:	4b28      	ldr	r3, [pc, #160]	; (800322c <horisontal_demping+0xd8>)
 800318a:	edc3 7a00 	vstr	s15, [r3]
    sum_bidrag.hhb = (1-a) *sum_bidrag_forrige1.hhb +   a*sum_bidrag.hhb ;
 800318e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003192:	edd7 7a01 	vldr	s15, [r7, #4]
 8003196:	ee37 7a67 	vsub.f32	s14, s14, s15
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <horisontal_demping+0xd4>)
 800319c:	edd3 7a01 	vldr	s15, [r3, #4]
 80031a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <horisontal_demping+0xd8>)
 80031a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80031aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <horisontal_demping+0xd8>)
 80031b8:	edc3 7a01 	vstr	s15, [r3, #4]
    sum_bidrag.hvf = (1-a) *sum_bidrag_forrige1.hvf +   a*sum_bidrag.hvf;
 80031bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80031c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <horisontal_demping+0xd4>)
 80031ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80031ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <horisontal_demping+0xd8>)
 80031d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80031d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <horisontal_demping+0xd8>)
 80031e6:	edc3 7a03 	vstr	s15, [r3, #12]
    sum_bidrag.hvb = (1-a) *sum_bidrag_forrige1.hvb +   a*sum_bidrag.hvb;
 80031ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80031f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <horisontal_demping+0xd4>)
 80031f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80031fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <horisontal_demping+0xd8>)
 8003202:	edd3 6a02 	vldr	s13, [r3, #8]
 8003206:	edd7 7a01 	vldr	s15, [r7, #4]
 800320a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800320e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <horisontal_demping+0xd8>)
 8003214:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	2000000c 	.word	0x2000000c
 8003228:	20000130 	.word	0x20000130
 800322c:	20000110 	.word	0x20000110

08003230 <vertikal_demping>:

void vertikal_demping(void){
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
	float a =  lowpass_thruster.a;
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <vertikal_demping+0xd0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	607b      	str	r3, [r7, #4]
    sum_bidrag.vhf = (1-a) *sum_bidrag_forrige1.vhf +   a*sum_bidrag.vhf;
 800323c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003240:	edd7 7a01 	vldr	s15, [r7, #4]
 8003244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003248:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <vertikal_demping+0xd4>)
 800324a:	edd3 7a04 	vldr	s15, [r3, #16]
 800324e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <vertikal_demping+0xd8>)
 8003254:	edd3 6a04 	vldr	s13, [r3, #16]
 8003258:	edd7 7a01 	vldr	s15, [r7, #4]
 800325c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	4b28      	ldr	r3, [pc, #160]	; (8003308 <vertikal_demping+0xd8>)
 8003266:	edc3 7a04 	vstr	s15, [r3, #16]
    sum_bidrag.vhb = (1-a) *sum_bidrag_forrige1.vhb +   a*sum_bidrag.vhb ;
 800326a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800326e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003272:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <vertikal_demping+0xd4>)
 8003278:	edd3 7a05 	vldr	s15, [r3, #20]
 800327c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <vertikal_demping+0xd8>)
 8003282:	edd3 6a05 	vldr	s13, [r3, #20]
 8003286:	edd7 7a01 	vldr	s15, [r7, #4]
 800328a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <vertikal_demping+0xd8>)
 8003294:	edc3 7a05 	vstr	s15, [r3, #20]
    sum_bidrag.vvf = (1-a) *sum_bidrag_forrige1.vvf +   a*sum_bidrag.vvf;
 8003298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800329c:	edd7 7a01 	vldr	s15, [r7, #4]
 80032a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <vertikal_demping+0xd4>)
 80032a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80032aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ae:	4b16      	ldr	r3, [pc, #88]	; (8003308 <vertikal_demping+0xd8>)
 80032b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80032b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <vertikal_demping+0xd8>)
 80032c2:	edc3 7a07 	vstr	s15, [r3, #28]
    sum_bidrag.vvb = (1-a) *sum_bidrag_forrige1.vvb +   a*sum_bidrag.vvb;
 80032c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <vertikal_demping+0xd4>)
 80032d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80032d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <vertikal_demping+0xd8>)
 80032de:	edd3 6a06 	vldr	s13, [r3, #24]
 80032e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <vertikal_demping+0xd8>)
 80032f0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	2000000c 	.word	0x2000000c
 8003304:	20000130 	.word	0x20000130
 8003308:	20000110 	.word	0x20000110

0800330c <differanse_sjekk>:

int differanse_sjekk(float var_forrige, float var_naa,float begrensing) {
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	ed87 0a03 	vstr	s0, [r7, #12]
 8003316:	edc7 0a02 	vstr	s1, [r7, #8]
 800331a:	ed87 1a01 	vstr	s2, [r7, #4]
    // dersom forskjellig fortegn sett til 0 slik at motor får være av til en runde
    if (((var_naa - var_forrige) >= begrensing) || ((var_forrige - var_naa) >= begrensing)) {
 800331e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003322:	edd7 7a03 	vldr	s15, [r7, #12]
 8003326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332a:	ed97 7a01 	vldr	s14, [r7, #4]
 800332e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	d90c      	bls.n	8003352 <differanse_sjekk+0x46>
 8003338:	ed97 7a03 	vldr	s14, [r7, #12]
 800333c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003344:	ed97 7a01 	vldr	s14, [r7, #4]
 8003348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	d801      	bhi.n	8003356 <differanse_sjekk+0x4a>
        return 1;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <differanse_sjekk+0x4c>
    }
    return 0;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <horisontal_differanse>:

int horisontal_differanse(void){
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
    if (differanse_sjekk(sum_bidrag_forrige1.hhf,sum_bidrag.hhf,BEGRENSING)){
 8003368:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <horisontal_differanse+0xbc>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <horisontal_differanse+0xc0>)
 8003370:	ed93 7a00 	vldr	s14, [r3]
 8003374:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <horisontal_differanse+0xc4>)
 8003376:	edd3 6a00 	vldr	s13, [r3]
 800337a:	eeb0 1a66 	vmov.f32	s2, s13
 800337e:	eef0 0a47 	vmov.f32	s1, s14
 8003382:	eeb0 0a67 	vmov.f32	s0, s15
 8003386:	f7ff ffc1 	bl	800330c <differanse_sjekk>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <horisontal_differanse+0x30>
        return 1;
 8003390:	2301      	movs	r3, #1
 8003392:	e042      	b.n	800341a <horisontal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.hhb,sum_bidrag.hhb,BEGRENSING)){
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <horisontal_differanse+0xbc>)
 8003396:	edd3 7a01 	vldr	s15, [r3, #4]
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <horisontal_differanse+0xc0>)
 800339c:	ed93 7a01 	vldr	s14, [r3, #4]
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <horisontal_differanse+0xc4>)
 80033a2:	edd3 6a00 	vldr	s13, [r3]
 80033a6:	eeb0 1a66 	vmov.f32	s2, s13
 80033aa:	eef0 0a47 	vmov.f32	s1, s14
 80033ae:	eeb0 0a67 	vmov.f32	s0, s15
 80033b2:	f7ff ffab 	bl	800330c <differanse_sjekk>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <horisontal_differanse+0x5c>
        return 1;
 80033bc:	2301      	movs	r3, #1
 80033be:	e02c      	b.n	800341a <horisontal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.hvf,sum_bidrag.hvf,BEGRENSING)){
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <horisontal_differanse+0xbc>)
 80033c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <horisontal_differanse+0xc0>)
 80033c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <horisontal_differanse+0xc4>)
 80033ce:	edd3 6a00 	vldr	s13, [r3]
 80033d2:	eeb0 1a66 	vmov.f32	s2, s13
 80033d6:	eef0 0a47 	vmov.f32	s1, s14
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	f7ff ff95 	bl	800330c <differanse_sjekk>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <horisontal_differanse+0x88>
        return 1;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e016      	b.n	800341a <horisontal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.hvb,sum_bidrag.hvb,BEGRENSING)){
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <horisontal_differanse+0xbc>)
 80033ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <horisontal_differanse+0xc0>)
 80033f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <horisontal_differanse+0xc4>)
 80033fa:	edd3 6a00 	vldr	s13, [r3]
 80033fe:	eeb0 1a66 	vmov.f32	s2, s13
 8003402:	eef0 0a47 	vmov.f32	s1, s14
 8003406:	eeb0 0a67 	vmov.f32	s0, s15
 800340a:	f7ff ff7f 	bl	800330c <differanse_sjekk>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <horisontal_differanse+0xb4>
        return 1;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <horisontal_differanse+0xb6>
    }
    return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000130 	.word	0x20000130
 8003424:	20000110 	.word	0x20000110
 8003428:	20000004 	.word	0x20000004

0800342c <vertikal_differanse>:

int vertikal_differanse(void){
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
    if (differanse_sjekk(sum_bidrag_forrige1.vhf,sum_bidrag.vhf,BEGRENSING)){
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <vertikal_differanse+0xbc>)
 8003432:	edd3 7a04 	vldr	s15, [r3, #16]
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <vertikal_differanse+0xc0>)
 8003438:	ed93 7a04 	vldr	s14, [r3, #16]
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <vertikal_differanse+0xc4>)
 800343e:	edd3 6a00 	vldr	s13, [r3]
 8003442:	eeb0 1a66 	vmov.f32	s2, s13
 8003446:	eef0 0a47 	vmov.f32	s1, s14
 800344a:	eeb0 0a67 	vmov.f32	s0, s15
 800344e:	f7ff ff5d 	bl	800330c <differanse_sjekk>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <vertikal_differanse+0x30>
        return 1;
 8003458:	2301      	movs	r3, #1
 800345a:	e042      	b.n	80034e2 <vertikal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.vhb,sum_bidrag.vhb,BEGRENSING)){
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <vertikal_differanse+0xbc>)
 800345e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <vertikal_differanse+0xc0>)
 8003464:	ed93 7a05 	vldr	s14, [r3, #20]
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <vertikal_differanse+0xc4>)
 800346a:	edd3 6a00 	vldr	s13, [r3]
 800346e:	eeb0 1a66 	vmov.f32	s2, s13
 8003472:	eef0 0a47 	vmov.f32	s1, s14
 8003476:	eeb0 0a67 	vmov.f32	s0, s15
 800347a:	f7ff ff47 	bl	800330c <differanse_sjekk>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <vertikal_differanse+0x5c>
        return 1;
 8003484:	2301      	movs	r3, #1
 8003486:	e02c      	b.n	80034e2 <vertikal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.vvf,sum_bidrag.vvf,BEGRENSING)){
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <vertikal_differanse+0xbc>)
 800348a:	edd3 7a07 	vldr	s15, [r3, #28]
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <vertikal_differanse+0xc0>)
 8003490:	ed93 7a07 	vldr	s14, [r3, #28]
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <vertikal_differanse+0xc4>)
 8003496:	edd3 6a00 	vldr	s13, [r3]
 800349a:	eeb0 1a66 	vmov.f32	s2, s13
 800349e:	eef0 0a47 	vmov.f32	s1, s14
 80034a2:	eeb0 0a67 	vmov.f32	s0, s15
 80034a6:	f7ff ff31 	bl	800330c <differanse_sjekk>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <vertikal_differanse+0x88>
        return 1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e016      	b.n	80034e2 <vertikal_differanse+0xb6>
    }
    if (differanse_sjekk(sum_bidrag_forrige1.vvb,sum_bidrag.vvb,BEGRENSING)){
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <vertikal_differanse+0xbc>)
 80034b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <vertikal_differanse+0xc0>)
 80034bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <vertikal_differanse+0xc4>)
 80034c2:	edd3 6a00 	vldr	s13, [r3]
 80034c6:	eeb0 1a66 	vmov.f32	s2, s13
 80034ca:	eef0 0a47 	vmov.f32	s1, s14
 80034ce:	eeb0 0a67 	vmov.f32	s0, s15
 80034d2:	f7ff ff1b 	bl	800330c <differanse_sjekk>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <vertikal_differanse+0xb4>
        return 1;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <vertikal_differanse+0xb6>
    }
    return 0;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000130 	.word	0x20000130
 80034ec:	20000110 	.word	0x20000110
 80034f0:	20000004 	.word	0x20000004

080034f4 <konverter_paadrag_PWM>:
// resultat her er at med mindre fullstendig 0, vil motorene for reguleringen være litt på
// -> burde pådrag her være over 1 eller under 1 for at skal regne på skalaen?



int16_t konverter_paadrag_PWM(float paadrag){
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	ed87 0a01 	vstr	s0, [r7, #4]
    if(paadrag>0) {return (int16_t) (neg_paa_PWM.a*(-paadrag) + neg_paa_PWM.b);}
 80034fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	dd13      	ble.n	8003534 <konverter_paadrag_PWM+0x40>
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <konverter_paadrag_PWM+0x88>)
 800350e:	ed93 7a00 	vldr	s14, [r3]
 8003512:	edd7 7a01 	vldr	s15, [r7, #4]
 8003516:	eef1 7a67 	vneg.f32	s15, s15
 800351a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <konverter_paadrag_PWM+0x88>)
 8003520:	edd3 7a01 	vldr	s15, [r3, #4]
 8003524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800352c:	ee17 3a90 	vmov	r3, s15
 8003530:	b21b      	sxth	r3, r3
 8003532:	e01c      	b.n	800356e <konverter_paadrag_PWM+0x7a>
    else if(paadrag<0) {return (int16_t) (pos_paa_PWM.a*(-paadrag) + pos_paa_PWM.b);}
 8003534:	edd7 7a01 	vldr	s15, [r7, #4]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d513      	bpl.n	800356a <konverter_paadrag_PWM+0x76>
 8003542:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <konverter_paadrag_PWM+0x8c>)
 8003544:	ed93 7a00 	vldr	s14, [r3]
 8003548:	edd7 7a01 	vldr	s15, [r7, #4]
 800354c:	eef1 7a67 	vneg.f32	s15, s15
 8003550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <konverter_paadrag_PWM+0x8c>)
 8003556:	edd3 7a01 	vldr	s15, [r3, #4]
 800355a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003562:	ee17 3a90 	vmov	r3, s15
 8003566:	b21b      	sxth	r3, r3
 8003568:	e001      	b.n	800356e <konverter_paadrag_PWM+0x7a>
    else {return (int16_t) 1500;}
 800356a:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2000002c 	.word	0x2000002c
 8003580:	20000024 	.word	0x20000024

08003584 <konverter_sum_bidrag_PWM>:
//        return (int16_t) 0;
//    }
//}


void konverter_sum_bidrag_PWM(void){
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
    sum_bidrag_PWM.hhf = konverter_paadrag_PWM(sum_bidrag.hhf);
 8003588:	4b2c      	ldr	r3, [pc, #176]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eeb0 0a67 	vmov.f32	s0, s15
 8003592:	f7ff ffaf 	bl	80034f4 <konverter_paadrag_PWM>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 800359c:	801a      	strh	r2, [r3, #0]
    sum_bidrag_PWM.hhb = konverter_paadrag_PWM(sum_bidrag.hhb);
 800359e:	4b27      	ldr	r3, [pc, #156]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 80035a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a4:	eeb0 0a67 	vmov.f32	s0, s15
 80035a8:	f7ff ffa4 	bl	80034f4 <konverter_paadrag_PWM>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b23      	ldr	r3, [pc, #140]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 80035b2:	805a      	strh	r2, [r3, #2]
    sum_bidrag_PWM.hvf = konverter_paadrag_PWM(sum_bidrag.hvf);
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 80035b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80035ba:	eeb0 0a67 	vmov.f32	s0, s15
 80035be:	f7ff ff99 	bl	80034f4 <konverter_paadrag_PWM>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 80035c8:	80da      	strh	r2, [r3, #6]
    sum_bidrag_PWM.hvb = konverter_paadrag_PWM(sum_bidrag.hvb);
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 80035cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80035d0:	eeb0 0a67 	vmov.f32	s0, s15
 80035d4:	f7ff ff8e 	bl	80034f4 <konverter_paadrag_PWM>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 80035de:	809a      	strh	r2, [r3, #4]
    //
    sum_bidrag_PWM.vhf = konverter_paadrag_PWM(sum_bidrag.vhf);
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 80035e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80035e6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ea:	f7ff ff83 	bl	80034f4 <konverter_paadrag_PWM>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 80035f4:	811a      	strh	r2, [r3, #8]
    sum_bidrag_PWM.vhb = konverter_paadrag_PWM(sum_bidrag.vhb);
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 80035f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80035fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003600:	f7ff ff78 	bl	80034f4 <konverter_paadrag_PWM>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 800360a:	815a      	strh	r2, [r3, #10]
    sum_bidrag_PWM.vvf = konverter_paadrag_PWM(sum_bidrag.vvf);
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 800360e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003612:	eeb0 0a67 	vmov.f32	s0, s15
 8003616:	f7ff ff6d 	bl	80034f4 <konverter_paadrag_PWM>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 8003620:	81da      	strh	r2, [r3, #14]
    sum_bidrag_PWM.vvb = konverter_paadrag_PWM(sum_bidrag.vvb);
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <konverter_sum_bidrag_PWM+0xb8>)
 8003624:	edd3 7a06 	vldr	s15, [r3, #24]
 8003628:	eeb0 0a67 	vmov.f32	s0, s15
 800362c:	f7ff ff62 	bl	80034f4 <konverter_paadrag_PWM>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <konverter_sum_bidrag_PWM+0xbc>)
 8003636:	819a      	strh	r2, [r3, #12]
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000110 	.word	0x20000110
 8003640:	200000bc 	.word	0x200000bc

08003644 <send_thruster_PWM>:

void send_thruster_PWM(void){
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
    //oppdater timer verdier
    //SJEKK AT RIKTIG MED TANKE PÅ HORISONTAL/VERTIKAL OG PLASSERING

    TIM2->CCR1 = sum_bidrag_PWM.hhf - 1;  		// HHF: T5-PWM-PA0-TIM2_CH1
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <send_thruster_PWM+0x78>)
 800364a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003654:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = sum_bidrag_PWM.hhb - 1;  		// HHB: T6-PWM-PA1-TIM2_CH2
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <send_thruster_PWM+0x78>)
 8003658:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
    TIM2->CCR3 = sum_bidrag_PWM.hvb - 1;  		// HVB: T7-PWM-PB10-TIM2_CH3
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <send_thruster_PWM+0x78>)
 8003666:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800366a:	1e5a      	subs	r2, r3, #1
 800366c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM2->CCR4 = sum_bidrag_PWM.hvf - 1;  		// HVF: T8-PWM-PB11-TIM2_CH4
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <send_thruster_PWM+0x78>)
 8003674:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
    TIM1->CCR1 = sum_bidrag_PWM.vhf - 1;  		// VHF: T1-PWM-PC0-TIM1_CH1
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <send_thruster_PWM+0x78>)
 8003682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003686:	1e5a      	subs	r2, r3, #1
 8003688:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <send_thruster_PWM+0x7c>)
 800368a:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2 = sum_bidrag_PWM.vhb - 1;  		// VHB: T2-PWM-PC1-TIM1_CH2
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <send_thruster_PWM+0x78>)
 800368e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003692:	1e5a      	subs	r2, r3, #1
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <send_thruster_PWM+0x7c>)
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3 = sum_bidrag_PWM.vvb - 1;  		// VVB: T3-PWM-PC2-TIM1_CH3
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <send_thruster_PWM+0x78>)
 800369a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <send_thruster_PWM+0x7c>)
 80036a2:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM1->CCR4 = sum_bidrag_PWM.vvf - 1;  		// VVF: T4-PWM-PC3-TIM1_CH4
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <send_thruster_PWM+0x78>)
 80036a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036aa:	1e5a      	subs	r2, r3, #1
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <send_thruster_PWM+0x7c>)
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	200000bc 	.word	0x200000bc
 80036c0:	40012c00 	.word	0x40012c00

080036c4 <thruster_data_lagring>:

// VVF SINGAL BEVEGER SEG IKKE

void thruster_data_lagring(void){
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
	// lagres for å bruke som referanse til regulering av hiv
	operator_referanse_int_forrige.hiv =  operator_referanse_int.hiv;
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <thruster_data_lagring+0x10c>)
 80036cc:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80036d0:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <thruster_data_lagring+0x110>)
 80036d2:	70da      	strb	r2, [r3, #3]

    // lagre samplen k-1 for som skal brukes til filtering
    sum_bidrag_forrige1.hhf = sum_bidrag.hhf;
 80036d4:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <thruster_data_lagring+0x114>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a40      	ldr	r2, [pc, #256]	; (80037dc <thruster_data_lagring+0x118>)
 80036da:	6013      	str	r3, [r2, #0]
    sum_bidrag_forrige1.hhb = sum_bidrag.hhb;
 80036dc:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <thruster_data_lagring+0x114>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a3e      	ldr	r2, [pc, #248]	; (80037dc <thruster_data_lagring+0x118>)
 80036e2:	6053      	str	r3, [r2, #4]
    sum_bidrag_forrige1.hvf = sum_bidrag.hvf;
 80036e4:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <thruster_data_lagring+0x114>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <thruster_data_lagring+0x118>)
 80036ea:	60d3      	str	r3, [r2, #12]
    sum_bidrag_forrige1.hvb = sum_bidrag.hvb;
 80036ec:	4b3a      	ldr	r3, [pc, #232]	; (80037d8 <thruster_data_lagring+0x114>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a3a      	ldr	r2, [pc, #232]	; (80037dc <thruster_data_lagring+0x118>)
 80036f2:	6093      	str	r3, [r2, #8]
    sum_bidrag_forrige1.vhf = sum_bidrag.vhf;
 80036f4:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <thruster_data_lagring+0x114>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4a38      	ldr	r2, [pc, #224]	; (80037dc <thruster_data_lagring+0x118>)
 80036fa:	6113      	str	r3, [r2, #16]
    sum_bidrag_forrige1.vhb = sum_bidrag.vhb;
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <thruster_data_lagring+0x114>)
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	4a36      	ldr	r2, [pc, #216]	; (80037dc <thruster_data_lagring+0x118>)
 8003702:	6153      	str	r3, [r2, #20]
    sum_bidrag_forrige1.vvf = sum_bidrag.vvf;
 8003704:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <thruster_data_lagring+0x114>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a34      	ldr	r2, [pc, #208]	; (80037dc <thruster_data_lagring+0x118>)
 800370a:	61d3      	str	r3, [r2, #28]
    sum_bidrag_forrige1.vvb = sum_bidrag.vvb;
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <thruster_data_lagring+0x114>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	4a32      	ldr	r2, [pc, #200]	; (80037dc <thruster_data_lagring+0x118>)
 8003712:	6193      	str	r3, [r2, #24]
    // på int8_t kan informasjon om hvilket pådrag som blir satt på motorene sendt opp igjen topside.
    sum_bidrag_int8.hhf = (int8_t) sum_bidrag.hhf;
 8003714:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <thruster_data_lagring+0x114>)
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800371e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003722:	793b      	ldrb	r3, [r7, #4]
 8003724:	b25a      	sxtb	r2, r3
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <thruster_data_lagring+0x11c>)
 8003728:	701a      	strb	r2, [r3, #0]
    sum_bidrag_int8.hhb = (int8_t) sum_bidrag.hhb;
 800372a:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <thruster_data_lagring+0x114>)
 800372c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003734:	edc7 7a01 	vstr	s15, [r7, #4]
 8003738:	793b      	ldrb	r3, [r7, #4]
 800373a:	b25a      	sxtb	r2, r3
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <thruster_data_lagring+0x11c>)
 800373e:	705a      	strb	r2, [r3, #1]
    sum_bidrag_int8.hvf = (int8_t) sum_bidrag.hvf;
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <thruster_data_lagring+0x114>)
 8003742:	edd3 7a03 	vldr	s15, [r3, #12]
 8003746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800374a:	edc7 7a01 	vstr	s15, [r7, #4]
 800374e:	793b      	ldrb	r3, [r7, #4]
 8003750:	b25a      	sxtb	r2, r3
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <thruster_data_lagring+0x11c>)
 8003754:	70da      	strb	r2, [r3, #3]
    sum_bidrag_int8.hvb = (int8_t) sum_bidrag.hvb;
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <thruster_data_lagring+0x114>)
 8003758:	edd3 7a02 	vldr	s15, [r3, #8]
 800375c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003760:	edc7 7a01 	vstr	s15, [r7, #4]
 8003764:	793b      	ldrb	r3, [r7, #4]
 8003766:	b25a      	sxtb	r2, r3
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <thruster_data_lagring+0x11c>)
 800376a:	709a      	strb	r2, [r3, #2]
    sum_bidrag_int8.vhf = (int8_t) sum_bidrag.vhf;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <thruster_data_lagring+0x114>)
 800376e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003776:	edc7 7a01 	vstr	s15, [r7, #4]
 800377a:	793b      	ldrb	r3, [r7, #4]
 800377c:	b25a      	sxtb	r2, r3
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <thruster_data_lagring+0x11c>)
 8003780:	711a      	strb	r2, [r3, #4]
    sum_bidrag_int8.vhb = (int8_t) sum_bidrag.vhb;
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <thruster_data_lagring+0x114>)
 8003784:	edd3 7a05 	vldr	s15, [r3, #20]
 8003788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800378c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003790:	793b      	ldrb	r3, [r7, #4]
 8003792:	b25a      	sxtb	r2, r3
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <thruster_data_lagring+0x11c>)
 8003796:	715a      	strb	r2, [r3, #5]
    sum_bidrag_int8.vvf = (int8_t) sum_bidrag.vvf;
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <thruster_data_lagring+0x114>)
 800379a:	edd3 7a07 	vldr	s15, [r3, #28]
 800379e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80037a6:	793b      	ldrb	r3, [r7, #4]
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <thruster_data_lagring+0x11c>)
 80037ac:	71da      	strb	r2, [r3, #7]
    sum_bidrag_int8.vvb = (int8_t) sum_bidrag.vvb;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <thruster_data_lagring+0x114>)
 80037b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80037b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80037bc:	793b      	ldrb	r3, [r7, #4]
 80037be:	b25a      	sxtb	r2, r3
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <thruster_data_lagring+0x11c>)
 80037c2:	719a      	strb	r2, [r3, #6]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	200000e0 	.word	0x200000e0
 80037d4:	200000e8 	.word	0x200000e8
 80037d8:	20000110 	.word	0x20000110
 80037dc:	20000130 	.word	0x20000130
 80037e0:	200000b4 	.word	0x200000b4

080037e4 <behandle_sum_bidrag>:


void behandle_sum_bidrag(void){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0

    // Sjekke om sum er større en maks som mulig i negativ retning på thrustere
	// skalere ned dersom mer negativ enn -100 (kan ikke levere mer en dette)
    if (sjekk_saturation_minus()){
 80037e8:	f7ff fbe0 	bl	8002fac <sjekk_saturation_minus>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <behandle_sum_bidrag+0x16>
        skalere_ned_saturation_neg(-100);
 80037f2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003838 <behandle_sum_bidrag+0x54>
 80037f6:	f7ff f9b7 	bl	8002b68 <skalere_ned_saturation_neg>
    }

    // Sjekke om sum er større en maks som mulig thrustere generelt
    if (sjekk_saturation_pos()){
 80037fa:	f7ff fc3d 	bl	8003078 <sjekk_saturation_pos>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <behandle_sum_bidrag+0x28>
        skalere_ned_saturation_pos(100);
 8003804:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800383c <behandle_sum_bidrag+0x58>
 8003808:	f7ff faa4 	bl	8002d54 <skalere_ned_saturation_pos>
    }

    /// må finne variabler slik at ikke blir hakkete
    // sjekker om såppass stor differanse at må filtrere for motorene sin del (horisontal)
    if (horisontal_differanse()){
 800380c:	f7ff fdaa 	bl	8003364 <horisontal_differanse>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <behandle_sum_bidrag+0x36>
        horisontal_demping();
 8003816:	f7ff fc9d 	bl	8003154 <horisontal_demping>
    }

    // sjekker om såppass stor differanse at må filtrere for motorene sin del (vertikal)
    if (vertikal_differanse()){
 800381a:	f7ff fe07 	bl	800342c <vertikal_differanse>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <behandle_sum_bidrag+0x44>
        vertikal_demping();
 8003824:	f7ff fd04 	bl	8003230 <vertikal_demping>
//    // sjekke om innenfor effektbegrensing
//    if (effekt_sjekk()){
//        effekt_begrensing();
//    }

    konverter_sum_bidrag_PWM();
 8003828:	f7ff feac 	bl	8003584 <konverter_sum_bidrag_PWM>

    send_thruster_PWM();
 800382c:	f7ff ff0a 	bl	8003644 <send_thruster_PWM>

    thruster_data_lagring();
 8003830:	f7ff ff48 	bl	80036c4 <thruster_data_lagring>

    // SKRIVE TIL 7 SEGMENT??
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	c2c80000 	.word	0xc2c80000
 800383c:	42c80000 	.word	0x42c80000

08003840 <oppstartCAN>:
/* USER CODE BEGIN 0 */


/* ----------------Funksjoner for CAN-Bus kommunikasjonsgruppe-----------*/

void oppstartCAN(FDCAN_HandleTypeDef *canPort) { // Konfigurerer CAN-bussen
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
// Configure filter for FDCAN1

			  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8003848:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <oppstartCAN+0x84>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
			  sFilterConfig.FilterIndex = 0;
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <oppstartCAN+0x84>)
 8003850:	2200      	movs	r2, #0
 8003852:	605a      	str	r2, [r3, #4]
			  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <oppstartCAN+0x84>)
 8003856:	2202      	movs	r2, #2
 8003858:	609a      	str	r2, [r3, #8]
			  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <oppstartCAN+0x84>)
 800385c:	2201      	movs	r2, #1
 800385e:	60da      	str	r2, [r3, #12]
			  sFilterConfig.FilterID1 = 0x20; // FilterID1 fra listen nedenfor settes her. Definerer filterID
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <oppstartCAN+0x84>)
 8003862:	2220      	movs	r2, #32
 8003864:	611a      	str	r2, [r3, #16]
			  sFilterConfig.FilterID2 = 0xE0; // FilterID2 fra listen nedenfor settes her. Definerer maskeID
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <oppstartCAN+0x84>)
 8003868:	22e0      	movs	r2, #224	; 0xe0
 800386a:	615a      	str	r2, [r3, #20]
			  // Kraftkort: FilterID1 = 0x60, FilterID2 = 0xE0 --> Slipper gjennom ideer mellom 96-127 (0x60 - 0x7F)
			  // Kommunikasjonskort: FilterID1 = 0x80, FilterID2 = 0xE0 --> Slipper gjennom ideer mellom 128-159 (0x80 - 0x9F)
			  // Sett inn rett ID-er for din gruppe

			  // Configure TX Header for FDCAN1
			TxHeader.Identifier = 0x00;
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <oppstartCAN+0x88>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
			TxHeader.IdType = FDCAN_STANDARD_ID;
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <oppstartCAN+0x88>)
 8003874:	2200      	movs	r2, #0
 8003876:	605a      	str	r2, [r3, #4]
			TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <oppstartCAN+0x88>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
			TxHeader.DataLength = FDCAN_DLC_BYTES_8; // Antall byte som sendes
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <oppstartCAN+0x88>)
 8003880:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003884:	60da      	str	r2, [r3, #12]
			TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <oppstartCAN+0x88>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
			TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <oppstartCAN+0x88>)
 800388e:	2200      	movs	r2, #0
 8003890:	615a      	str	r2, [r3, #20]
			TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Bruker CAN og ikke FDCAN
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <oppstartCAN+0x88>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
			TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <oppstartCAN+0x88>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
			TxHeader.MessageMarker = 0;
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <oppstartCAN+0x88>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]

			HAL_FDCAN_ConfigFilter(canPort, &sFilterConfig);
 80038a4:	4907      	ldr	r1, [pc, #28]	; (80038c4 <oppstartCAN+0x84>)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f001 ff46 	bl	8005738 <HAL_FDCAN_ConfigFilter>
			HAL_FDCAN_Start(canPort);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f001 ff9d 	bl	80057ec <HAL_FDCAN_Start>
			HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2101      	movs	r1, #1
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <oppstartCAN+0x8c>)
 80038b8:	f002 f8de 	bl	8005a78 <HAL_FDCAN_ActivateNotification>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000654 	.word	0x20000654
 80038c8:	2000066c 	.word	0x2000066c
 80038cc:	200002e8 	.word	0x200002e8

080038d0 <sendCAN>:

void sendCAN(uint16_t id, FDCAN_HandleTypeDef *canPort) { // For sending av melding på CAN-bussen
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	80fb      	strh	r3, [r7, #6]

	TxHeader.Identifier = id;
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <sendCAN+0x24>)
 80038e0:	6013      	str	r3, [r2, #0]
	HAL_FDCAN_AddMessageToTxFifoQ(canPort, &TxHeader, TxData);
 80038e2:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <sendCAN+0x28>)
 80038e4:	4903      	ldr	r1, [pc, #12]	; (80038f4 <sendCAN+0x24>)
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	f001 ffa8 	bl	800583c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000066c 	.word	0x2000066c
 80038f8:	200006b8 	.word	0x200006b8

080038fc <TX_kopier_thrustpaadrag>:
/* ---------------- Andre funksjoner for CAN-Bus, kopier og skriv til RxData og TxData -----------------------------*/



// funksjon for å sende thrustpaadrag til topside
void TX_kopier_thrustpaadrag(void){
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 8003902:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData,   &sum_bidrag_int8.hhf, 1); // Kopierer 1 byte, sum_bidrag_int8.hhf til første byte i TxData
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 800390a:	785a      	ldrb	r2, [r3, #1]
	memcpy(&TxData[1],&sum_bidrag_int8.hhb, 1); // Kopierer 1 byte, sum_bidrag_int8.hhb til andre byte i TxData
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 800390e:	705a      	strb	r2, [r3, #1]
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 8003912:	789a      	ldrb	r2, [r3, #2]
	memcpy(&TxData[2],&sum_bidrag_int8.hvb, 1); // ..
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 8003916:	709a      	strb	r2, [r3, #2]
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 800391a:	78da      	ldrb	r2, [r3, #3]
	memcpy(&TxData[3],&sum_bidrag_int8.hvf, 1);
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 800391e:	70da      	strb	r2, [r3, #3]
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 8003922:	791a      	ldrb	r2, [r3, #4]
	memcpy(&TxData[4],&sum_bidrag_int8.vhf, 1);
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 8003926:	711a      	strb	r2, [r3, #4]
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 800392a:	795a      	ldrb	r2, [r3, #5]
	memcpy(&TxData[5],&sum_bidrag_int8.vhb, 1);
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 800392e:	715a      	strb	r2, [r3, #5]
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 8003932:	799a      	ldrb	r2, [r3, #6]
	memcpy(&TxData[6],&sum_bidrag_int8.vvb, 1);
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 8003936:	719a      	strb	r2, [r3, #6]
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <TX_kopier_thrustpaadrag+0x50>)
 800393a:	79da      	ldrb	r2, [r3, #7]
	memcpy(&TxData[7],&sum_bidrag_int8.vvf, 1);
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <TX_kopier_thrustpaadrag+0x54>)
 800393e:	71da      	strb	r2, [r3, #7]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	200000b4 	.word	0x200000b4
 8003950:	200006b8 	.word	0x200006b8

08003954 <liten_sjekk_7>:

void liten_sjekk_7(void){
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <liten_sjekk_7+0x50>)
 800395a:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData,   &FELICESPERDIDOS, 1); // Kopierer 1 byte, sum_bidrag_int8.hhf til første byte i TxData
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <liten_sjekk_7+0x54>)
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <liten_sjekk_7+0x50>)
 8003962:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[1],&FELICESPERDIDOS, 1); // Kopierer 1 byte, sum_bidrag_int8.hhb til andre byte i TxData
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <liten_sjekk_7+0x54>)
 8003966:	705a      	strb	r2, [r3, #1]
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <liten_sjekk_7+0x50>)
 800396a:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[2],&FELICESPERDIDOS, 1); // ..
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <liten_sjekk_7+0x54>)
 800396e:	709a      	strb	r2, [r3, #2]
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <liten_sjekk_7+0x50>)
 8003972:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[3],&FELICESPERDIDOS, 1);
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <liten_sjekk_7+0x54>)
 8003976:	70da      	strb	r2, [r3, #3]
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <liten_sjekk_7+0x50>)
 800397a:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[4],&FELICESPERDIDOS, 1);
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <liten_sjekk_7+0x54>)
 800397e:	711a      	strb	r2, [r3, #4]
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <liten_sjekk_7+0x50>)
 8003982:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[5],&FELICESPERDIDOS, 1);
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <liten_sjekk_7+0x54>)
 8003986:	715a      	strb	r2, [r3, #5]
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <liten_sjekk_7+0x50>)
 800398a:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[6],&FELICESPERDIDOS, 1);
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <liten_sjekk_7+0x54>)
 800398e:	719a      	strb	r2, [r3, #6]
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <liten_sjekk_7+0x50>)
 8003992:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[7],&FELICESPERDIDOS, 1);
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <liten_sjekk_7+0x54>)
 8003996:	71da      	strb	r2, [r3, #7]
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000
 80039a8:	200006b8 	.word	0x200006b8

080039ac <liten_sjekk_A>:

void liten_sjekk_A(void){
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <liten_sjekk_A+0x48>)
 80039b2:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData,   &FELICESPERDIDOS, 1); // Kopierer 1 byte, sum_bidrag_int8.hhf til første byte i TxData
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <liten_sjekk_A+0x4c>)
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <liten_sjekk_A+0x48>)
 80039ba:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[1],&FELICESPERDIDOS, 1);
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <liten_sjekk_A+0x4c>)
 80039be:	705a      	strb	r2, [r3, #1]
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <liten_sjekk_A+0x50>)
 80039c2:	881a      	ldrh	r2, [r3, #0]
	memcpy(&TxData[2],&HIVREF, 2);
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <liten_sjekk_A+0x4c>)
 80039c6:	805a      	strh	r2, [r3, #2]
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <liten_sjekk_A+0x48>)
 80039ca:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[4],&FELICESPERDIDOS, 1); // ..
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <liten_sjekk_A+0x4c>)
 80039ce:	711a      	strb	r2, [r3, #4]
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <liten_sjekk_A+0x54>)
 80039d2:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[5],&HIVREF10, 1); // ..
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <liten_sjekk_A+0x4c>)
 80039d6:	715a      	strb	r2, [r3, #5]
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <liten_sjekk_A+0x48>)
 80039da:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[6],&FELICESPERDIDOS, 1);
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <liten_sjekk_A+0x4c>)
 80039de:	719a      	strb	r2, [r3, #6]
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <liten_sjekk_A+0x58>)
 80039e2:	781a      	ldrb	r2, [r3, #0]
	memcpy(&TxData[7],&HIVREFm, 1);
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <liten_sjekk_A+0x4c>)
 80039e6:	71da      	strb	r2, [r3, #7]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000000 	.word	0x20000000
 80039f8:	200006b8 	.word	0x200006b8
 80039fc:	200000a4 	.word	0x200000a4
 8003a00:	200000a6 	.word	0x200000a6
 8003a04:	200000a7 	.word	0x200000a7

08003a08 <liten_sjekk_ref>:
//memcpy(&operator_referanse_int.jag, &RxData, 1);  // B0
//memcpy(&operator_referanse_int.svai,&RxData[1], 1); // B1
//memcpy(&operator_referanse_int.hiv, &RxData[2], 1); // B2
//memcpy(&operator_referanse_int.gir, &RxData[3], 1); // B3

void liten_sjekk_ref(void){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
	HIVREF = (uint16_t) PID_hiv.Ref*100;
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <liten_sjekk_ref+0x84>)
 8003a10:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a18:	ee17 3a90 	vmov	r3, s15
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	0092      	lsls	r2, r2, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	0091      	lsls	r1, r2, #2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <liten_sjekk_ref+0x88>)
 8003a34:	801a      	strh	r2, [r3, #0]
	HIVREF10 = (uint8_t) PID_hiv.Ref*10;
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <liten_sjekk_ref+0x84>)
 8003a38:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a40:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a44:	793b      	ldrb	r3, [r7, #4]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <liten_sjekk_ref+0x8c>)
 8003a54:	701a      	strb	r2, [r3, #0]
	HIVREFm = (uint8_t) PID_hiv.Ref;
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <liten_sjekk_ref+0x84>)
 8003a58:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a60:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a64:	793b      	ldrb	r3, [r7, #4]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <liten_sjekk_ref+0x90>)
 8003a6a:	701a      	strb	r2, [r3, #0]
	liten_sjekk_7();
 8003a6c:	f7ff ff72 	bl	8003954 <liten_sjekk_7>
	// ingen databehandling på id
	sendCAN(129, &hfdcan1);
 8003a70:	490a      	ldr	r1, [pc, #40]	; (8003a9c <liten_sjekk_ref+0x94>)
 8003a72:	2081      	movs	r0, #129	; 0x81
 8003a74:	f7ff ff2c 	bl	80038d0 <sendCAN>
	liten_sjekk_A();
 8003a78:	f7ff ff98 	bl	80039ac <liten_sjekk_A>
	sendCAN(129, &hfdcan1);
 8003a7c:	4907      	ldr	r1, [pc, #28]	; (8003a9c <liten_sjekk_ref+0x94>)
 8003a7e:	2081      	movs	r0, #129	; 0x81
 8003a80:	f7ff ff26 	bl	80038d0 <sendCAN>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200001e8 	.word	0x200001e8
 8003a90:	200000a4 	.word	0x200000a4
 8003a94:	200000a6 	.word	0x200000a6
 8003a98:	200000a7 	.word	0x200000a7
 8003a9c:	200002e8 	.word	0x200002e8

08003aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aa6:	f001 fb4a 	bl	800513e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aaa:	f000 f907 	bl	8003cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aae:	f000 fd81 	bl	80045b4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8003ab2:	f000 f9d5 	bl	8003e60 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 8003ab6:	f000 f94d 	bl	8003d54 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8003aba:	f000 fb11 	bl	80040e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003abe:	f000 fa57 	bl	8003f70 <MX_TIM1_Init>
  MX_TIM16_Init();
 8003ac2:	f000 fcfd 	bl	80044c0 <MX_TIM16_Init>
  MX_TIM15_Init();
 8003ac6:	f000 fc75 	bl	80043b4 <MX_TIM15_Init>
  MX_TIM8_Init();
 8003aca:	f000 fbdf 	bl	800428c <MX_TIM8_Init>
  MX_I2C3_Init();
 8003ace:	f000 f987 	bl	8003de0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003ad2:	f000 fa0f 	bl	8003ef4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8003ad6:	f000 fb7f 	bl	80041d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  /* Starter CAN-buseen */

  oppstartCAN(&hfdcan1);
 8003ada:	4863      	ldr	r0, [pc, #396]	; (8003c68 <main+0x1c8>)
 8003adc:	f7ff feb0 	bl	8003840 <oppstartCAN>


  /* NB! starte timere */

  // TIMERE FOR THRUSTER
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4862      	ldr	r0, [pc, #392]	; (8003c6c <main+0x1cc>)
 8003ae4:	f004 fbea 	bl	80082bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003ae8:	2104      	movs	r1, #4
 8003aea:	4860      	ldr	r0, [pc, #384]	; (8003c6c <main+0x1cc>)
 8003aec:	f004 fbe6 	bl	80082bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003af0:	2108      	movs	r1, #8
 8003af2:	485e      	ldr	r0, [pc, #376]	; (8003c6c <main+0x1cc>)
 8003af4:	f004 fbe2 	bl	80082bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003af8:	210c      	movs	r1, #12
 8003afa:	485c      	ldr	r0, [pc, #368]	; (8003c6c <main+0x1cc>)
 8003afc:	f004 fbde 	bl	80082bc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003b00:	2100      	movs	r1, #0
 8003b02:	485b      	ldr	r0, [pc, #364]	; (8003c70 <main+0x1d0>)
 8003b04:	f004 fbda 	bl	80082bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003b08:	2104      	movs	r1, #4
 8003b0a:	4859      	ldr	r0, [pc, #356]	; (8003c70 <main+0x1d0>)
 8003b0c:	f004 fbd6 	bl	80082bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003b10:	2108      	movs	r1, #8
 8003b12:	4857      	ldr	r0, [pc, #348]	; (8003c70 <main+0x1d0>)
 8003b14:	f004 fbd2 	bl	80082bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003b18:	210c      	movs	r1, #12
 8003b1a:	4855      	ldr	r0, [pc, #340]	; (8003c70 <main+0x1d0>)
 8003b1c:	f004 fbce 	bl	80082bc <HAL_TIM_PWM_Start>
  // TIMEREI  FOR MANIUPLATOR

  //ENDRE_FREKVENS = 0XFF;

  //  PA4 GRIP
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003b20:	2104      	movs	r1, #4
 8003b22:	4854      	ldr	r0, [pc, #336]	; (8003c74 <main+0x1d4>)
 8003b24:	f004 fbca 	bl	80082bc <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);


  // PC6 SNURR --> BØRSTELØSE
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4853      	ldr	r0, [pc, #332]	; (8003c78 <main+0x1d8>)
 8003b2c:	f004 fbc6 	bl	80082bc <HAL_TIM_PWM_Start>
  // må være delay slik at boot sekvensen rekker å kjøres
  HAL_Delay(5000);
 8003b30:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b34:	f001 fb74 	bl	8005220 <HAL_Delay>

  // PB14 SVING
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4850      	ldr	r0, [pc, #320]	; (8003c7c <main+0x1dc>)
 8003b3c:	f004 fbbe 	bl	80082bc <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

  // PB4 SKYV
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8003b40:	2100      	movs	r1, #0
 8003b42:	484f      	ldr	r0, [pc, #316]	; (8003c80 <main+0x1e0>)
 8003b44:	f004 fbba 	bl	80082bc <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003b48:	2201      	movs	r2, #1
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	484d      	ldr	r0, [pc, #308]	; (8003c84 <main+0x1e4>)
 8003b4e:	f002 fc6f 	bl	8006430 <HAL_GPIO_WritePin>

  //init av temp sens
  STTS75 temp_sensor = {0};
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	2220      	movs	r2, #32
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f006 f896 	bl	8009c8c <memset>

  STTS75_Init(&temp_sensor, &hi2c3, STTS75_9BIT);
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	2200      	movs	r2, #0
 8003b66:	4948      	ldr	r1, [pc, #288]	; (8003c88 <main+0x1e8>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd f91d 	bl	8000da8 <STTS75_Init>

  //REG_AKTIVER = 0;
  // init av reguleringsvariabler
  hiv_regulering_init();
 8003b6e:	f7fd ff6f 	bl	8001a50 <hiv_regulering_init>
  stamp_regulering_init();
 8003b72:	f7fe f805 	bl	8001b80 <stamp_regulering_init>
  rull_regulering_init();
 8003b76:	f7fd ffb7 	bl	8001ae8 <rull_regulering_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//////// LESING OG SENDING TEMPERATUR SENSOR
	if(LES_SEND_TEMP){
 8003b7a:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <main+0x1ec>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02f      	beq.n	8003be2 <main+0x142>
		LES_SEND_TEMP = 0;
 8003b82:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <main+0x1ec>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
		// leser to temperatursensorer, reg og driver og lagrer i structen STTS75
		STTS75_Read_Temp(&temp_sensor);
 8003b88:	f107 0308 	add.w	r3, r7, #8
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd f93d 	bl	8000e0c <STTS75_Read_Temp>
 8003b92:	8b3a      	ldrh	r2, [r7, #24]

	  	// kopierer temp_16bit_reg, og temp_16bit_driv til Txdata
		memcpy(&TxData,&temp_sensor.temp_16bit_reg, 2);
 8003b94:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <main+0x1f0>)
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	8b7a      	ldrh	r2, [r7, #26]
		memcpy(&TxData[2],&temp_sensor.temp_16bit_driv, 2);
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <main+0x1f0>)
 8003b9c:	805a      	strh	r2, [r3, #2]
		// sende settpunkt til topside
		int16_t settpunkt = (int16_t) (PID_hiv.Ref*1000.0);
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <main+0x1f4>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fc fc9c 	bl	80004e0 <__aeabi_f2d>
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	4b3a      	ldr	r3, [pc, #232]	; (8003c98 <main+0x1f8>)
 8003bae:	f7fc fcef 	bl	8000590 <__aeabi_dmul>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f7fc fefb 	bl	80009b4 <__aeabi_d2iz>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	80fb      	strh	r3, [r7, #6]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
		memcpy(&TxData[4],&settpunkt, 2);
 8003bc6:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <main+0x1f0>)
 8003bc8:	809a      	strh	r2, [r3, #4]
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <main+0x1fc>)
 8003bcc:	781a      	ldrb	r2, [r3, #0]
		// sende om regulering er aktivert til topside
		memcpy(&TxData[6],&REG_AKTIVER, 1);
 8003bce:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <main+0x1f0>)
 8003bd0:	719a      	strb	r2, [r3, #6]
 8003bd2:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <main+0x200>)
 8003bd4:	781a      	ldrb	r2, [r3, #0]
		memcpy(&TxData[7],&REG_AKTIVER_DYBDE, 1);
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <main+0x1f0>)
 8003bd8:	71da      	strb	r2, [r3, #7]

	  // sender over CAN med id 130
		sendCAN(130,&hfdcan1);
 8003bda:	4923      	ldr	r1, [pc, #140]	; (8003c68 <main+0x1c8>)
 8003bdc:	2082      	movs	r0, #130	; 0x82
 8003bde:	f7ff fe77 	bl	80038d0 <sendCAN>
	}

	/////////// SENDING AV CAN MELDING

	 //// ID 129 thrustpaadrag
	 if (THRUST_TOPSIDE){
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <main+0x204>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <main+0x15c>
		THRUST_TOPSIDE = 0;
 8003bea:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <main+0x204>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]

		TX_kopier_thrustpaadrag();
 8003bf0:	f7ff fe84 	bl	80038fc <TX_kopier_thrustpaadrag>
		// sender over CAN med id 129
		sendCAN(129, &hfdcan1);
 8003bf4:	491c      	ldr	r1, [pc, #112]	; (8003c68 <main+0x1c8>)
 8003bf6:	2081      	movs	r0, #129	; 0x81
 8003bf8:	f7ff fe6a 	bl	80038d0 <sendCAN>
	/////////// STYRING OG REGULERING

	static uint8_t condition_evaluated = 0;
	
	/// KODE FOR BARE STYRING UTEN REGULERING
	if (SUM_BIDRAG_STYRING){
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <main+0x208>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <main+0x176>
		SUM_BIDRAG_STYRING = 0;
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <main+0x208>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
		//// all regulering deaktivert, må sette alle reguleringsbidrag til 0.
		 /// sum_bidrag vil da være lik operatorbidrag 
		null_bidrag_alle_regvar();
 8003c0a:	f7fe fd97 	bl	800273c <null_bidrag_alle_regvar>
		/////
		condition_evaluated = 1;
 8003c0e:	4b27      	ldr	r3, [pc, #156]	; (8003cac <main+0x20c>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e00b      	b.n	8003c2e <main+0x18e>
	}

/////// KODE FOR STYRING MED REGULERING

	else if (SUM_BIDRAG_INKL_REG){
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <main+0x210>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <main+0x18e>
		SUM_BIDRAG_INKL_REG = 0;
 8003c1e:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <main+0x210>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]

		beregn_reguleringbidrag();
 8003c24:	f7fe f900 	bl	8001e28 <beregn_reguleringbidrag>

		//////
		condition_evaluated = 1;
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <main+0x20c>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]

	}

	// FELLES FOR BEGGE TILFELLER
	/// operasjoner som blir utført i begge tilfellene 
	if (condition_evaluated){
 8003c2e:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <main+0x20c>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <main+0x1ba>
		condition_evaluated = 0;
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <main+0x20c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]

		beregning_operatorbidrag();
 8003c3c:	f7fe fd9a 	bl	8002774 <beregning_operatorbidrag>

//		if (PID_rull.Ki == 17){
//			liten_sjekk_styr();
//		}

		if (LITEN_SJEKK){
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <main+0x214>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <main+0x1b2>
			liten_sjekk_ref();
 8003c48:	f7ff fede 	bl	8003a08 <liten_sjekk_ref>
			LITEN_SJEKK = 0;
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <main+0x214>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
		}

		beregn_sum_bidrag();
 8003c52:	f7fe fecf 	bl	80029f4 <beregn_sum_bidrag>
		behandle_sum_bidrag();
 8003c56:	f7ff fdc5 	bl	80037e4 <behandle_sum_bidrag>
	}
		
	// KODE FOR MANIPULATOR
	if (MOTTATT_MANIPULATOR){
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <main+0x218>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d08b      	beq.n	8003b7a <main+0xda>
		behandle_manipulator();
 8003c62:	f7fd fda7 	bl	80017b4 <behandle_manipulator>
  {
 8003c66:	e788      	b.n	8003b7a <main+0xda>
 8003c68:	200002e8 	.word	0x200002e8
 8003c6c:	2000048c 	.word	0x2000048c
 8003c70:	200004d8 	.word	0x200004d8
 8003c74:	20000524 	.word	0x20000524
 8003c78:	20000570 	.word	0x20000570
 8003c7c:	200005bc 	.word	0x200005bc
 8003c80:	20000608 	.word	0x20000608
 8003c84:	48000c00 	.word	0x48000c00
 8003c88:	2000034c 	.word	0x2000034c
 8003c8c:	200000b2 	.word	0x200000b2
 8003c90:	200006b8 	.word	0x200006b8
 8003c94:	200001e8 	.word	0x200001e8
 8003c98:	408f4000 	.word	0x408f4000
 8003c9c:	200000aa 	.word	0x200000aa
 8003ca0:	200000a9 	.word	0x200000a9
 8003ca4:	200000b1 	.word	0x200000b1
 8003ca8:	200000af 	.word	0x200000af
 8003cac:	200006c8 	.word	0x200006c8
 8003cb0:	200000b0 	.word	0x200000b0
 8003cb4:	200000a8 	.word	0x200000a8
 8003cb8:	200000ad 	.word	0x200000ad

08003cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b094      	sub	sp, #80	; 0x50
 8003cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cc2:	f107 0318 	add.w	r3, r7, #24
 8003cc6:	2238      	movs	r2, #56	; 0x38
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f005 ffde 	bl	8009c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f003 f9ba 	bl	8007058 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cee:	2340      	movs	r3, #64	; 0x40
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003cfe:	2355      	movs	r3, #85	; 0x55
 8003d00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d02:	2302      	movs	r3, #2
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003d06:	2302      	movs	r3, #2
 8003d08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d0e:	f107 0318 	add.w	r3, r7, #24
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 fa54 	bl	80071c0 <HAL_RCC_OscConfig>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003d1e:	f000 fdd7 	bl	80048d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d22:	230f      	movs	r3, #15
 8003d24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d26:	2303      	movs	r3, #3
 8003d28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	2104      	movs	r1, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f003 fd58 	bl	80077f0 <HAL_RCC_ClockConfig>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003d46:	f000 fdc3 	bl	80048d0 <Error_Handler>
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3750      	adds	r7, #80	; 0x50
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d5a:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <MX_FDCAN1_Init+0x88>)
 8003d5c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003d64:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d84:	2214      	movs	r2, #20
 8003d86:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d90:	220e      	movs	r2, #14
 8003d92:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d96:	2202      	movs	r2, #2
 8003d98:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003d9c:	2214      	movs	r2, #20
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003da8:	220e      	movs	r2, #14
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003dae:	2202      	movs	r2, #2
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003dc4:	4804      	ldr	r0, [pc, #16]	; (8003dd8 <MX_FDCAN1_Init+0x84>)
 8003dc6:	f001 fb5d 	bl	8005484 <HAL_FDCAN_Init>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003dd0:	f000 fd7e 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	200002e8 	.word	0x200002e8
 8003ddc:	40006400 	.word	0x40006400

08003de0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <MX_I2C3_Init+0x78>)
 8003de8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <MX_I2C3_Init+0x7c>)
 8003dee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003df0:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003df6:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dfc:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003e1a:	480e      	ldr	r0, [pc, #56]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003e1c:	f002 fb20 	bl	8006460 <HAL_I2C_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003e26:	f000 fd53 	bl	80048d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4809      	ldr	r0, [pc, #36]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003e2e:	f003 f87b 	bl	8006f28 <HAL_I2CEx_ConfigAnalogFilter>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003e38:	f000 fd4a 	bl	80048d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4805      	ldr	r0, [pc, #20]	; (8003e54 <MX_I2C3_Init+0x74>)
 8003e40:	f003 f8bd 	bl	8006fbe <HAL_I2CEx_ConfigDigitalFilter>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003e4a:	f000 fd41 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	2000034c 	.word	0x2000034c
 8003e58:	40007800 	.word	0x40007800
 8003e5c:	30a0a7fb 	.word	0x30a0a7fb

08003e60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003e64:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e66:	4a21      	ldr	r2, [pc, #132]	; (8003eec <MX_LPUART1_UART_Init+0x8c>)
 8003e68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e6c:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <MX_LPUART1_UART_Init+0x90>)
 8003e6e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003e82:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e84:	220c      	movs	r2, #12
 8003e86:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003ea0:	4811      	ldr	r0, [pc, #68]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003ea2:	f005 f8ed 	bl	8009080 <HAL_UART_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8003eac:	f000 fd10 	bl	80048d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003eb4:	f005 fdee 	bl	8009a94 <HAL_UARTEx_SetTxFifoThreshold>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8003ebe:	f000 fd07 	bl	80048d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4808      	ldr	r0, [pc, #32]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003ec6:	f005 fe23 	bl	8009b10 <HAL_UARTEx_SetRxFifoThreshold>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8003ed0:	f000 fcfe 	bl	80048d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003ed4:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <MX_LPUART1_UART_Init+0x88>)
 8003ed6:	f005 fda4 	bl	8009a22 <HAL_UARTEx_DisableFifoMode>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8003ee0:	f000 fcf6 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003ee4:	bf00      	nop
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000398 	.word	0x20000398
 8003eec:	40008000 	.word	0x40008000
 8003ef0:	00033324 	.word	0x00033324

08003ef4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003efa:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <MX_SPI1_Init+0x78>)
 8003efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f0c:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003f28:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f42:	2207      	movs	r2, #7
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f4e:	2208      	movs	r2, #8
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <MX_SPI1_Init+0x74>)
 8003f54:	f004 f858 	bl	8008008 <HAL_SPI_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f5e:	f000 fcb7 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000428 	.word	0x20000428
 8003f6c:	40013000 	.word	0x40013000

08003f70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b098      	sub	sp, #96	; 0x60
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	615a      	str	r2, [r3, #20]
 8003f94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	2234      	movs	r2, #52	; 0x34
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f005 fe75 	bl	8009c8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003fa4:	4a4d      	ldr	r2, [pc, #308]	; (80040dc <MX_TIM1_Init+0x16c>)
 8003fa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8003fa8:	4b4b      	ldr	r3, [pc, #300]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003faa:	22a9      	movs	r2, #169	; 0xa9
 8003fac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fae:	4b4a      	ldr	r3, [pc, #296]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8003fb4:	4b48      	ldr	r3, [pc, #288]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003fb6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003fba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fbc:	4b46      	ldr	r3, [pc, #280]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fc2:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fc8:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fce:	4842      	ldr	r0, [pc, #264]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003fd0:	f004 f91c 	bl	800820c <HAL_TIM_PWM_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003fda:	f000 fc79 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4839      	ldr	r0, [pc, #228]	; (80040d8 <MX_TIM1_Init+0x168>)
 8003ff2:	f004 ff23 	bl	8008e3c <HAL_TIMEx_MasterConfigSynchronization>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003ffc:	f000 fc68 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004000:	2360      	movs	r3, #96	; 0x60
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1499;
 8004004:	f240 53db 	movw	r3, #1499	; 0x5db
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800400a:	2300      	movs	r3, #0
 800400c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800400e:	2300      	movs	r3, #0
 8004010:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004012:	2300      	movs	r3, #0
 8004014:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800401e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004022:	2200      	movs	r2, #0
 8004024:	4619      	mov	r1, r3
 8004026:	482c      	ldr	r0, [pc, #176]	; (80040d8 <MX_TIM1_Init+0x168>)
 8004028:	f004 fa48 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004032:	f000 fc4d 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800403a:	2204      	movs	r2, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4826      	ldr	r0, [pc, #152]	; (80040d8 <MX_TIM1_Init+0x168>)
 8004040:	f004 fa3c 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800404a:	f000 fc41 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800404e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004052:	2208      	movs	r2, #8
 8004054:	4619      	mov	r1, r3
 8004056:	4820      	ldr	r0, [pc, #128]	; (80040d8 <MX_TIM1_Init+0x168>)
 8004058:	f004 fa30 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004062:	f000 fc35 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004066:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800406a:	220c      	movs	r2, #12
 800406c:	4619      	mov	r1, r3
 800406e:	481a      	ldr	r0, [pc, #104]	; (80040d8 <MX_TIM1_Init+0x168>)
 8004070:	f004 fa24 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800407a:	f000 fc29 	bl	80048d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004096:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800409c:	2300      	movs	r3, #0
 800409e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80040a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80040ae:	2300      	movs	r3, #0
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4807      	ldr	r0, [pc, #28]	; (80040d8 <MX_TIM1_Init+0x168>)
 80040bc:	f004 ff40 	bl	8008f40 <HAL_TIMEx_ConfigBreakDeadTime>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80040c6:	f000 fc03 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040ca:	4803      	ldr	r0, [pc, #12]	; (80040d8 <MX_TIM1_Init+0x168>)
 80040cc:	f000 fe0e 	bl	8004cec <HAL_TIM_MspPostInit>

}
 80040d0:	bf00      	nop
 80040d2:	3760      	adds	r7, #96	; 0x60
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	2000048c 	.word	0x2000048c
 80040dc:	40012c00 	.word	0x40012c00

080040e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040f2:	463b      	mov	r3, r7
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
 8004100:	615a      	str	r2, [r3, #20]
 8004102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004104:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <MX_TIM2_Init+0xf4>)
 8004106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800410a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800410c:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <MX_TIM2_Init+0xf4>)
 800410e:	22a9      	movs	r2, #169	; 0xa9
 8004110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004112:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <MX_TIM2_Init+0xf4>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8004118:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <MX_TIM2_Init+0xf4>)
 800411a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800411e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004120:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <MX_TIM2_Init+0xf4>)
 8004122:	2200      	movs	r2, #0
 8004124:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004126:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <MX_TIM2_Init+0xf4>)
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800412c:	4829      	ldr	r0, [pc, #164]	; (80041d4 <MX_TIM2_Init+0xf4>)
 800412e:	f004 f86d 	bl	800820c <HAL_TIM_PWM_Init>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004138:	f000 fbca 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004144:	f107 031c 	add.w	r3, r7, #28
 8004148:	4619      	mov	r1, r3
 800414a:	4822      	ldr	r0, [pc, #136]	; (80041d4 <MX_TIM2_Init+0xf4>)
 800414c:	f004 fe76 	bl	8008e3c <HAL_TIMEx_MasterConfigSynchronization>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004156:	f000 fbbb 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800415a:	2360      	movs	r3, #96	; 0x60
 800415c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1499;
 800415e:	f240 53db 	movw	r3, #1499	; 0x5db
 8004162:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800416c:	463b      	mov	r3, r7
 800416e:	2200      	movs	r2, #0
 8004170:	4619      	mov	r1, r3
 8004172:	4818      	ldr	r0, [pc, #96]	; (80041d4 <MX_TIM2_Init+0xf4>)
 8004174:	f004 f9a2 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800417e:	f000 fba7 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004182:	463b      	mov	r3, r7
 8004184:	2204      	movs	r2, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4812      	ldr	r0, [pc, #72]	; (80041d4 <MX_TIM2_Init+0xf4>)
 800418a:	f004 f997 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8004194:	f000 fb9c 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004198:	463b      	mov	r3, r7
 800419a:	2208      	movs	r2, #8
 800419c:	4619      	mov	r1, r3
 800419e:	480d      	ldr	r0, [pc, #52]	; (80041d4 <MX_TIM2_Init+0xf4>)
 80041a0:	f004 f98c 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80041aa:	f000 fb91 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041ae:	463b      	mov	r3, r7
 80041b0:	220c      	movs	r2, #12
 80041b2:	4619      	mov	r1, r3
 80041b4:	4807      	ldr	r0, [pc, #28]	; (80041d4 <MX_TIM2_Init+0xf4>)
 80041b6:	f004 f981 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80041c0:	f000 fb86 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80041c4:	4803      	ldr	r0, [pc, #12]	; (80041d4 <MX_TIM2_Init+0xf4>)
 80041c6:	f000 fd91 	bl	8004cec <HAL_TIM_MspPostInit>

}
 80041ca:	bf00      	nop
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200004d8 	.word	0x200004d8

080041d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041de:	f107 031c 	add.w	r3, r7, #28
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041ea:	463b      	mov	r3, r7
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	611a      	str	r2, [r3, #16]
 80041f8:	615a      	str	r2, [r3, #20]
 80041fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <MX_TIM3_Init+0xac>)
 80041fe:	4a22      	ldr	r2, [pc, #136]	; (8004288 <MX_TIM3_Init+0xb0>)
 8004200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <MX_TIM3_Init+0xac>)
 8004204:	22a9      	movs	r2, #169	; 0xa9
 8004206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <MX_TIM3_Init+0xac>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <MX_TIM3_Init+0xac>)
 8004210:	f241 3287 	movw	r2, #4999	; 0x1387
 8004214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <MX_TIM3_Init+0xac>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <MX_TIM3_Init+0xac>)
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004222:	4818      	ldr	r0, [pc, #96]	; (8004284 <MX_TIM3_Init+0xac>)
 8004224:	f003 fff2 	bl	800820c <HAL_TIM_PWM_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800422e:	f000 fb4f 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800423a:	f107 031c 	add.w	r3, r7, #28
 800423e:	4619      	mov	r1, r3
 8004240:	4810      	ldr	r0, [pc, #64]	; (8004284 <MX_TIM3_Init+0xac>)
 8004242:	f004 fdfb 	bl	8008e3c <HAL_TIMEx_MasterConfigSynchronization>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800424c:	f000 fb40 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004250:	2360      	movs	r3, #96	; 0x60
 8004252:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004260:	463b      	mov	r3, r7
 8004262:	2204      	movs	r2, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4807      	ldr	r0, [pc, #28]	; (8004284 <MX_TIM3_Init+0xac>)
 8004268:	f004 f928 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004272:	f000 fb2d 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004276:	4803      	ldr	r0, [pc, #12]	; (8004284 <MX_TIM3_Init+0xac>)
 8004278:	f000 fd38 	bl	8004cec <HAL_TIM_MspPostInit>

}
 800427c:	bf00      	nop
 800427e:	3728      	adds	r7, #40	; 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000524 	.word	0x20000524
 8004288:	40000400 	.word	0x40000400

0800428c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b098      	sub	sp, #96	; 0x60
 8004290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004292:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800429e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	611a      	str	r2, [r3, #16]
 80042ae:	615a      	str	r2, [r3, #20]
 80042b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2234      	movs	r2, #52	; 0x34
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f005 fce7 	bl	8009c8c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <MX_TIM8_Init+0x120>)
 80042c0:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <MX_TIM8_Init+0x124>)
 80042c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80042c4:	4b39      	ldr	r3, [pc, #228]	; (80043ac <MX_TIM8_Init+0x120>)
 80042c6:	22a9      	movs	r2, #169	; 0xa9
 80042c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ca:	4b38      	ldr	r3, [pc, #224]	; (80043ac <MX_TIM8_Init+0x120>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <MX_TIM8_Init+0x120>)
 80042d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80042d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042d8:	4b34      	ldr	r3, [pc, #208]	; (80043ac <MX_TIM8_Init+0x120>)
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80042de:	4b33      	ldr	r3, [pc, #204]	; (80043ac <MX_TIM8_Init+0x120>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <MX_TIM8_Init+0x120>)
 80042e6:	2280      	movs	r2, #128	; 0x80
 80042e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80042ea:	4830      	ldr	r0, [pc, #192]	; (80043ac <MX_TIM8_Init+0x120>)
 80042ec:	f003 ff8e 	bl	800820c <HAL_TIM_PWM_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80042f6:	f000 faeb 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004306:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800430a:	4619      	mov	r1, r3
 800430c:	4827      	ldr	r0, [pc, #156]	; (80043ac <MX_TIM8_Init+0x120>)
 800430e:	f004 fd95 	bl	8008e3c <HAL_TIMEx_MasterConfigSynchronization>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8004318:	f000 fada 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800431c:	2360      	movs	r3, #96	; 0x60
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1499;
 8004320:	f240 53db 	movw	r3, #1499	; 0x5db
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004326:	2300      	movs	r3, #0
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800432a:	2300      	movs	r3, #0
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800432e:	2300      	movs	r3, #0
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800433a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800433e:	2200      	movs	r2, #0
 8004340:	4619      	mov	r1, r3
 8004342:	481a      	ldr	r0, [pc, #104]	; (80043ac <MX_TIM8_Init+0x120>)
 8004344:	f004 f8ba 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800434e:	f000 fabf 	bl	80048d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800436a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004370:	2300      	movs	r3, #0
 8004372:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004374:	2300      	movs	r3, #0
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004382:	2300      	movs	r3, #0
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004386:	2300      	movs	r3, #0
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4807      	ldr	r0, [pc, #28]	; (80043ac <MX_TIM8_Init+0x120>)
 8004390:	f004 fdd6 	bl	8008f40 <HAL_TIMEx_ConfigBreakDeadTime>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 800439a:	f000 fa99 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800439e:	4803      	ldr	r0, [pc, #12]	; (80043ac <MX_TIM8_Init+0x120>)
 80043a0:	f000 fca4 	bl	8004cec <HAL_TIM_MspPostInit>

}
 80043a4:	bf00      	nop
 80043a6:	3760      	adds	r7, #96	; 0x60
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000570 	.word	0x20000570
 80043b0:	40013400 	.word	0x40013400

080043b4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b098      	sub	sp, #96	; 0x60
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	611a      	str	r2, [r3, #16]
 80043d6:	615a      	str	r2, [r3, #20]
 80043d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	2234      	movs	r2, #52	; 0x34
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f005 fc53 	bl	8009c8c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80043e6:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <MX_TIM15_Init+0x104>)
 80043e8:	4a34      	ldr	r2, [pc, #208]	; (80044bc <MX_TIM15_Init+0x108>)
 80043ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 80043ec:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <MX_TIM15_Init+0x104>)
 80043ee:	22a9      	movs	r2, #169	; 0xa9
 80043f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <MX_TIM15_Init+0x104>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4999;
 80043f8:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <MX_TIM15_Init+0x104>)
 80043fa:	f241 3287 	movw	r2, #4999	; 0x1387
 80043fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <MX_TIM15_Init+0x104>)
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004406:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <MX_TIM15_Init+0x104>)
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <MX_TIM15_Init+0x104>)
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004412:	4829      	ldr	r0, [pc, #164]	; (80044b8 <MX_TIM15_Init+0x104>)
 8004414:	f003 fefa 	bl	800820c <HAL_TIM_PWM_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800441e:	f000 fa57 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004426:	2300      	movs	r3, #0
 8004428:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800442a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800442e:	4619      	mov	r1, r3
 8004430:	4821      	ldr	r0, [pc, #132]	; (80044b8 <MX_TIM15_Init+0x104>)
 8004432:	f004 fd03 	bl	8008e3c <HAL_TIMEx_MasterConfigSynchronization>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800443c:	f000 fa48 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004440:	2360      	movs	r3, #96	; 0x60
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004448:	2300      	movs	r3, #0
 800444a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800444c:	2300      	movs	r3, #0
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004450:	2300      	movs	r3, #0
 8004452:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800445c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004460:	2200      	movs	r2, #0
 8004462:	4619      	mov	r1, r3
 8004464:	4814      	ldr	r0, [pc, #80]	; (80044b8 <MX_TIM15_Init+0x104>)
 8004466:	f004 f829 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004470:	f000 fa2e 	bl	80048d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800448c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004492:	2300      	movs	r3, #0
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4807      	ldr	r0, [pc, #28]	; (80044b8 <MX_TIM15_Init+0x104>)
 800449c:	f004 fd50 	bl	8008f40 <HAL_TIMEx_ConfigBreakDeadTime>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80044a6:	f000 fa13 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80044aa:	4803      	ldr	r0, [pc, #12]	; (80044b8 <MX_TIM15_Init+0x104>)
 80044ac:	f000 fc1e 	bl	8004cec <HAL_TIM_MspPostInit>

}
 80044b0:	bf00      	nop
 80044b2:	3760      	adds	r7, #96	; 0x60
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200005bc 	.word	0x200005bc
 80044bc:	40014000 	.word	0x40014000

080044c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b094      	sub	sp, #80	; 0x50
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	611a      	str	r2, [r3, #16]
 80044d6:	615a      	str	r2, [r3, #20]
 80044d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044da:	463b      	mov	r3, r7
 80044dc:	2234      	movs	r2, #52	; 0x34
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f005 fbd3 	bl	8009c8c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80044e6:	4b31      	ldr	r3, [pc, #196]	; (80045ac <MX_TIM16_Init+0xec>)
 80044e8:	4a31      	ldr	r2, [pc, #196]	; (80045b0 <MX_TIM16_Init+0xf0>)
 80044ea:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80044ec:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <MX_TIM16_Init+0xec>)
 80044ee:	22a9      	movs	r2, #169	; 0xa9
 80044f0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <MX_TIM16_Init+0xec>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 80044f8:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <MX_TIM16_Init+0xec>)
 80044fa:	f241 3287 	movw	r2, #4999	; 0x1387
 80044fe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <MX_TIM16_Init+0xec>)
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004506:	4b29      	ldr	r3, [pc, #164]	; (80045ac <MX_TIM16_Init+0xec>)
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800450c:	4b27      	ldr	r3, [pc, #156]	; (80045ac <MX_TIM16_Init+0xec>)
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004512:	4826      	ldr	r0, [pc, #152]	; (80045ac <MX_TIM16_Init+0xec>)
 8004514:	f003 fe23 	bl	800815e <HAL_TIM_Base_Init>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800451e:	f000 f9d7 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8004522:	4822      	ldr	r0, [pc, #136]	; (80045ac <MX_TIM16_Init+0xec>)
 8004524:	f003 fe72 	bl	800820c <HAL_TIM_PWM_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800452e:	f000 f9cf 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004532:	2360      	movs	r3, #96	; 0x60
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800453a:	2300      	movs	r3, #0
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800453e:	2300      	movs	r3, #0
 8004540:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800454e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004552:	2200      	movs	r2, #0
 8004554:	4619      	mov	r1, r3
 8004556:	4815      	ldr	r0, [pc, #84]	; (80045ac <MX_TIM16_Init+0xec>)
 8004558:	f003 ffb0 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8004562:	f000 f9b5 	bl	80048d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800457a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800457e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004588:	463b      	mov	r3, r7
 800458a:	4619      	mov	r1, r3
 800458c:	4807      	ldr	r0, [pc, #28]	; (80045ac <MX_TIM16_Init+0xec>)
 800458e:	f004 fcd7 	bl	8008f40 <HAL_TIMEx_ConfigBreakDeadTime>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8004598:	f000 f99a 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800459c:	4803      	ldr	r0, [pc, #12]	; (80045ac <MX_TIM16_Init+0xec>)
 800459e:	f000 fba5 	bl	8004cec <HAL_TIM_MspPostInit>

}
 80045a2:	bf00      	nop
 80045a4:	3750      	adds	r7, #80	; 0x50
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000608 	.word	0x20000608
 80045b0:	40014400 	.word	0x40014400

080045b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	609a      	str	r2, [r3, #8]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ca:	4b44      	ldr	r3, [pc, #272]	; (80046dc <MX_GPIO_Init+0x128>)
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	4a43      	ldr	r2, [pc, #268]	; (80046dc <MX_GPIO_Init+0x128>)
 80045d0:	f043 0304 	orr.w	r3, r3, #4
 80045d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045d6:	4b41      	ldr	r3, [pc, #260]	; (80046dc <MX_GPIO_Init+0x128>)
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045e2:	4b3e      	ldr	r3, [pc, #248]	; (80046dc <MX_GPIO_Init+0x128>)
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <MX_GPIO_Init+0x128>)
 80045e8:	f043 0320 	orr.w	r3, r3, #32
 80045ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ee:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <MX_GPIO_Init+0x128>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	4b38      	ldr	r3, [pc, #224]	; (80046dc <MX_GPIO_Init+0x128>)
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	4a37      	ldr	r2, [pc, #220]	; (80046dc <MX_GPIO_Init+0x128>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004606:	4b35      	ldr	r3, [pc, #212]	; (80046dc <MX_GPIO_Init+0x128>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004612:	4b32      	ldr	r3, [pc, #200]	; (80046dc <MX_GPIO_Init+0x128>)
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	4a31      	ldr	r2, [pc, #196]	; (80046dc <MX_GPIO_Init+0x128>)
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800461e:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <MX_GPIO_Init+0x128>)
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800462a:	4b2c      	ldr	r3, [pc, #176]	; (80046dc <MX_GPIO_Init+0x128>)
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	4a2b      	ldr	r2, [pc, #172]	; (80046dc <MX_GPIO_Init+0x128>)
 8004630:	f043 0308 	orr.w	r3, r3, #8
 8004634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004636:	4b29      	ldr	r3, [pc, #164]	; (80046dc <MX_GPIO_Init+0x128>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8004642:	2200      	movs	r2, #0
 8004644:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004648:	4825      	ldr	r0, [pc, #148]	; (80046e0 <MX_GPIO_Init+0x12c>)
 800464a:	f001 fef1 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800464e:	2200      	movs	r2, #0
 8004650:	2104      	movs	r1, #4
 8004652:	4824      	ldr	r0, [pc, #144]	; (80046e4 <MX_GPIO_Init+0x130>)
 8004654:	f001 feec 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004658:	2200      	movs	r2, #0
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	4822      	ldr	r0, [pc, #136]	; (80046e8 <MX_GPIO_Init+0x134>)
 800465e:	f001 fee7 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004668:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800466c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004672:	f107 0314 	add.w	r3, r7, #20
 8004676:	4619      	mov	r1, r3
 8004678:	4819      	ldr	r0, [pc, #100]	; (80046e0 <MX_GPIO_Init+0x12c>)
 800467a:	f001 fd57 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800467e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004684:	2301      	movs	r3, #1
 8004686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468c:	2300      	movs	r3, #0
 800468e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004690:	f107 0314 	add.w	r3, r7, #20
 8004694:	4619      	mov	r1, r3
 8004696:	4812      	ldr	r0, [pc, #72]	; (80046e0 <MX_GPIO_Init+0x12c>)
 8004698:	f001 fd48 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800469c:	2304      	movs	r3, #4
 800469e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a0:	2301      	movs	r3, #1
 80046a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a8:	2300      	movs	r3, #0
 80046aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4619      	mov	r1, r3
 80046b2:	480c      	ldr	r0, [pc, #48]	; (80046e4 <MX_GPIO_Init+0x130>)
 80046b4:	f001 fd3a 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046bc:	2301      	movs	r3, #1
 80046be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c4:	2300      	movs	r3, #0
 80046c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	4619      	mov	r1, r3
 80046ce:	4806      	ldr	r0, [pc, #24]	; (80046e8 <MX_GPIO_Init+0x134>)
 80046d0:	f001 fd2c 	bl	800612c <HAL_GPIO_Init>

}
 80046d4:	bf00      	nop
 80046d6:	3728      	adds	r7, #40	; 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	48000800 	.word	0x48000800
 80046e4:	48000c00 	.word	0x48000c00
 80046e8:	48000400 	.word	0x48000400

080046ec <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80c4 	beq.w	800488a <HAL_FDCAN_RxFifo0Callback+0x19e>
  {


    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8004702:	4b64      	ldr	r3, [pc, #400]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004704:	4a64      	ldr	r2, [pc, #400]	; (8004898 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8004706:	2140      	movs	r1, #64	; 0x40
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f001 f8db 	bl	80058c4 <HAL_FDCAN_GetRxMessage>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    /* Reception Error */
    Error_Handler();
 8004714:	f000 f8dc 	bl	80048d0 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004718:	2200      	movs	r2, #0
 800471a:	2101      	movs	r1, #1
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f001 f9ab 	bl	8005a78 <HAL_FDCAN_ActivateNotification>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_FDCAN_RxFifo0Callback+0x40>
    {
      /* Notification Error */
      Error_Handler();
 8004728:	f000 f8d2 	bl	80048d0 <Error_Handler>
    }

    switch (RxHeader.Identifier) { // Leser ID på motatt melding. Casene må lages ut fra ID-er enn mottar. (Sjekk "Interface-Overview" under "Overordnet prosjekt")
 800472c:	4b5a      	ldr	r3, [pc, #360]	; (8004898 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3b20      	subs	r3, #32
 8004732:	2b1f      	cmp	r3, #31
 8004734:	f200 80aa 	bhi.w	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	080047c1 	.word	0x080047c1
 8004744:	080047cb 	.word	0x080047cb
 8004748:	080047f3 	.word	0x080047f3
 800474c:	0800481b 	.word	0x0800481b
 8004750:	0800483b 	.word	0x0800483b
 8004754:	08004845 	.word	0x08004845
 8004758:	0800488d 	.word	0x0800488d
 800475c:	0800488d 	.word	0x0800488d
 8004760:	0800488d 	.word	0x0800488d
 8004764:	0800488d 	.word	0x0800488d
 8004768:	0800484f 	.word	0x0800484f
 800476c:	0800488d 	.word	0x0800488d
 8004770:	0800488d 	.word	0x0800488d
 8004774:	0800488d 	.word	0x0800488d
 8004778:	0800488d 	.word	0x0800488d
 800477c:	0800488d 	.word	0x0800488d
 8004780:	0800488d 	.word	0x0800488d
 8004784:	0800488d 	.word	0x0800488d
 8004788:	0800488d 	.word	0x0800488d
 800478c:	0800488d 	.word	0x0800488d
 8004790:	0800488d 	.word	0x0800488d
 8004794:	0800488d 	.word	0x0800488d
 8004798:	0800488d 	.word	0x0800488d
 800479c:	0800488d 	.word	0x0800488d
 80047a0:	0800488d 	.word	0x0800488d
 80047a4:	0800488d 	.word	0x0800488d
 80047a8:	0800488d 	.word	0x0800488d
 80047ac:	0800488d 	.word	0x0800488d
 80047b0:	0800488d 	.word	0x0800488d
 80047b4:	0800488d 	.word	0x0800488d
 80047b8:	0800488d 	.word	0x0800488d
 80047bc:	08004871 	.word	0x08004871
 80047c0:	4b34      	ldr	r3, [pc, #208]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80047c2:	781a      	ldrb	r2, [r3, #0]
    	// Reguleringskort: FilterID1 = 0x20, FilterID2 = 0xE0 --> Slipper gjennom ideer mellom 32-63 (0x20 - 0x3F)

		case 32: // BYTE FOR AKTIVERING ELLER DEAKTIVERING AV REGULERING

			memcpy(&REG_AKTIVER,  &RxData,1);
 80047c4:	4b35      	ldr	r3, [pc, #212]	; (800489c <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80047c6:	701a      	strb	r2, [r3, #0]
			break;
 80047c8:	e060      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>
	//			if (RxData[0] != 0)
	//			{
	//				a = 0;
	//			}

			MOTTATT_THRUST=1;
 80047ca:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	4b30      	ldr	r3, [pc, #192]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80047d2:	781a      	ldrb	r2, [r3, #0]

			// memcpy(. , . , .) Last place is the number of bytes to be copied.
			// Tx[B0,B1,B2,B3,B4,B5,B6,B7]
			memcpy(&operator_referanse_int.jag, &RxData, 1);  // B0
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80047da:	785a      	ldrb	r2, [r3, #1]
			memcpy(&operator_referanse_int.svai, &RxData[1], 1); // B1
 80047dc:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80047de:	705a      	strb	r2, [r3, #1]
 80047e0:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80047e2:	789a      	ldrb	r2, [r3, #2]
			memcpy(&operator_referanse_int.hiv, &RxData[2], 1); // B2
 80047e4:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80047e6:	70da      	strb	r2, [r3, #3]
 80047e8:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80047ea:	78da      	ldrb	r2, [r3, #3]
			memcpy(&operator_referanse_int.gir, &RxData[3], 1); // B3
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80047ee:	709a      	strb	r2, [r3, #2]
	//			memcpy(&operator_referanse_int, &RxData[4], 1); // B4
	//			memcpy(&operator_referanse_int, &RxData[5], 1); // B5
	//			memcpy(&operator_referanse_int, &RxData[6], 1); // B6
	//			memcpy(&operator_referanse_int, &RxData[7], 1); // B7
			break;
 80047f0:	e04c      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>

		case 34:  // STYREPAKKE MANIPULATOR
			MOTTATT_MANIPULATOR = 1;
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80047fa:	781a      	ldrb	r2, [r3, #0]
//
//			// memcpy(. , . , .) Last place is the number of bytes to be copied.
//			// Tx[B0,B1,B2,B3,B4,B5,B6,B7]
			memcpy(&operator_manpu_int.skyv,  &RxData,    1);  // B0
 80047fc:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80047fe:	70da      	strb	r2, [r3, #3]
 8004800:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004802:	785a      	ldrb	r2, [r3, #1]
			memcpy(&operator_manpu_int.snurr, &RxData[1], 1); // B1
 8004804:	4b29      	ldr	r3, [pc, #164]	; (80048ac <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8004806:	705a      	strb	r2, [r3, #1]
 8004808:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800480a:	789a      	ldrb	r2, [r3, #2]
			memcpy(&operator_manpu_int.sving, &RxData[2], 1); // B2
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800480e:	709a      	strb	r2, [r3, #2]
 8004810:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004812:	78da      	ldrb	r2, [r3, #3]
			memcpy(&operator_manpu_int.gripe, &RxData[3], 1); // B3
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8004816:	701a      	strb	r2, [r3, #0]
			//memcpy(&operator_manpu_int, &RxData[6], 1); // B6
			//memcpy(&operator_manpu_int, &RxData[7], 1); // B7

			 // sende sensitivitet som sensitivitet*10?
			// manu_sensitivitet.gripe = (float) manu_sensitivitet_int.gripe.sensitivitet / 10;
			break;
 8004818:	e038      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>


		case 35:  // SENSOR
			MOTTATT_SENSOR = 1; // Sett flagg for mottagelse.
 800481a:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004822:	881a      	ldrh	r2, [r3, #0]
			memcpy(&sensordata_int.rull,  &RxData,    2);  // B0-B1
 8004824:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800482a:	885a      	ldrh	r2, [r3, #2]
			memcpy(&sensordata_int.stamp, &RxData[2], 2); // B2-B3
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800482e:	805a      	strh	r2, [r3, #2]
 8004830:	4b18      	ldr	r3, [pc, #96]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004832:	889a      	ldrh	r2, [r3, #4]
			memcpy(&sensordata_int.dybde, &RxData[4], 2); // B4-B5
 8004834:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8004836:	809a      	strh	r2, [r3, #4]
			//memcpy(&sensordata_int, &RxData[6], 2); // B6-B7

			break;
 8004838:	e028      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 800483c:	881a      	ldrh	r2, [r3, #0]


		case 36: // FORM FOR STRØMFORBRUK KRAFT, SENDER IDX_KRAFT
			memcpy(&kraftdata_int.stromforbruk_hoyre, &RxData, 2);  // B0-B1
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8004840:	801a      	strh	r2, [r3, #0]
			break;
 8004842:	e023      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004846:	881a      	ldrh	r2, [r3, #0]
		case 37:
			memcpy(&kraftdata_int.stromforbruk_venstre, &RxData, 2);  // B0-B1
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800484a:	805a      	strh	r2, [r3, #2]
			break;
 800484c:	e01e      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>

		case 42: /// OPPDATER PARAMETRE
			memcpy(&ny_param, &RxData, sizeof(can_param));
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8004850:	4a10      	ldr	r2, [pc, #64]	; (8004894 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8004852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004856:	e883 0003 	stmia.w	r3, {r0, r1}
			oppdater_parameter(ny_param.param_id, ny_param.parameter);
 800485a:	4b18      	ldr	r3, [pc, #96]	; (80048bc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a17      	ldr	r2, [pc, #92]	; (80048bc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8004860:	edd2 7a01 	vldr	s15, [r2, #4]
 8004864:	eeb0 0a67 	vmov.f32	s0, s15
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fb59 	bl	8001f20 <oppdater_parameter>
			break;
 800486e:	e00d      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>

		case 63: // IKKE FJERN DENNE // Endres til 63 for Regulering, til 95 for Sensor og til 127 for Kraft.
			// mister denne disable allt (3s)
			MARCO = 1;
 8004870:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
			memcpy(&TxData, (uint8_t *) &"polo!\n", 6);
 8004876:	2206      	movs	r2, #6
 8004878:	4912      	ldr	r1, [pc, #72]	; (80048c4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800487a:	4813      	ldr	r0, [pc, #76]	; (80048c8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800487c:	f005 f9f8 	bl	8009c70 <memcpy>
			sendCAN(155, &hfdcan1); // Endres til 155 for Regulering, til 156 for Sensor, til 157/158/159 for Kraft1/2/3.
 8004880:	4912      	ldr	r1, [pc, #72]	; (80048cc <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8004882:	209b      	movs	r0, #155	; 0x9b
 8004884:	f7ff f824 	bl	80038d0 <sendCAN>
			break;
 8004888:	e000      	b.n	800488c <HAL_FDCAN_RxFifo0Callback+0x1a0>

    }
  }
 800488a:	bf00      	nop

}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200006c0 	.word	0x200006c0
 8004898:	20000690 	.word	0x20000690
 800489c:	200000aa 	.word	0x200000aa
 80048a0:	200000ac 	.word	0x200000ac
 80048a4:	200000e0 	.word	0x200000e0
 80048a8:	200000ad 	.word	0x200000ad
 80048ac:	200001d0 	.word	0x200001d0
 80048b0:	200000ae 	.word	0x200000ae
 80048b4:	200002b4 	.word	0x200002b4
 80048b8:	200002d8 	.word	0x200002d8
 80048bc:	200002e0 	.word	0x200002e0
 80048c0:	200000ab 	.word	0x200000ab
 80048c4:	08009cb4 	.word	0x08009cb4
 80048c8:	200006b8 	.word	0x200006b8
 80048cc:	200002e8 	.word	0x200002e8

080048d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048d4:	b672      	cpsid	i
}
 80048d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048d8:	e7fe      	b.n	80048d8 <Error_Handler+0x8>
	...

080048dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <HAL_MspInit+0x44>)
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <HAL_MspInit+0x44>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6613      	str	r3, [r2, #96]	; 0x60
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_MspInit+0x44>)
 80048f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_MspInit+0x44>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <HAL_MspInit+0x44>)
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_MspInit+0x44>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004912:	f002 fc45 	bl	80071a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000

08004924 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b09a      	sub	sp, #104	; 0x68
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800493c:	f107 0310 	add.w	r3, r7, #16
 8004940:	2244      	movs	r2, #68	; 0x44
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f005 f9a1 	bl	8009c8c <memset>
  if(hfdcan->Instance==FDCAN1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <HAL_FDCAN_MspInit+0xbc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d141      	bne.n	80049d8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004958:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800495a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800495e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004960:	f107 0310 	add.w	r3, r7, #16
 8004964:	4618      	mov	r0, r3
 8004966:	f003 f95f 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004970:	f7ff ffae 	bl	80048d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_FDCAN_MspInit+0xc0>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_FDCAN_MspInit+0xc0>)
 800497a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800497e:	6593      	str	r3, [r2, #88]	; 0x58
 8004980:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <HAL_FDCAN_MspInit+0xc0>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498c:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_FDCAN_MspInit+0xc0>)
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <HAL_FDCAN_MspInit+0xc0>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004998:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_FDCAN_MspInit+0xc0>)
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80049a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80049a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049aa:	2302      	movs	r3, #2
 80049ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b2:	2300      	movs	r3, #0
 80049b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80049b6:	2309      	movs	r3, #9
 80049b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049be:	4619      	mov	r1, r3
 80049c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049c4:	f001 fbb2 	bl	800612c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80049c8:	2200      	movs	r2, #0
 80049ca:	2100      	movs	r1, #0
 80049cc:	2015      	movs	r0, #21
 80049ce:	f000 fd24 	bl	800541a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80049d2:	2015      	movs	r0, #21
 80049d4:	f000 fd3b 	bl	800544e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80049d8:	bf00      	nop
 80049da:	3768      	adds	r7, #104	; 0x68
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40006400 	.word	0x40006400
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b09a      	sub	sp, #104	; 0x68
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	2244      	movs	r2, #68	; 0x44
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f005 f93f 	bl	8009c8c <memset>
  if(hi2c->Instance==I2C3)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <HAL_I2C_MspInit+0xa8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d137      	bne.n	8004a88 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a22:	f107 0310 	add.w	r3, r7, #16
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 f8fe 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004a32:	f7ff ff4d 	bl	80048d0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <HAL_I2C_MspInit+0xac>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <HAL_I2C_MspInit+0xac>)
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <HAL_I2C_MspInit+0xac>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a52:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a54:	2312      	movs	r3, #18
 8004a56:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8004a60:	2308      	movs	r3, #8
 8004a62:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a68:	4619      	mov	r1, r3
 8004a6a:	480b      	ldr	r0, [pc, #44]	; (8004a98 <HAL_I2C_MspInit+0xb0>)
 8004a6c:	f001 fb5e 	bl	800612c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <HAL_I2C_MspInit+0xac>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	4a07      	ldr	r2, [pc, #28]	; (8004a94 <HAL_I2C_MspInit+0xac>)
 8004a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_I2C_MspInit+0xac>)
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004a88:	bf00      	nop
 8004a8a:	3768      	adds	r7, #104	; 0x68
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40007800 	.word	0x40007800
 8004a94:	40021000 	.word	0x40021000
 8004a98:	48000800 	.word	0x48000800

08004a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b09a      	sub	sp, #104	; 0x68
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
 8004ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	2244      	movs	r2, #68	; 0x44
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 f8e5 	bl	8009c8c <memset>
  if(huart->Instance==LPUART1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_UART_MspInit+0xa8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d136      	bne.n	8004b3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004acc:	2320      	movs	r3, #32
 8004ace:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ad4:	f107 0310 	add.w	r3, r7, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 f8a5 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004ae4:	f7ff fef4 	bl	80048d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <HAL_UART_MspInit+0xac>)
 8004aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <HAL_UART_MspInit+0xac>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_UART_MspInit+0xac>)
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <HAL_UART_MspInit+0xac>)
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <HAL_UART_MspInit+0xac>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b0c:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <HAL_UART_MspInit+0xac>)
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|LPUART1_RX_Pin;
 8004b18:	230c      	movs	r3, #12
 8004b1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b24:	2300      	movs	r3, #0
 8004b26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004b28:	230c      	movs	r3, #12
 8004b2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b30:	4619      	mov	r1, r3
 8004b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b36:	f001 faf9 	bl	800612c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004b3a:	bf00      	nop
 8004b3c:	3768      	adds	r7, #104	; 0x68
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40008000 	.word	0x40008000
 8004b48:	40021000 	.word	0x40021000

08004b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <HAL_SPI_MspInit+0x7c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d128      	bne.n	8004bc0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b6e:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <HAL_SPI_MspInit+0x80>)
 8004b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b72:	4a16      	ldr	r2, [pc, #88]	; (8004bcc <HAL_SPI_MspInit+0x80>)
 8004b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b78:	6613      	str	r3, [r2, #96]	; 0x60
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_SPI_MspInit+0x80>)
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <HAL_SPI_MspInit+0x80>)
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <HAL_SPI_MspInit+0x80>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b92:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <HAL_SPI_MspInit+0x80>)
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004b9e:	23a0      	movs	r3, #160	; 0xa0
 8004ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bae:	2305      	movs	r3, #5
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb2:	f107 0314 	add.w	r3, r7, #20
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bbc:	f001 fab6 	bl	800612c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004bc0:	bf00      	nop
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40013000 	.word	0x40013000
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2e      	ldr	r2, [pc, #184]	; (8004c98 <HAL_TIM_PWM_MspInit+0xc8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10c      	bne.n	8004bfc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004be2:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	4a2d      	ldr	r2, [pc, #180]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bec:	6613      	str	r3, [r2, #96]	; 0x60
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004bfa:	e046      	b.n	8004c8a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c04:	d10c      	bne.n	8004c20 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c06:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6593      	str	r3, [r2, #88]	; 0x58
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
}
 8004c1e:	e034      	b.n	8004c8a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <HAL_TIM_PWM_MspInit+0xd0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10c      	bne.n	8004c44 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
 8004c36:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	697b      	ldr	r3, [r7, #20]
}
 8004c42:	e022      	b.n	8004c8a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <HAL_TIM_PWM_MspInit+0xd4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d10c      	bne.n	8004c68 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c58:	6613      	str	r3, [r2, #96]	; 0x60
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
}
 8004c66:	e010      	b.n	8004c8a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM15)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10b      	bne.n	8004c8a <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c76:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8004c7e:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <HAL_TIM_PWM_MspInit+0xcc>)
 8004c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
}
 8004c8a:	bf00      	nop
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40014000 	.word	0x40014000

08004cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <HAL_TIM_Base_MspInit+0x38>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40021000 	.word	0x40021000

08004cec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08e      	sub	sp, #56	; 0x38
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a76      	ldr	r2, [pc, #472]	; (8004ee4 <HAL_TIM_MspPostInit+0x1f8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d11c      	bne.n	8004d48 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d0e:	4b76      	ldr	r3, [pc, #472]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d12:	4a75      	ldr	r2, [pc, #468]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d14:	f043 0304 	orr.w	r3, r3, #4
 8004d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d1a:	4b73      	ldr	r3, [pc, #460]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	6a3b      	ldr	r3, [r7, #32]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004d26:	230f      	movs	r3, #15
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d32:	2300      	movs	r3, #0
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004d36:	2302      	movs	r3, #2
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d3e:	4619      	mov	r1, r3
 8004d40:	486a      	ldr	r0, [pc, #424]	; (8004eec <HAL_TIM_MspPostInit+0x200>)
 8004d42:	f001 f9f3 	bl	800612c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8004d46:	e0c8      	b.n	8004eda <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d13a      	bne.n	8004dc8 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d52:	4b65      	ldr	r3, [pc, #404]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d56:	4a64      	ldr	r2, [pc, #400]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d5e:	4b62      	ldr	r3, [pc, #392]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	4a5e      	ldr	r2, [pc, #376]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d70:	f043 0302 	orr.w	r3, r3, #2
 8004d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d76:	4b5c      	ldr	r3, [pc, #368]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d82:	2303      	movs	r3, #3
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d86:	2302      	movs	r3, #2
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d92:	2301      	movs	r3, #1
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004da0:	f001 f9c4 	bl	800612c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004da4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004daa:	2302      	movs	r3, #2
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db2:	2300      	movs	r3, #0
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004db6:	2301      	movs	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	484b      	ldr	r0, [pc, #300]	; (8004ef0 <HAL_TIM_MspPostInit+0x204>)
 8004dc2:	f001 f9b3 	bl	800612c <HAL_GPIO_Init>
}
 8004dc6:	e088      	b.n	8004eda <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM3)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a49      	ldr	r2, [pc, #292]	; (8004ef4 <HAL_TIM_MspPostInit+0x208>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d11d      	bne.n	8004e0e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd2:	4b45      	ldr	r3, [pc, #276]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	4a44      	ldr	r2, [pc, #272]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dde:	4b42      	ldr	r3, [pc, #264]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004dea:	2310      	movs	r3, #16
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dee:	2302      	movs	r3, #2
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df6:	2300      	movs	r3, #0
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e02:	4619      	mov	r1, r3
 8004e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e08:	f001 f990 	bl	800612c <HAL_GPIO_Init>
}
 8004e0c:	e065      	b.n	8004eda <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a39      	ldr	r2, [pc, #228]	; (8004ef8 <HAL_TIM_MspPostInit+0x20c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d11c      	bne.n	8004e52 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e18:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1c:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004e1e:	f043 0304 	orr.w	r3, r3, #4
 8004e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e24:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e34:	2302      	movs	r3, #2
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004e40:	2304      	movs	r3, #4
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4828      	ldr	r0, [pc, #160]	; (8004eec <HAL_TIM_MspPostInit+0x200>)
 8004e4c:	f001 f96e 	bl	800612c <HAL_GPIO_Init>
}
 8004e50:	e043      	b.n	8004eda <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM15)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a29      	ldr	r2, [pc, #164]	; (8004efc <HAL_TIM_MspPostInit+0x210>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d11d      	bne.n	8004e98 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5c:	4b22      	ldr	r3, [pc, #136]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004e62:	f043 0302 	orr.w	r3, r3, #2
 8004e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e68:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e82:	2300      	movs	r3, #0
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8004e86:	2301      	movs	r3, #1
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4817      	ldr	r0, [pc, #92]	; (8004ef0 <HAL_TIM_MspPostInit+0x204>)
 8004e92:	f001 f94b 	bl	800612c <HAL_GPIO_Init>
}
 8004e96:	e020      	b.n	8004eda <HAL_TIM_MspPostInit+0x1ee>
  else if(htim->Instance==TIM16)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_TIM_MspPostInit+0x214>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d11b      	bne.n	8004eda <HAL_TIM_MspPostInit+0x1ee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea2:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004ea8:	f043 0302 	orr.w	r3, r3, #2
 8004eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <HAL_TIM_MspPostInit+0x1fc>)
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004eba:	2310      	movs	r3, #16
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4806      	ldr	r0, [pc, #24]	; (8004ef0 <HAL_TIM_MspPostInit+0x204>)
 8004ed6:	f001 f929 	bl	800612c <HAL_GPIO_Init>
}
 8004eda:	bf00      	nop
 8004edc:	3738      	adds	r7, #56	; 0x38
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	48000800 	.word	0x48000800
 8004ef0:	48000400 	.word	0x48000400
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40013400 	.word	0x40013400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400

08004f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f08:	e7fe      	b.n	8004f08 <NMI_Handler+0x4>

08004f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f0e:	e7fe      	b.n	8004f0e <HardFault_Handler+0x4>

08004f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f14:	e7fe      	b.n	8004f14 <MemManage_Handler+0x4>

08004f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f16:	b480      	push	{r7}
 8004f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f1a:	e7fe      	b.n	8004f1a <BusFault_Handler+0x4>

08004f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f20:	e7fe      	b.n	8004f20 <UsageFault_Handler+0x4>

08004f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	///// keyword and persists its value across the function calls.
	////// bryter avprelling


	static uint32_t teller_bryter = 0;
	teller_bryter++;
 8004f50:	4b49      	ldr	r3, [pc, #292]	; (8005078 <SysTick_Handler+0x12c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a48      	ldr	r2, [pc, #288]	; (8005078 <SysTick_Handler+0x12c>)
 8004f58:	6013      	str	r3, [r2, #0]
	if (teller_bryter >= 10){
 8004f5a:	4b47      	ldr	r3, [pc, #284]	; (8005078 <SysTick_Handler+0x12c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b09      	cmp	r3, #9
 8004f60:	d904      	bls.n	8004f6c <SysTick_Handler+0x20>
		teller_bryter = 0;
 8004f62:	4b45      	ldr	r3, [pc, #276]	; (8005078 <SysTick_Handler+0x12c>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
		sjekk_bryter();		// Sjekker om det har vært et brukertrykk siden sist sjekk.
 8004f68:	f7fd fb8c 	bl	8002684 <sjekk_bryter>


	///////////// FEILSJEKKING

	static uint32_t teller_siden_marco = 0;
	teller_siden_marco++;
 8004f6c:	4b43      	ldr	r3, [pc, #268]	; (800507c <SysTick_Handler+0x130>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4a42      	ldr	r2, [pc, #264]	; (800507c <SysTick_Handler+0x130>)
 8004f74:	6013      	str	r3, [r2, #0]

	// MARCO blir aldri satt til 0 noe sted, løkke >= 3000 vil aldri være sann
	if (MARCO){
 8004f76:	4b42      	ldr	r3, [pc, #264]	; (8005080 <SysTick_Handler+0x134>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <SysTick_Handler+0x38>
		teller_siden_marco = 0;
 8004f7e:	4b3f      	ldr	r3, [pc, #252]	; (800507c <SysTick_Handler+0x130>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
	}

	if (teller_siden_marco >= 3000){
 8004f84:	4b3d      	ldr	r3, [pc, #244]	; (800507c <SysTick_Handler+0x130>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d909      	bls.n	8004fa4 <SysTick_Handler+0x58>
		// sette alle motorer til idle dersom mister kontakt med topside
		null_bidrag_horisontal(&sum_bidrag);
 8004f90:	483c      	ldr	r0, [pc, #240]	; (8005084 <SysTick_Handler+0x138>)
 8004f92:	f7fd fb9f 	bl	80026d4 <null_bidrag_horisontal>
		null_bidrag_vertikal(&sum_bidrag);
 8004f96:	483b      	ldr	r0, [pc, #236]	; (8005084 <SysTick_Handler+0x138>)
 8004f98:	f7fd fbb6 	bl	8002708 <null_bidrag_vertikal>
		konverter_sum_bidrag_PWM();
 8004f9c:	f7fe faf2 	bl	8003584 <konverter_sum_bidrag_PWM>
		send_thruster_PWM();
 8004fa0:	f7fe fb50 	bl	8003644 <send_thruster_PWM>


	// teller for om CAN styring feiler, denne telleren skal ikke nå et alt for høyt nivå dersom
	// får thrust meldinger kontinuerlig, vil da bli satt til 0 for hver melding.
	static uint32_t teller_feil_CAN_styring = 0;
	teller_feil_CAN_styring++;
 8004fa4:	4b38      	ldr	r3, [pc, #224]	; (8005088 <SysTick_Handler+0x13c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	4a37      	ldr	r2, [pc, #220]	; (8005088 <SysTick_Handler+0x13c>)
 8004fac:	6013      	str	r3, [r2, #0]

	// dersom når feks 60ms, vil si at CAN styring har feilet, ønsker da at alle paadrag skal settes
	// til 0, siden har mistet kontroll over ROV-en
	// IF CAN FEIL ELLER MASTER AV ALLT AV?
	if(teller_feil_CAN_styring >= 3000){
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <SysTick_Handler+0x13c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d909      	bls.n	8004fce <SysTick_Handler+0x82>
		// CAN THRUSTER FEILET
		null_bidrag_horisontal(&sum_bidrag);
 8004fba:	4832      	ldr	r0, [pc, #200]	; (8005084 <SysTick_Handler+0x138>)
 8004fbc:	f7fd fb8a 	bl	80026d4 <null_bidrag_horisontal>
		null_bidrag_vertikal(&sum_bidrag);
 8004fc0:	4830      	ldr	r0, [pc, #192]	; (8005084 <SysTick_Handler+0x138>)
 8004fc2:	f7fd fba1 	bl	8002708 <null_bidrag_vertikal>
		konverter_sum_bidrag_PWM();
 8004fc6:	f7fe fadd 	bl	8003584 <konverter_sum_bidrag_PWM>
		send_thruster_PWM();
 8004fca:	f7fe fb3b 	bl	8003644 <send_thruster_PWM>

	}


	static uint32_t teller_feil_CAN_manpu = 0;
	teller_feil_CAN_manpu++;
 8004fce:	4b2f      	ldr	r3, [pc, #188]	; (800508c <SysTick_Handler+0x140>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <SysTick_Handler+0x140>)
 8004fd6:	6013      	str	r3, [r2, #0]
	}


	////////// STYRING

	if (MOTTATT_THRUST){
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <SysTick_Handler+0x144>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d028      	beq.n	8005032 <SysTick_Handler+0xe6>
		static uint32_t teller_timeout_send;
		teller_timeout_send++;
 8004fe0:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <SysTick_Handler+0x148>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <SysTick_Handler+0x148>)
 8004fe8:	6013      	str	r3, [r2, #0]
		// roven skrus på, må sendes aktiveringsmelding først.
		// !(REG_AKTIVER & 0x01) -> dersom bit 0 er 0, ingen regulering
		// !(REG_AKTIVER & 0x01)

		//|| !(REG_AKTIVER & 0x01
		if ( (teller_timeout_send >= 250)){
 8004fea:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <SysTick_Handler+0x148>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2bf9      	cmp	r3, #249	; 0xf9
 8004ff0:	d90c      	bls.n	800500c <SysTick_Handler+0xc0>
			SUM_BIDRAG_STYRING = 1;
 8004ff2:	4b29      	ldr	r3, [pc, #164]	; (8005098 <SysTick_Handler+0x14c>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]

			teller_timeout_send = 0;
 8004ff8:	4b26      	ldr	r3, [pc, #152]	; (8005094 <SysTick_Handler+0x148>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
			// hopp ut av if
			MOTTATT_THRUST = 0;
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <SysTick_Handler+0x144>)
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]

			//har mottatt thrust melding en gang dersom her, setter teller for feil i styremelding
			//til 0.
			teller_feil_CAN_styring = 0;
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <SysTick_Handler+0x13c>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e012      	b.n	8005032 <SysTick_Handler+0xe6>
		}
		// else if slik at denne ikke vil bli testet. Dersom if blir utført i tillegg(vil da overskrive forrige sum_bidrag)

		else if (MOTTATT_SENSOR){
 800500c:	4b23      	ldr	r3, [pc, #140]	; (800509c <SysTick_Handler+0x150>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00e      	beq.n	8005032 <SysTick_Handler+0xe6>
			SUM_BIDRAG_INKL_REG = 1;
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <SysTick_Handler+0x154>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]

			teller_timeout_send = 0;
 800501a:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <SysTick_Handler+0x148>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
			MOTTATT_SENSOR = 0;
 8005020:	4b1e      	ldr	r3, [pc, #120]	; (800509c <SysTick_Handler+0x150>)
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
			MOTTATT_THRUST= 0;
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <SysTick_Handler+0x144>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]

			teller_feil_CAN_styring = 0;
 800502c:	4b16      	ldr	r3, [pc, #88]	; (8005088 <SysTick_Handler+0x13c>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
	}

	///////////// SENDING OVER CAN

	static uint32_t teller_temp_topside = 0;
	teller_temp_topside++;
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <SysTick_Handler+0x158>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <SysTick_Handler+0x158>)
 800503a:	6013      	str	r3, [r2, #0]

	// både hente temperatursensordata og sende til topside på 500ms går fint ()
	if (teller_temp_topside >= 500){ // 500 ms
 800503c:	4b19      	ldr	r3, [pc, #100]	; (80050a4 <SysTick_Handler+0x158>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005044:	d305      	bcc.n	8005052 <SysTick_Handler+0x106>
		teller_temp_topside = 0;
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <SysTick_Handler+0x158>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
		LES_SEND_TEMP = 1;
 800504c:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <SysTick_Handler+0x15c>)
 800504e:	2201      	movs	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]

		//teller_ID_129 = 0;
	}

	static uint32_t teller_thrust_topside = 0;
	teller_thrust_topside++;
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <SysTick_Handler+0x160>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a14      	ldr	r2, [pc, #80]	; (80050ac <SysTick_Handler+0x160>)
 800505a:	6013      	str	r3, [r2, #0]
	if (teller_thrust_topside >= 100){
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <SysTick_Handler+0x160>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b63      	cmp	r3, #99	; 0x63
 8005062:	d905      	bls.n	8005070 <SysTick_Handler+0x124>
		teller_thrust_topside = 0;
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <SysTick_Handler+0x160>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
		THRUST_TOPSIDE = 1;
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <SysTick_Handler+0x164>)
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005070:	f000 f8b8 	bl	80051e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}
 8005078:	200006cc 	.word	0x200006cc
 800507c:	200006d0 	.word	0x200006d0
 8005080:	200000ab 	.word	0x200000ab
 8005084:	20000110 	.word	0x20000110
 8005088:	200006d4 	.word	0x200006d4
 800508c:	200006d8 	.word	0x200006d8
 8005090:	200000ac 	.word	0x200000ac
 8005094:	200006dc 	.word	0x200006dc
 8005098:	200000af 	.word	0x200000af
 800509c:	200000ae 	.word	0x200000ae
 80050a0:	200000b0 	.word	0x200000b0
 80050a4:	200006e0 	.word	0x200006e0
 80050a8:	200000b2 	.word	0x200000b2
 80050ac:	200006e4 	.word	0x200006e4
 80050b0:	200000b1 	.word	0x200000b1

080050b4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80050b8:	4802      	ldr	r0, [pc, #8]	; (80050c4 <FDCAN1_IT0_IRQHandler+0x10>)
 80050ba:	f000 fdc3 	bl	8005c44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	200002e8 	.word	0x200002e8

080050c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <SystemInit+0x20>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <SystemInit+0x20>)
 80050d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050ec:	480d      	ldr	r0, [pc, #52]	; (8005124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050f0:	480d      	ldr	r0, [pc, #52]	; (8005128 <LoopForever+0x6>)
  ldr r1, =_edata
 80050f2:	490e      	ldr	r1, [pc, #56]	; (800512c <LoopForever+0xa>)
  ldr r2, =_sidata
 80050f4:	4a0e      	ldr	r2, [pc, #56]	; (8005130 <LoopForever+0xe>)
  movs r3, #0
 80050f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80050f8:	e002      	b.n	8005100 <LoopCopyDataInit>

080050fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050fe:	3304      	adds	r3, #4

08005100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005104:	d3f9      	bcc.n	80050fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005106:	4a0b      	ldr	r2, [pc, #44]	; (8005134 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005108:	4c0b      	ldr	r4, [pc, #44]	; (8005138 <LoopForever+0x16>)
  movs r3, #0
 800510a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800510c:	e001      	b.n	8005112 <LoopFillZerobss>

0800510e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800510e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005110:	3204      	adds	r2, #4

08005112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005114:	d3fb      	bcc.n	800510e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005116:	f7ff ffd7 	bl	80050c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800511a:	f004 fd85 	bl	8009c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800511e:	f7fe fcbf 	bl	8003aa0 <main>

08005122 <LoopForever>:

LoopForever:
    b LoopForever
 8005122:	e7fe      	b.n	8005122 <LoopForever>
  ldr   r0, =_estack
 8005124:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800512c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8005130:	08009d1c 	.word	0x08009d1c
  ldr r2, =_sbss
 8005134:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8005138:	200006ec 	.word	0x200006ec

0800513c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800513c:	e7fe      	b.n	800513c <ADC1_2_IRQHandler>

0800513e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005148:	2003      	movs	r0, #3
 800514a:	f000 f95b 	bl	8005404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800514e:	200f      	movs	r0, #15
 8005150:	f000 f80e 	bl	8005170 <HAL_InitTick>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	71fb      	strb	r3, [r7, #7]
 800515e:	e001      	b.n	8005164 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005160:	f7ff fbbc 	bl	80048dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005164:	79fb      	ldrb	r3, [r7, #7]

}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800517c:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_InitTick+0x68>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d022      	beq.n	80051ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005184:	4b15      	ldr	r3, [pc, #84]	; (80051dc <HAL_InitTick+0x6c>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_InitTick+0x68>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005190:	fbb1 f3f3 	udiv	r3, r1, r3
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f966 	bl	800546a <HAL_SYSTICK_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10f      	bne.n	80051c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	d809      	bhi.n	80051be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051aa:	2200      	movs	r2, #0
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b2:	f000 f932 	bl	800541a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051b6:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <HAL_InitTick+0x70>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e007      	b.n	80051ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	e004      	b.n	80051ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	e001      	b.n	80051ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000080 	.word	0x20000080
 80051dc:	20000078 	.word	0x20000078
 80051e0:	2000007c 	.word	0x2000007c

080051e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_IncTick+0x1c>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_IncTick+0x20>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	4a03      	ldr	r2, [pc, #12]	; (8005200 <HAL_IncTick+0x1c>)
 80051f4:	6013      	str	r3, [r2, #0]
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	200006e8 	.word	0x200006e8
 8005204:	20000080 	.word	0x20000080

08005208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return uwTick;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <HAL_GetTick+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200006e8 	.word	0x200006e8

08005220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005228:	f7ff ffee 	bl	8005208 <HAL_GetTick>
 800522c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005238:	d004      	beq.n	8005244 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_Delay+0x40>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005244:	bf00      	nop
 8005246:	f7ff ffdf 	bl	8005208 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d8f7      	bhi.n	8005246 <HAL_Delay+0x26>
  {
  }
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000080 	.word	0x20000080

08005264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005280:	4013      	ands	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800528c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005296:	4a04      	ldr	r2, [pc, #16]	; (80052a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	60d3      	str	r3, [r2, #12]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052b0:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <__NVIC_GetPriorityGrouping+0x18>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	f003 0307 	and.w	r3, r3, #7
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	e000ed00 	.word	0xe000ed00

080052c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	db0b      	blt.n	80052f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	f003 021f 	and.w	r2, r3, #31
 80052e0:	4907      	ldr	r1, [pc, #28]	; (8005300 <__NVIC_EnableIRQ+0x38>)
 80052e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	2001      	movs	r0, #1
 80052ea:	fa00 f202 	lsl.w	r2, r0, r2
 80052ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	e000e100 	.word	0xe000e100

08005304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	6039      	str	r1, [r7, #0]
 800530e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005314:	2b00      	cmp	r3, #0
 8005316:	db0a      	blt.n	800532e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	b2da      	uxtb	r2, r3
 800531c:	490c      	ldr	r1, [pc, #48]	; (8005350 <__NVIC_SetPriority+0x4c>)
 800531e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005322:	0112      	lsls	r2, r2, #4
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	440b      	add	r3, r1
 8005328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800532c:	e00a      	b.n	8005344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4908      	ldr	r1, [pc, #32]	; (8005354 <__NVIC_SetPriority+0x50>)
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	3b04      	subs	r3, #4
 800533c:	0112      	lsls	r2, r2, #4
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	440b      	add	r3, r1
 8005342:	761a      	strb	r2, [r3, #24]
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	e000e100 	.word	0xe000e100
 8005354:	e000ed00 	.word	0xe000ed00

08005358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f1c3 0307 	rsb	r3, r3, #7
 8005372:	2b04      	cmp	r3, #4
 8005374:	bf28      	it	cs
 8005376:	2304      	movcs	r3, #4
 8005378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	3304      	adds	r3, #4
 800537e:	2b06      	cmp	r3, #6
 8005380:	d902      	bls.n	8005388 <NVIC_EncodePriority+0x30>
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	3b03      	subs	r3, #3
 8005386:	e000      	b.n	800538a <NVIC_EncodePriority+0x32>
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800538c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43da      	mvns	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	401a      	ands	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	43d9      	mvns	r1, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b0:	4313      	orrs	r3, r2
         );
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3724      	adds	r7, #36	; 0x24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053d0:	d301      	bcc.n	80053d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053d2:	2301      	movs	r3, #1
 80053d4:	e00f      	b.n	80053f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <SysTick_Config+0x40>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053de:	210f      	movs	r1, #15
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e4:	f7ff ff8e 	bl	8005304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <SysTick_Config+0x40>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ee:	4b04      	ldr	r3, [pc, #16]	; (8005400 <SysTick_Config+0x40>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	e000e010 	.word	0xe000e010

08005404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ff29 	bl	8005264 <__NVIC_SetPriorityGrouping>
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	4603      	mov	r3, r0
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005428:	f7ff ff40 	bl	80052ac <__NVIC_GetPriorityGrouping>
 800542c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	6978      	ldr	r0, [r7, #20]
 8005434:	f7ff ff90 	bl	8005358 <NVIC_EncodePriority>
 8005438:	4602      	mov	r2, r0
 800543a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ff5f 	bl	8005304 <__NVIC_SetPriority>
}
 8005446:	bf00      	nop
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	4603      	mov	r3, r0
 8005456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ff33 	bl	80052c8 <__NVIC_EnableIRQ>
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff ffa4 	bl	80053c0 <SysTick_Config>
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e147      	b.n	8005726 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fa3a 	bl	8004924 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0210 	bic.w	r2, r2, #16
 80054be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054c0:	f7ff fea2 	bl	8005208 <HAL_GetTick>
 80054c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054c6:	e012      	b.n	80054ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054c8:	f7ff fe9e 	bl	8005208 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b0a      	cmp	r3, #10
 80054d4:	d90b      	bls.n	80054ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2203      	movs	r2, #3
 80054e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e11b      	b.n	8005726 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d0e5      	beq.n	80054c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800550c:	f7ff fe7c 	bl	8005208 <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005512:	e012      	b.n	800553a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005514:	f7ff fe78 	bl	8005208 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b0a      	cmp	r3, #10
 8005520:	d90b      	bls.n	800553a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2203      	movs	r2, #3
 8005532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0f5      	b.n	8005726 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0e5      	beq.n	8005514 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0202 	orr.w	r2, r2, #2
 8005556:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a74      	ldr	r2, [pc, #464]	; (8005730 <HAL_FDCAN_Init+0x2ac>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d103      	bne.n	800556a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005562:	4a74      	ldr	r2, [pc, #464]	; (8005734 <HAL_FDCAN_Init+0x2b0>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	7c1b      	ldrb	r3, [r3, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d108      	bne.n	8005584 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005580:	619a      	str	r2, [r3, #24]
 8005582:	e007      	b.n	8005594 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005592:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	7c5b      	ldrb	r3, [r3, #17]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d108      	bne.n	80055ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055aa:	619a      	str	r2, [r3, #24]
 80055ac:	e007      	b.n	80055be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7c9b      	ldrb	r3, [r3, #18]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d108      	bne.n	80055d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055d4:	619a      	str	r2, [r3, #24]
 80055d6:	e007      	b.n	80055e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800560c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0210 	bic.w	r2, r2, #16
 800561c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d108      	bne.n	8005638 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0204 	orr.w	r2, r2, #4
 8005634:	619a      	str	r2, [r3, #24]
 8005636:	e02c      	b.n	8005692 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d028      	beq.n	8005692 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d01c      	beq.n	8005682 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005656:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0210 	orr.w	r2, r2, #16
 8005666:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d110      	bne.n	8005692 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0220 	orr.w	r2, r2, #32
 800567e:	619a      	str	r2, [r3, #24]
 8005680:	e007      	b.n	8005692 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0220 	orr.w	r2, r2, #32
 8005690:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	3b01      	subs	r3, #1
 8005698:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	3b01      	subs	r3, #1
 80056a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c6:	d115      	bne.n	80056f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	3b01      	subs	r3, #1
 80056d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	3b01      	subs	r3, #1
 80056de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80056e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	3b01      	subs	r3, #1
 80056ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80056f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fc3c 	bl	8005f88 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40006400 	.word	0x40006400
 8005734:	40006500 	.word	0x40006500

08005738 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005748:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d002      	beq.n	8005756 <HAL_FDCAN_ConfigFilter+0x1e>
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d13d      	bne.n	80057d2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d119      	bne.n	8005792 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800576a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005772:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e01d      	b.n	80057ce <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	075a      	lsls	r2, r3, #29
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	079a      	lsls	r2, r3, #30
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3304      	adds	r3, #4
 80057c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e006      	b.n	80057e0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d6:	f043 0202 	orr.w	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d110      	bne.n	8005822 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e006      	b.n	8005830 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	f043 0204 	orr.w	r2, r3, #4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d12c      	bne.n	80058ae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800585c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e023      	b.n	80058bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fbd2 	bl	8006034 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2101      	movs	r1, #1
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	fa01 f202 	lsl.w	r2, r1, r2
 800589c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80058a0:	2201      	movs	r2, #1
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	409a      	lsls	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e006      	b.n	80058bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b2:	f043 0208 	orr.w	r2, r3, #8
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b08b      	sub	sp, #44	; 0x2c
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058d8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80058da:	7efb      	ldrb	r3, [r7, #27]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f040 80bc 	bne.w	8005a5a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d121      	bne.n	800592c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0af      	b.n	8005a68 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
 800592a:	e020      	b.n	800596e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	2b00      	cmp	r3, #0
 800593a:	d107      	bne.n	800594c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e08d      	b.n	8005a68 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4413      	add	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	440b      	add	r3, r1
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d107      	bne.n	8005992 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	0c9b      	lsrs	r3, r3, #18
 8005988:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e005      	b.n	800599e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	3304      	adds	r3, #4
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	0e1b      	lsrs	r3, r3, #24
 80059f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0fda      	lsrs	r2, r3, #31
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	3304      	adds	r3, #4
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	e00a      	b.n	8005a28 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	441a      	add	r2, r3
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	440b      	add	r3, r1
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	3301      	adds	r3, #1
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	4a11      	ldr	r2, [pc, #68]	; (8005a74 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8005a30:	5cd3      	ldrb	r3, [r2, r3]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d3eb      	bcc.n	8005a12 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d105      	bne.n	8005a4c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005a4a:	e004      	b.n	8005a56 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e006      	b.n	8005a68 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	f043 0208 	orr.w	r2, r3, #8
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	372c      	adds	r7, #44	; 0x2c
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	08009cd4 	.word	0x08009cd4

08005a78 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a8a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d003      	beq.n	8005a9a <HAL_FDCAN_ActivateNotification+0x22>
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	f040 80c8 	bne.w	8005c2a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d03b      	beq.n	8005b2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d031      	beq.n	8005b2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d027      	beq.n	8005b2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01d      	beq.n	8005b2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d013      	beq.n	8005b2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d13b      	bne.n	8005bca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d131      	bne.n	8005bca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d127      	bne.n	8005bca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11d      	bne.n	8005bca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d113      	bne.n	8005bca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0202 	orr.w	r2, r2, #2
 8005bd8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e006      	b.n	8005c38 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2e:	f043 0202 	orr.w	r2, r3, #2
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c52:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c60:	4013      	ands	r3, r2
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c86:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8005c9e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005cb6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00d      	beq.n	8005cee <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d006      	beq.n	8005cee <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2240      	movs	r2, #64	; 0x40
 8005ce6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f92e 	bl	8005f4a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d014      	beq.n	8005d34 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d12:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005d2c:	6939      	ldr	r1, [r7, #16]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8ec 	bl	8005f0c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8b6 	bl	8005eb6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a3a      	ldr	r2, [r7, #32]
 8005d56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005d58:	6a39      	ldr	r1, [r7, #32]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fe fcc6 	bl	80046ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005d6e:	69f9      	ldr	r1, [r7, #28]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f8ab 	bl	8005ecc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f8a0 	bl	8005ee2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01a      	beq.n	8005de6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d013      	beq.n	8005de6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005dc6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2280      	movs	r2, #128	; 0x80
 8005ddc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f888 	bl	8005ef6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f888 	bl	8005f22 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005e36:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f87c 	bl	8005f36 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d011      	beq.n	8005e70 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005e7e:	6979      	ldr	r1, [r7, #20]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f876 	bl	8005f72 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f858 	bl	8005f5e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005eae:	bf00      	nop
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005f90:	4b27      	ldr	r3, [pc, #156]	; (8006030 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005f92:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	041a      	lsls	r2, r3, #16
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	061a      	lsls	r2, r3, #24
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e005      	b.n	8006016 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3304      	adds	r3, #4
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3f3      	bcc.n	800600a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	4000a400 	.word	0x4000a400

08006034 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006034:	b480      	push	{r7}
 8006036:	b089      	sub	sp, #36	; 0x24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006052:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800605a:	4313      	orrs	r3, r2
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e00a      	b.n	8006076 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006068:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800606e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006074:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006080:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006086:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800608c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	440b      	add	r3, r1
 80060a6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	3304      	adds	r3, #4
 80060b2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	3304      	adds	r3, #4
 80060be:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e020      	b.n	8006108 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	3303      	adds	r3, #3
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	3302      	adds	r3, #2
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	440b      	add	r3, r1
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060de:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	3301      	adds	r3, #1
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	440b      	add	r3, r1
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80060ec:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	440a      	add	r2, r1
 80060f4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80060f6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	3304      	adds	r3, #4
 8006100:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	3304      	adds	r3, #4
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	4a06      	ldr	r2, [pc, #24]	; (8006128 <FDCAN_CopyMessageToRAM+0xf4>)
 8006110:	5cd3      	ldrb	r3, [r2, r3]
 8006112:	461a      	mov	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4293      	cmp	r3, r2
 8006118:	d3d5      	bcc.n	80060c6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	3724      	adds	r7, #36	; 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	08009cd4 	.word	0x08009cd4

0800612c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800613a:	e15a      	b.n	80063f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	2101      	movs	r1, #1
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	4013      	ands	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 814c 	beq.w	80063ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	2b01      	cmp	r3, #1
 800615e:	d005      	beq.n	800616c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006168:	2b02      	cmp	r3, #2
 800616a:	d130      	bne.n	80061ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	2203      	movs	r2, #3
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4013      	ands	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061a2:	2201      	movs	r2, #1
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	43db      	mvns	r3, r3
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4013      	ands	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	091b      	lsrs	r3, r3, #4
 80061b8:	f003 0201 	and.w	r2, r3, #1
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d017      	beq.n	800620a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	2203      	movs	r2, #3
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4013      	ands	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d123      	bne.n	800625e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	08da      	lsrs	r2, r3, #3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3208      	adds	r2, #8
 800621e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	220f      	movs	r2, #15
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	08da      	lsrs	r2, r3, #3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3208      	adds	r2, #8
 8006258:	6939      	ldr	r1, [r7, #16]
 800625a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	2203      	movs	r2, #3
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	43db      	mvns	r3, r3
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4013      	ands	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0203 	and.w	r2, r3, #3
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80a6 	beq.w	80063ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a0:	4b5b      	ldr	r3, [pc, #364]	; (8006410 <HAL_GPIO_Init+0x2e4>)
 80062a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a4:	4a5a      	ldr	r2, [pc, #360]	; (8006410 <HAL_GPIO_Init+0x2e4>)
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	6613      	str	r3, [r2, #96]	; 0x60
 80062ac:	4b58      	ldr	r3, [pc, #352]	; (8006410 <HAL_GPIO_Init+0x2e4>)
 80062ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062b8:	4a56      	ldr	r2, [pc, #344]	; (8006414 <HAL_GPIO_Init+0x2e8>)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	089b      	lsrs	r3, r3, #2
 80062be:	3302      	adds	r3, #2
 80062c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	220f      	movs	r2, #15
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4013      	ands	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062e2:	d01f      	beq.n	8006324 <HAL_GPIO_Init+0x1f8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a4c      	ldr	r2, [pc, #304]	; (8006418 <HAL_GPIO_Init+0x2ec>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d019      	beq.n	8006320 <HAL_GPIO_Init+0x1f4>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a4b      	ldr	r2, [pc, #300]	; (800641c <HAL_GPIO_Init+0x2f0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <HAL_GPIO_Init+0x1f0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a4a      	ldr	r2, [pc, #296]	; (8006420 <HAL_GPIO_Init+0x2f4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00d      	beq.n	8006318 <HAL_GPIO_Init+0x1ec>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a49      	ldr	r2, [pc, #292]	; (8006424 <HAL_GPIO_Init+0x2f8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <HAL_GPIO_Init+0x1e8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a48      	ldr	r2, [pc, #288]	; (8006428 <HAL_GPIO_Init+0x2fc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d101      	bne.n	8006310 <HAL_GPIO_Init+0x1e4>
 800630c:	2305      	movs	r3, #5
 800630e:	e00a      	b.n	8006326 <HAL_GPIO_Init+0x1fa>
 8006310:	2306      	movs	r3, #6
 8006312:	e008      	b.n	8006326 <HAL_GPIO_Init+0x1fa>
 8006314:	2304      	movs	r3, #4
 8006316:	e006      	b.n	8006326 <HAL_GPIO_Init+0x1fa>
 8006318:	2303      	movs	r3, #3
 800631a:	e004      	b.n	8006326 <HAL_GPIO_Init+0x1fa>
 800631c:	2302      	movs	r3, #2
 800631e:	e002      	b.n	8006326 <HAL_GPIO_Init+0x1fa>
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <HAL_GPIO_Init+0x1fa>
 8006324:	2300      	movs	r3, #0
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	f002 0203 	and.w	r2, r2, #3
 800632c:	0092      	lsls	r2, r2, #2
 800632e:	4093      	lsls	r3, r2
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006336:	4937      	ldr	r1, [pc, #220]	; (8006414 <HAL_GPIO_Init+0x2e8>)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	089b      	lsrs	r3, r3, #2
 800633c:	3302      	adds	r3, #2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006344:	4b39      	ldr	r3, [pc, #228]	; (800642c <HAL_GPIO_Init+0x300>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	43db      	mvns	r3, r3
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4013      	ands	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006368:	4a30      	ldr	r2, [pc, #192]	; (800642c <HAL_GPIO_Init+0x300>)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800636e:	4b2f      	ldr	r3, [pc, #188]	; (800642c <HAL_GPIO_Init+0x300>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	43db      	mvns	r3, r3
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4013      	ands	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006392:	4a26      	ldr	r2, [pc, #152]	; (800642c <HAL_GPIO_Init+0x300>)
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <HAL_GPIO_Init+0x300>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4013      	ands	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <HAL_GPIO_Init+0x300>)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063c2:	4b1a      	ldr	r3, [pc, #104]	; (800642c <HAL_GPIO_Init+0x300>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	43db      	mvns	r3, r3
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4013      	ands	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063e6:	4a11      	ldr	r2, [pc, #68]	; (800642c <HAL_GPIO_Init+0x300>)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3301      	adds	r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f ae9d 	bne.w	800613c <HAL_GPIO_Init+0x10>
  }
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	40021000 	.word	0x40021000
 8006414:	40010000 	.word	0x40010000
 8006418:	48000400 	.word	0x48000400
 800641c:	48000800 	.word	0x48000800
 8006420:	48000c00 	.word	0x48000c00
 8006424:	48001000 	.word	0x48001000
 8006428:	48001400 	.word	0x48001400
 800642c:	40010400 	.word	0x40010400

08006430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
 800643c:	4613      	mov	r3, r2
 800643e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006440:	787b      	ldrb	r3, [r7, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006446:	887a      	ldrh	r2, [r7, #2]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800644c:	e002      	b.n	8006454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e081      	b.n	8006576 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fe faae 	bl	80049e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	; 0x24
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d107      	bne.n	80064da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d6:	609a      	str	r2, [r3, #8]
 80064d8:	e006      	b.n	80064e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d104      	bne.n	80064fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800651c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69d9      	ldr	r1, [r3, #28]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	4608      	mov	r0, r1
 800658a:	4611      	mov	r1, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4603      	mov	r3, r0
 8006590:	817b      	strh	r3, [r7, #10]
 8006592:	460b      	mov	r3, r1
 8006594:	813b      	strh	r3, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	f040 80f9 	bne.w	800679a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_I2C_Mem_Write+0x34>
 80065ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0ed      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_I2C_Mem_Write+0x4e>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0e6      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065d6:	f7fe fe17 	bl	8005208 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2319      	movs	r3, #25
 80065e2:	2201      	movs	r2, #1
 80065e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fac3 	bl	8006b74 <I2C_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0d1      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2221      	movs	r2, #33	; 0x21
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2240      	movs	r2, #64	; 0x40
 8006604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a3a      	ldr	r2, [r7, #32]
 8006612:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006618:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006620:	88f8      	ldrh	r0, [r7, #6]
 8006622:	893a      	ldrh	r2, [r7, #8]
 8006624:	8979      	ldrh	r1, [r7, #10]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	4603      	mov	r3, r0
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f9d3 	bl	80069dc <I2C_RequestMemoryWrite>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0a9      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2bff      	cmp	r3, #255	; 0xff
 8006650:	d90e      	bls.n	8006670 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	b2da      	uxtb	r2, r3
 800665e:	8979      	ldrh	r1, [r7, #10]
 8006660:	2300      	movs	r3, #0
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fc2b 	bl	8006ec4 <I2C_TransferConfig>
 800666e:	e00f      	b.n	8006690 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667e:	b2da      	uxtb	r2, r3
 8006680:	8979      	ldrh	r1, [r7, #10]
 8006682:	2300      	movs	r3, #0
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fc1a 	bl	8006ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 faad 	bl	8006bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e07b      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d034      	beq.n	8006748 <HAL_I2C_Mem_Write+0x1c8>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d130      	bne.n	8006748 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	2200      	movs	r2, #0
 80066ee:	2180      	movs	r1, #128	; 0x80
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fa3f 	bl	8006b74 <I2C_WaitOnFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e04d      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	2bff      	cmp	r3, #255	; 0xff
 8006708:	d90e      	bls.n	8006728 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	22ff      	movs	r2, #255	; 0xff
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	b2da      	uxtb	r2, r3
 8006716:	8979      	ldrh	r1, [r7, #10]
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fbcf 	bl	8006ec4 <I2C_TransferConfig>
 8006726:	e00f      	b.n	8006748 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	b2da      	uxtb	r2, r3
 8006738:	8979      	ldrh	r1, [r7, #10]
 800673a:	2300      	movs	r3, #0
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fbbe 	bl	8006ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d19e      	bne.n	8006690 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fa8c 	bl	8006c74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e01a      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2220      	movs	r2, #32
 800676c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <HAL_I2C_Mem_Write+0x224>)
 800677a:	400b      	ands	r3, r1
 800677c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	e000      	b.n	800679c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800679a:	2302      	movs	r3, #2
  }
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	fe00e800 	.word	0xfe00e800

080067a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	461a      	mov	r2, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	817b      	strh	r3, [r7, #10]
 80067ba:	460b      	mov	r3, r1
 80067bc:	813b      	strh	r3, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	f040 80fd 	bne.w	80069ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <HAL_I2C_Mem_Read+0x34>
 80067d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0f1      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_I2C_Mem_Read+0x4e>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e0ea      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067fe:	f7fe fd03 	bl	8005208 <HAL_GetTick>
 8006802:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2319      	movs	r3, #25
 800680a:	2201      	movs	r2, #1
 800680c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f9af 	bl	8006b74 <I2C_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0d5      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2222      	movs	r2, #34	; 0x22
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2240      	movs	r2, #64	; 0x40
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006840:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006848:	88f8      	ldrh	r0, [r7, #6]
 800684a:	893a      	ldrh	r2, [r7, #8]
 800684c:	8979      	ldrh	r1, [r7, #10]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	4603      	mov	r3, r0
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f913 	bl	8006a84 <I2C_RequestMemoryRead>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0ad      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	d90e      	bls.n	8006898 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	b2da      	uxtb	r2, r3
 8006886:	8979      	ldrh	r1, [r7, #10]
 8006888:	4b52      	ldr	r3, [pc, #328]	; (80069d4 <HAL_I2C_Mem_Read+0x22c>)
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fb17 	bl	8006ec4 <I2C_TransferConfig>
 8006896:	e00f      	b.n	80068b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	8979      	ldrh	r1, [r7, #10]
 80068aa:	4b4a      	ldr	r3, [pc, #296]	; (80069d4 <HAL_I2C_Mem_Read+0x22c>)
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 fb06 	bl	8006ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	2200      	movs	r2, #0
 80068c0:	2104      	movs	r1, #4
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f956 	bl	8006b74 <I2C_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e07c      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d034      	beq.n	8006978 <HAL_I2C_Mem_Read+0x1d0>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	2b00      	cmp	r3, #0
 8006914:	d130      	bne.n	8006978 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	2200      	movs	r2, #0
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f927 	bl	8006b74 <I2C_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e04d      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006934:	b29b      	uxth	r3, r3
 8006936:	2bff      	cmp	r3, #255	; 0xff
 8006938:	d90e      	bls.n	8006958 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	22ff      	movs	r2, #255	; 0xff
 800693e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006944:	b2da      	uxtb	r2, r3
 8006946:	8979      	ldrh	r1, [r7, #10]
 8006948:	2300      	movs	r3, #0
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 fab7 	bl	8006ec4 <I2C_TransferConfig>
 8006956:	e00f      	b.n	8006978 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006966:	b2da      	uxtb	r2, r3
 8006968:	8979      	ldrh	r1, [r7, #10]
 800696a:	2300      	movs	r3, #0
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 faa6 	bl	8006ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d19a      	bne.n	80068b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f974 	bl	8006c74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e01a      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2220      	movs	r2, #32
 800699c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_I2C_Mem_Read+0x230>)
 80069aa:	400b      	ands	r3, r1
 80069ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e000      	b.n	80069cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	80002400 	.word	0x80002400
 80069d8:	fe00e800 	.word	0xfe00e800

080069dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	4608      	mov	r0, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	461a      	mov	r2, r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	817b      	strh	r3, [r7, #10]
 80069ee:	460b      	mov	r3, r1
 80069f0:	813b      	strh	r3, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	8979      	ldrh	r1, [r7, #10]
 80069fc:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <I2C_RequestMemoryWrite+0xa4>)
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fa5d 	bl	8006ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	69b9      	ldr	r1, [r7, #24]
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f8f0 	bl	8006bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e02c      	b.n	8006a78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d105      	bne.n	8006a30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a24:	893b      	ldrh	r3, [r7, #8]
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a2e:	e015      	b.n	8006a5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f8d6 	bl	8006bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e012      	b.n	8006a78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a52:	893b      	ldrh	r3, [r7, #8]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2200      	movs	r2, #0
 8006a64:	2180      	movs	r1, #128	; 0x80
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f884 	bl	8006b74 <I2C_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	80002000 	.word	0x80002000

08006a84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	817b      	strh	r3, [r7, #10]
 8006a96:	460b      	mov	r3, r1
 8006a98:	813b      	strh	r3, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	8979      	ldrh	r1, [r7, #10]
 8006aa4:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <I2C_RequestMemoryRead+0xa4>)
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fa0a 	bl	8006ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	69b9      	ldr	r1, [r7, #24]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f89d 	bl	8006bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e02c      	b.n	8006b1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aca:	893b      	ldrh	r3, [r7, #8]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad4:	e015      	b.n	8006b02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ad6:	893b      	ldrh	r3, [r7, #8]
 8006ad8:	0a1b      	lsrs	r3, r3, #8
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	69b9      	ldr	r1, [r7, #24]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f883 	bl	8006bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e012      	b.n	8006b1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006af8:	893b      	ldrh	r3, [r7, #8]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2140      	movs	r1, #64	; 0x40
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f831 	bl	8006b74 <I2C_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	80002000 	.word	0x80002000

08006b2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d103      	bne.n	8006b4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2200      	movs	r2, #0
 8006b48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d007      	beq.n	8006b68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	619a      	str	r2, [r3, #24]
  }
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b84:	e022      	b.n	8006bcc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b8c:	d01e      	beq.n	8006bcc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8e:	f7fe fb3b 	bl	8005208 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d302      	bcc.n	8006ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d113      	bne.n	8006bcc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e00f      	b.n	8006bec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d0cd      	beq.n	8006b86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c00:	e02c      	b.n	8006c5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f870 	bl	8006cec <I2C_IsErrorOccurred>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e02a      	b.n	8006c6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c1c:	d01e      	beq.n	8006c5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1e:	f7fe faf3 	bl	8005208 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d113      	bne.n	8006c5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	f043 0220 	orr.w	r2, r3, #32
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e007      	b.n	8006c6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d1cb      	bne.n	8006c02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c80:	e028      	b.n	8006cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f830 	bl	8006cec <I2C_IsErrorOccurred>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e026      	b.n	8006ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c96:	f7fe fab7 	bl	8005208 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d302      	bcc.n	8006cac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d113      	bne.n	8006cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb0:	f043 0220 	orr.w	r2, r3, #32
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e007      	b.n	8006ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d1cf      	bne.n	8006c82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d075      	beq.n	8006e04 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2210      	movs	r2, #16
 8006d1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d20:	e056      	b.n	8006dd0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d28:	d052      	beq.n	8006dd0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d2a:	f7fe fa6d 	bl	8005208 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <I2C_IsErrorOccurred+0x54>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d147      	bne.n	8006dd0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d62:	d12e      	bne.n	8006dc2 <I2C_IsErrorOccurred+0xd6>
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6a:	d02a      	beq.n	8006dc2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006d6c:	7cfb      	ldrb	r3, [r7, #19]
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d027      	beq.n	8006dc2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d80:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d82:	f7fe fa41 	bl	8005208 <HAL_GetTick>
 8006d86:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d88:	e01b      	b.n	8006dc2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d8a:	f7fe fa3d 	bl	8005208 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b19      	cmp	r3, #25
 8006d96:	d914      	bls.n	8006dc2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9c:	f043 0220 	orr.w	r2, r3, #32
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d1dc      	bne.n	8006d8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d003      	beq.n	8006de6 <I2C_IsErrorOccurred+0xfa>
 8006dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d09d      	beq.n	8006d22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2220      	movs	r2, #32
 8006df4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	f043 0301 	orr.w	r3, r3, #1
 8006e1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	f043 0308 	orr.w	r3, r3, #8
 8006e3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	f043 0302 	orr.w	r3, r3, #2
 8006e60:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01c      	beq.n	8006eb4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fe56 	bl	8006b2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6859      	ldr	r1, [r3, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <I2C_IsErrorOccurred+0x1d4>)
 8006e8c:	400b      	ands	r3, r1
 8006e8e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	; 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	fe00e800 	.word	0xfe00e800

08006ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	607b      	str	r3, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	817b      	strh	r3, [r7, #10]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ed6:	897b      	ldrh	r3, [r7, #10]
 8006ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006edc:	7a7b      	ldrb	r3, [r7, #9]
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ee4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	0d5b      	lsrs	r3, r3, #21
 8006efe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <I2C_TransferConfig+0x60>)
 8006f04:	430b      	orrs	r3, r1
 8006f06:	43db      	mvns	r3, r3
 8006f08:	ea02 0103 	and.w	r1, r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	03ff63ff 	.word	0x03ff63ff

08006f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d138      	bne.n	8006fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e032      	b.n	8006fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e000      	b.n	8006fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d139      	bne.n	8007048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e033      	b.n	800704a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2224      	movs	r2, #36	; 0x24
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0201 	bic.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d141      	bne.n	80070ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007066:	4b4b      	ldr	r3, [pc, #300]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800706e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007072:	d131      	bne.n	80070d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007074:	4b47      	ldr	r3, [pc, #284]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800707a:	4a46      	ldr	r2, [pc, #280]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800707c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007084:	4b43      	ldr	r3, [pc, #268]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800708c:	4a41      	ldr	r2, [pc, #260]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007094:	4b40      	ldr	r3, [pc, #256]	; (8007198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2232      	movs	r2, #50	; 0x32
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	4a3f      	ldr	r2, [pc, #252]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070a0:	fba2 2303 	umull	r2, r3, r2, r3
 80070a4:	0c9b      	lsrs	r3, r3, #18
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070aa:	e002      	b.n	80070b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070b2:	4b38      	ldr	r3, [pc, #224]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070be:	d102      	bne.n	80070c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f2      	bne.n	80070ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070c6:	4b33      	ldr	r3, [pc, #204]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d2:	d158      	bne.n	8007186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e057      	b.n	8007188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070d8:	4b2e      	ldr	r3, [pc, #184]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070de:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80070e8:	e04d      	b.n	8007186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f0:	d141      	bne.n	8007176 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070f2:	4b28      	ldr	r3, [pc, #160]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fe:	d131      	bne.n	8007164 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007100:	4b24      	ldr	r3, [pc, #144]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007106:	4a23      	ldr	r2, [pc, #140]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800710c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007110:	4b20      	ldr	r3, [pc, #128]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007118:	4a1e      	ldr	r2, [pc, #120]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800711a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800711e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007120:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2232      	movs	r2, #50	; 0x32
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	4a1c      	ldr	r2, [pc, #112]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	0c9b      	lsrs	r3, r3, #18
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007136:	e002      	b.n	800713e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3b01      	subs	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800713e:	4b15      	ldr	r3, [pc, #84]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714a:	d102      	bne.n	8007152 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f2      	bne.n	8007138 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007152:	4b10      	ldr	r3, [pc, #64]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800715a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715e:	d112      	bne.n	8007186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e011      	b.n	8007188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007164:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716a:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800716c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007174:	e007      	b.n	8007186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007176:	4b07      	ldr	r3, [pc, #28]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800717e:	4a05      	ldr	r2, [pc, #20]	; (8007194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007184:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40007000 	.word	0x40007000
 8007198:	20000078 	.word	0x20000078
 800719c:	431bde83 	.word	0x431bde83

080071a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	4a04      	ldr	r2, [pc, #16]	; (80071bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071ae:	6093      	str	r3, [r2, #8]
}
 80071b0:	bf00      	nop
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40007000 	.word	0x40007000

080071c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e306      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d075      	beq.n	80072ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071de:	4b97      	ldr	r3, [pc, #604]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 030c 	and.w	r3, r3, #12
 80071e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071e8:	4b94      	ldr	r3, [pc, #592]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	d102      	bne.n	80071fe <HAL_RCC_OscConfig+0x3e>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d002      	beq.n	8007204 <HAL_RCC_OscConfig+0x44>
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d10b      	bne.n	800721c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007204:	4b8d      	ldr	r3, [pc, #564]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d05b      	beq.n	80072c8 <HAL_RCC_OscConfig+0x108>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d157      	bne.n	80072c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e2e1      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d106      	bne.n	8007234 <HAL_RCC_OscConfig+0x74>
 8007226:	4b85      	ldr	r3, [pc, #532]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a84      	ldr	r2, [pc, #528]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800722c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e01d      	b.n	8007270 <HAL_RCC_OscConfig+0xb0>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800723c:	d10c      	bne.n	8007258 <HAL_RCC_OscConfig+0x98>
 800723e:	4b7f      	ldr	r3, [pc, #508]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a7e      	ldr	r2, [pc, #504]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	4b7c      	ldr	r3, [pc, #496]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7b      	ldr	r2, [pc, #492]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	e00b      	b.n	8007270 <HAL_RCC_OscConfig+0xb0>
 8007258:	4b78      	ldr	r3, [pc, #480]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a77      	ldr	r2, [pc, #476]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800725e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	4b75      	ldr	r3, [pc, #468]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a74      	ldr	r2, [pc, #464]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800726a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d013      	beq.n	80072a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fd ffc6 	bl	8005208 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007280:	f7fd ffc2 	bl	8005208 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b64      	cmp	r3, #100	; 0x64
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e2a6      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007292:	4b6a      	ldr	r3, [pc, #424]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <HAL_RCC_OscConfig+0xc0>
 800729e:	e014      	b.n	80072ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a0:	f7fd ffb2 	bl	8005208 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072a8:	f7fd ffae 	bl	8005208 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b64      	cmp	r3, #100	; 0x64
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e292      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ba:	4b60      	ldr	r3, [pc, #384]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f0      	bne.n	80072a8 <HAL_RCC_OscConfig+0xe8>
 80072c6:	e000      	b.n	80072ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d075      	beq.n	80073c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072d6:	4b59      	ldr	r3, [pc, #356]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072e0:	4b56      	ldr	r3, [pc, #344]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b0c      	cmp	r3, #12
 80072ee:	d102      	bne.n	80072f6 <HAL_RCC_OscConfig+0x136>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d002      	beq.n	80072fc <HAL_RCC_OscConfig+0x13c>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d11f      	bne.n	800733c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072fc:	4b4f      	ldr	r3, [pc, #316]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_RCC_OscConfig+0x154>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e265      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007314:	4b49      	ldr	r3, [pc, #292]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	061b      	lsls	r3, r3, #24
 8007322:	4946      	ldr	r1, [pc, #280]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007324:	4313      	orrs	r3, r2
 8007326:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007328:	4b45      	ldr	r3, [pc, #276]	; (8007440 <HAL_RCC_OscConfig+0x280>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f7fd ff1f 	bl	8005170 <HAL_InitTick>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d043      	beq.n	80073c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e251      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d023      	beq.n	800738c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007344:	4b3d      	ldr	r3, [pc, #244]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a3c      	ldr	r2, [pc, #240]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800734a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007350:	f7fd ff5a 	bl	8005208 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007358:	f7fd ff56 	bl	8005208 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e23a      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800736a:	4b34      	ldr	r3, [pc, #208]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007376:	4b31      	ldr	r3, [pc, #196]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	061b      	lsls	r3, r3, #24
 8007384:	492d      	ldr	r1, [pc, #180]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007386:	4313      	orrs	r3, r2
 8007388:	604b      	str	r3, [r1, #4]
 800738a:	e01a      	b.n	80073c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800738c:	4b2b      	ldr	r3, [pc, #172]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2a      	ldr	r2, [pc, #168]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007398:	f7fd ff36 	bl	8005208 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073a0:	f7fd ff32 	bl	8005208 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e216      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073b2:	4b22      	ldr	r3, [pc, #136]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x1e0>
 80073be:	e000      	b.n	80073c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d041      	beq.n	8007452 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01c      	beq.n	8007410 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073d6:	4b19      	ldr	r3, [pc, #100]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80073d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073dc:	4a17      	ldr	r2, [pc, #92]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e6:	f7fd ff0f 	bl	8005208 <HAL_GetTick>
 80073ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ee:	f7fd ff0b 	bl	8005208 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e1ef      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007400:	4b0e      	ldr	r3, [pc, #56]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0ef      	beq.n	80073ee <HAL_RCC_OscConfig+0x22e>
 800740e:	e020      	b.n	8007452 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007416:	4a09      	ldr	r2, [pc, #36]	; (800743c <HAL_RCC_OscConfig+0x27c>)
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007420:	f7fd fef2 	bl	8005208 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007426:	e00d      	b.n	8007444 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007428:	f7fd feee 	bl	8005208 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d906      	bls.n	8007444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e1d2      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
 800743a:	bf00      	nop
 800743c:	40021000 	.word	0x40021000
 8007440:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007444:	4b8c      	ldr	r3, [pc, #560]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1ea      	bne.n	8007428 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 80a6 	beq.w	80075ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007460:	2300      	movs	r3, #0
 8007462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007464:	4b84      	ldr	r3, [pc, #528]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <HAL_RCC_OscConfig+0x2b4>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <HAL_RCC_OscConfig+0x2b6>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00d      	beq.n	8007496 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800747a:	4b7f      	ldr	r3, [pc, #508]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 800747c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747e:	4a7e      	ldr	r2, [pc, #504]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007484:	6593      	str	r3, [r2, #88]	; 0x58
 8007486:	4b7c      	ldr	r3, [pc, #496]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007492:	2301      	movs	r3, #1
 8007494:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007496:	4b79      	ldr	r3, [pc, #484]	; (800767c <HAL_RCC_OscConfig+0x4bc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d118      	bne.n	80074d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074a2:	4b76      	ldr	r3, [pc, #472]	; (800767c <HAL_RCC_OscConfig+0x4bc>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a75      	ldr	r2, [pc, #468]	; (800767c <HAL_RCC_OscConfig+0x4bc>)
 80074a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ae:	f7fd feab 	bl	8005208 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074b6:	f7fd fea7 	bl	8005208 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e18b      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074c8:	4b6c      	ldr	r3, [pc, #432]	; (800767c <HAL_RCC_OscConfig+0x4bc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d108      	bne.n	80074ee <HAL_RCC_OscConfig+0x32e>
 80074dc:	4b66      	ldr	r3, [pc, #408]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	4a65      	ldr	r2, [pc, #404]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074ec:	e024      	b.n	8007538 <HAL_RCC_OscConfig+0x378>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	d110      	bne.n	8007518 <HAL_RCC_OscConfig+0x358>
 80074f6:	4b60      	ldr	r3, [pc, #384]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80074f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fc:	4a5e      	ldr	r2, [pc, #376]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80074fe:	f043 0304 	orr.w	r3, r3, #4
 8007502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007506:	4b5c      	ldr	r3, [pc, #368]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750c:	4a5a      	ldr	r2, [pc, #360]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007516:	e00f      	b.n	8007538 <HAL_RCC_OscConfig+0x378>
 8007518:	4b57      	ldr	r3, [pc, #348]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751e:	4a56      	ldr	r2, [pc, #344]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007528:	4b53      	ldr	r3, [pc, #332]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752e:	4a52      	ldr	r2, [pc, #328]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007530:	f023 0304 	bic.w	r3, r3, #4
 8007534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d016      	beq.n	800756e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007540:	f7fd fe62 	bl	8005208 <HAL_GetTick>
 8007544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007546:	e00a      	b.n	800755e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007548:	f7fd fe5e 	bl	8005208 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	f241 3288 	movw	r2, #5000	; 0x1388
 8007556:	4293      	cmp	r3, r2
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e140      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800755e:	4b46      	ldr	r3, [pc, #280]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0ed      	beq.n	8007548 <HAL_RCC_OscConfig+0x388>
 800756c:	e015      	b.n	800759a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756e:	f7fd fe4b 	bl	8005208 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007574:	e00a      	b.n	800758c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007576:	f7fd fe47 	bl	8005208 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	f241 3288 	movw	r2, #5000	; 0x1388
 8007584:	4293      	cmp	r3, r2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e129      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800758c:	4b3a      	ldr	r3, [pc, #232]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1ed      	bne.n	8007576 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800759a:	7ffb      	ldrb	r3, [r7, #31]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d105      	bne.n	80075ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075a0:	4b35      	ldr	r3, [pc, #212]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80075a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a4:	4a34      	ldr	r2, [pc, #208]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80075a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d03c      	beq.n	8007632 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01c      	beq.n	80075fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80075c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075c6:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d0:	f7fd fe1a 	bl	8005208 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075d8:	f7fd fe16 	bl	8005208 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e0fa      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075ea:	4b23      	ldr	r3, [pc, #140]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80075ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0ef      	beq.n	80075d8 <HAL_RCC_OscConfig+0x418>
 80075f8:	e01b      	b.n	8007632 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075fa:	4b1f      	ldr	r3, [pc, #124]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 80075fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007600:	4a1d      	ldr	r2, [pc, #116]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760a:	f7fd fdfd 	bl	8005208 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007612:	f7fd fdf9 	bl	8005208 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e0dd      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007624:	4b14      	ldr	r3, [pc, #80]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1ef      	bne.n	8007612 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 80d1 	beq.w	80077de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 030c 	and.w	r3, r3, #12
 8007644:	2b0c      	cmp	r3, #12
 8007646:	f000 808b 	beq.w	8007760 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d15e      	bne.n	8007710 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a08      	ldr	r2, [pc, #32]	; (8007678 <HAL_RCC_OscConfig+0x4b8>)
 8007658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800765c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fd fdd3 	bl	8005208 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007664:	e00c      	b.n	8007680 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007666:	f7fd fdcf 	bl	8005208 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d905      	bls.n	8007680 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e0b3      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
 8007678:	40021000 	.word	0x40021000
 800767c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007680:	4b59      	ldr	r3, [pc, #356]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1ec      	bne.n	8007666 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800768c:	4b56      	ldr	r3, [pc, #344]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	4b56      	ldr	r3, [pc, #344]	; (80077ec <HAL_RCC_OscConfig+0x62c>)
 8007692:	4013      	ands	r3, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6a11      	ldr	r1, [r2, #32]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800769c:	3a01      	subs	r2, #1
 800769e:	0112      	lsls	r2, r2, #4
 80076a0:	4311      	orrs	r1, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80076a6:	0212      	lsls	r2, r2, #8
 80076a8:	4311      	orrs	r1, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076ae:	0852      	lsrs	r2, r2, #1
 80076b0:	3a01      	subs	r2, #1
 80076b2:	0552      	lsls	r2, r2, #21
 80076b4:	4311      	orrs	r1, r2
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076ba:	0852      	lsrs	r2, r2, #1
 80076bc:	3a01      	subs	r2, #1
 80076be:	0652      	lsls	r2, r2, #25
 80076c0:	4311      	orrs	r1, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076c6:	06d2      	lsls	r2, r2, #27
 80076c8:	430a      	orrs	r2, r1
 80076ca:	4947      	ldr	r1, [pc, #284]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076d0:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a44      	ldr	r2, [pc, #272]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 80076d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076dc:	4b42      	ldr	r3, [pc, #264]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	4a41      	ldr	r2, [pc, #260]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 80076e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e8:	f7fd fd8e 	bl	8005208 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f0:	f7fd fd8a 	bl	8005208 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e06e      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007702:	4b39      	ldr	r3, [pc, #228]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCC_OscConfig+0x530>
 800770e:	e066      	b.n	80077de <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007710:	4b35      	ldr	r3, [pc, #212]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a34      	ldr	r2, [pc, #208]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 8007716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800771a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800771c:	4b32      	ldr	r3, [pc, #200]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	4a31      	ldr	r2, [pc, #196]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 8007722:	f023 0303 	bic.w	r3, r3, #3
 8007726:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007728:	4b2f      	ldr	r3, [pc, #188]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4a2e      	ldr	r2, [pc, #184]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 800772e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fd fd66 	bl	8005208 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007740:	f7fd fd62 	bl	8005208 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e046      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007752:	4b25      	ldr	r3, [pc, #148]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f0      	bne.n	8007740 <HAL_RCC_OscConfig+0x580>
 800775e:	e03e      	b.n	80077de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e039      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800776c:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <HAL_RCC_OscConfig+0x628>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f003 0203 	and.w	r2, r3, #3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	429a      	cmp	r2, r3
 800777e:	d12c      	bne.n	80077da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	3b01      	subs	r3, #1
 800778c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778e:	429a      	cmp	r2, r3
 8007790:	d123      	bne.n	80077da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800779e:	429a      	cmp	r2, r3
 80077a0:	d11b      	bne.n	80077da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d113      	bne.n	80077da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	3b01      	subs	r3, #1
 80077c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d109      	bne.n	80077da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	3b01      	subs	r3, #1
 80077d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d001      	beq.n	80077de <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40021000 	.word	0x40021000
 80077ec:	019f800c 	.word	0x019f800c

080077f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e11e      	b.n	8007a46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007808:	4b91      	ldr	r3, [pc, #580]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d910      	bls.n	8007838 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007816:	4b8e      	ldr	r3, [pc, #568]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f023 020f 	bic.w	r2, r3, #15
 800781e:	498c      	ldr	r1, [pc, #560]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	4313      	orrs	r3, r2
 8007824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007826:	4b8a      	ldr	r3, [pc, #552]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d001      	beq.n	8007838 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e106      	b.n	8007a46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d073      	beq.n	800792c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b03      	cmp	r3, #3
 800784a:	d129      	bne.n	80078a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800784c:	4b81      	ldr	r3, [pc, #516]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0f4      	b.n	8007a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800785c:	f000 f99e 	bl	8007b9c <RCC_GetSysClockFreqFromPLLSource>
 8007860:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4a7c      	ldr	r2, [pc, #496]	; (8007a58 <HAL_RCC_ClockConfig+0x268>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d93f      	bls.n	80078ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800786a:	4b7a      	ldr	r3, [pc, #488]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800787e:	2b00      	cmp	r3, #0
 8007880:	d033      	beq.n	80078ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007886:	2b00      	cmp	r3, #0
 8007888:	d12f      	bne.n	80078ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800788a:	4b72      	ldr	r3, [pc, #456]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007892:	4a70      	ldr	r2, [pc, #448]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 8007894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007898:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	e024      	b.n	80078ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d107      	bne.n	80078b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078a8:	4b6a      	ldr	r3, [pc, #424]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e0c6      	b.n	8007a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078b8:	4b66      	ldr	r3, [pc, #408]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e0be      	b.n	8007a46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80078c8:	f000 f8ce 	bl	8007a68 <HAL_RCC_GetSysClockFreq>
 80078cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4a61      	ldr	r2, [pc, #388]	; (8007a58 <HAL_RCC_ClockConfig+0x268>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d909      	bls.n	80078ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078d6:	4b5f      	ldr	r3, [pc, #380]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078de:	4a5d      	ldr	r2, [pc, #372]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80078e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078ea:	4b5a      	ldr	r3, [pc, #360]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f023 0203 	bic.w	r2, r3, #3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4957      	ldr	r1, [pc, #348]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fc:	f7fd fc84 	bl	8005208 <HAL_GetTick>
 8007900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007902:	e00a      	b.n	800791a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007904:	f7fd fc80 	bl	8005208 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007912:	4293      	cmp	r3, r2
 8007914:	d901      	bls.n	800791a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e095      	b.n	8007a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800791a:	4b4e      	ldr	r3, [pc, #312]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 020c 	and.w	r2, r3, #12
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	429a      	cmp	r2, r3
 800792a:	d1eb      	bne.n	8007904 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d023      	beq.n	8007980 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007944:	4b43      	ldr	r3, [pc, #268]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	4a42      	ldr	r2, [pc, #264]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800794a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800794e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800795c:	4b3d      	ldr	r3, [pc, #244]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007964:	4a3b      	ldr	r2, [pc, #236]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 8007966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800796a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800796c:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	4936      	ldr	r1, [pc, #216]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800797a:	4313      	orrs	r3, r2
 800797c:	608b      	str	r3, [r1, #8]
 800797e:	e008      	b.n	8007992 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d105      	bne.n	8007992 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007986:	4b33      	ldr	r3, [pc, #204]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	4a32      	ldr	r2, [pc, #200]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 800798c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007990:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007992:	4b2f      	ldr	r3, [pc, #188]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d21d      	bcs.n	80079dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a0:	4b2b      	ldr	r3, [pc, #172]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f023 020f 	bic.w	r2, r3, #15
 80079a8:	4929      	ldr	r1, [pc, #164]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80079b0:	f7fd fc2a 	bl	8005208 <HAL_GetTick>
 80079b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b6:	e00a      	b.n	80079ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079b8:	f7fd fc26 	bl	8005208 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e03b      	b.n	8007a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ce:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <HAL_RCC_ClockConfig+0x260>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d1ed      	bne.n	80079b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d008      	beq.n	80079fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	4917      	ldr	r1, [pc, #92]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0308 	and.w	r3, r3, #8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	490f      	ldr	r1, [pc, #60]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a1a:	f000 f825 	bl	8007a68 <HAL_RCC_GetSysClockFreq>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <HAL_RCC_ClockConfig+0x264>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	091b      	lsrs	r3, r3, #4
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	490c      	ldr	r1, [pc, #48]	; (8007a5c <HAL_RCC_ClockConfig+0x26c>)
 8007a2c:	5ccb      	ldrb	r3, [r1, r3]
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	fa22 f303 	lsr.w	r3, r2, r3
 8007a36:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <HAL_RCC_ClockConfig+0x270>)
 8007a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a3a:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <HAL_RCC_ClockConfig+0x274>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd fb96 	bl	8005170 <HAL_InitTick>
 8007a44:	4603      	mov	r3, r0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	40022000 	.word	0x40022000
 8007a54:	40021000 	.word	0x40021000
 8007a58:	04c4b400 	.word	0x04c4b400
 8007a5c:	08009cbc 	.word	0x08009cbc
 8007a60:	20000078 	.word	0x20000078
 8007a64:	2000007c 	.word	0x2000007c

08007a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a6e:	4b2c      	ldr	r3, [pc, #176]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 030c 	and.w	r3, r3, #12
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d102      	bne.n	8007a80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a7a:	4b2a      	ldr	r3, [pc, #168]	; (8007b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e047      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a80:	4b27      	ldr	r3, [pc, #156]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 030c 	and.w	r3, r3, #12
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d102      	bne.n	8007a92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a8c:	4b26      	ldr	r3, [pc, #152]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	e03e      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a92:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f003 030c 	and.w	r3, r3, #12
 8007a9a:	2b0c      	cmp	r3, #12
 8007a9c:	d136      	bne.n	8007b0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a9e:	4b20      	ldr	r3, [pc, #128]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007aa8:	4b1d      	ldr	r3, [pc, #116]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	091b      	lsrs	r3, r3, #4
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d10c      	bne.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007abc:	4a1a      	ldr	r2, [pc, #104]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	4a16      	ldr	r2, [pc, #88]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ac6:	68d2      	ldr	r2, [r2, #12]
 8007ac8:	0a12      	lsrs	r2, r2, #8
 8007aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	617b      	str	r3, [r7, #20]
      break;
 8007ad4:	e00c      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ad6:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ade:	4a10      	ldr	r2, [pc, #64]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ae0:	68d2      	ldr	r2, [r2, #12]
 8007ae2:	0a12      	lsrs	r2, r2, #8
 8007ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ae8:	fb02 f303 	mul.w	r3, r2, r3
 8007aec:	617b      	str	r3, [r7, #20]
      break;
 8007aee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	0e5b      	lsrs	r3, r3, #25
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	3301      	adds	r3, #1
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	e001      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007b10:	693b      	ldr	r3, [r7, #16]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	371c      	adds	r7, #28
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	40021000 	.word	0x40021000
 8007b24:	00f42400 	.word	0x00f42400
 8007b28:	016e3600 	.word	0x016e3600

08007b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b32:	681b      	ldr	r3, [r3, #0]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000078 	.word	0x20000078

08007b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b48:	f7ff fff0 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	4904      	ldr	r1, [pc, #16]	; (8007b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b5a:	5ccb      	ldrb	r3, [r1, r3]
 8007b5c:	f003 031f 	and.w	r3, r3, #31
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40021000 	.word	0x40021000
 8007b6c:	08009ccc 	.word	0x08009ccc

08007b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007b74:	f7ff ffda 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	0adb      	lsrs	r3, r3, #11
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	4904      	ldr	r1, [pc, #16]	; (8007b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b86:	5ccb      	ldrb	r3, [r1, r3]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40021000 	.word	0x40021000
 8007b98:	08009ccc 	.word	0x08009ccc

08007b9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ba2:	4b1e      	ldr	r3, [pc, #120]	; (8007c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	091b      	lsrs	r3, r3, #4
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d10c      	bne.n	8007bda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bc0:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc8:	4a14      	ldr	r2, [pc, #80]	; (8007c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bca:	68d2      	ldr	r2, [r2, #12]
 8007bcc:	0a12      	lsrs	r2, r2, #8
 8007bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
 8007bd6:	617b      	str	r3, [r7, #20]
    break;
 8007bd8:	e00c      	b.n	8007bf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bda:	4a12      	ldr	r2, [pc, #72]	; (8007c24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be2:	4a0e      	ldr	r2, [pc, #56]	; (8007c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007be4:	68d2      	ldr	r2, [r2, #12]
 8007be6:	0a12      	lsrs	r2, r2, #8
 8007be8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
 8007bf0:	617b      	str	r3, [r7, #20]
    break;
 8007bf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	0e5b      	lsrs	r3, r3, #25
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	3301      	adds	r3, #1
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007c0e:	687b      	ldr	r3, [r7, #4]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	016e3600 	.word	0x016e3600
 8007c24:	00f42400 	.word	0x00f42400

08007c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c30:	2300      	movs	r3, #0
 8007c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c34:	2300      	movs	r3, #0
 8007c36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8098 	beq.w	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c46:	2300      	movs	r3, #0
 8007c48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c4a:	4b43      	ldr	r3, [pc, #268]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c56:	4b40      	ldr	r3, [pc, #256]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5a:	4a3f      	ldr	r2, [pc, #252]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c60:	6593      	str	r3, [r2, #88]	; 0x58
 8007c62:	4b3d      	ldr	r3, [pc, #244]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6a:	60bb      	str	r3, [r7, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c72:	4b3a      	ldr	r3, [pc, #232]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a39      	ldr	r2, [pc, #228]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c7e:	f7fd fac3 	bl	8005208 <HAL_GetTick>
 8007c82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c84:	e009      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c86:	f7fd fabf 	bl	8005208 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d902      	bls.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	74fb      	strb	r3, [r7, #19]
        break;
 8007c98:	e005      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c9a:	4b30      	ldr	r3, [pc, #192]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0ef      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ca6:	7cfb      	ldrb	r3, [r7, #19]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d159      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007cac:	4b2a      	ldr	r3, [pc, #168]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01e      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d019      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cc8:	4b23      	ldr	r3, [pc, #140]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cd4:	4b20      	ldr	r3, [pc, #128]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cda:	4a1f      	ldr	r2, [pc, #124]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ce4:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cea:	4a1b      	ldr	r2, [pc, #108]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cf4:	4a18      	ldr	r2, [pc, #96]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d016      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d06:	f7fd fa7f 	bl	8005208 <HAL_GetTick>
 8007d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d0c:	e00b      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d0e:	f7fd fa7b 	bl	8005208 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d902      	bls.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	74fb      	strb	r3, [r7, #19]
            break;
 8007d24:	e006      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0ec      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d34:	7cfb      	ldrb	r3, [r7, #19]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10b      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	4903      	ldr	r1, [pc, #12]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d50:	e008      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d52:	7cfb      	ldrb	r3, [r7, #19]
 8007d54:	74bb      	strb	r3, [r7, #18]
 8007d56:	e005      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d58:	40021000 	.word	0x40021000
 8007d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d60:	7cfb      	ldrb	r3, [r7, #19]
 8007d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d64:	7c7b      	ldrb	r3, [r7, #17]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d105      	bne.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d6a:	4ba6      	ldr	r3, [pc, #664]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6e:	4aa5      	ldr	r2, [pc, #660]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d82:	4ba0      	ldr	r3, [pc, #640]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d88:	f023 0203 	bic.w	r2, r3, #3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	499c      	ldr	r1, [pc, #624]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00a      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007da4:	4b97      	ldr	r3, [pc, #604]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	f023 020c 	bic.w	r2, r3, #12
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	4994      	ldr	r1, [pc, #592]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dc6:	4b8f      	ldr	r3, [pc, #572]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	498b      	ldr	r1, [pc, #556]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007de8:	4b86      	ldr	r3, [pc, #536]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	4983      	ldr	r1, [pc, #524]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e0a:	4b7e      	ldr	r3, [pc, #504]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	497a      	ldr	r1, [pc, #488]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e2c:	4b75      	ldr	r3, [pc, #468]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	4972      	ldr	r1, [pc, #456]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e4e:	4b6d      	ldr	r3, [pc, #436]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	4969      	ldr	r1, [pc, #420]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e70:	4b64      	ldr	r3, [pc, #400]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	4961      	ldr	r1, [pc, #388]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e92:	4b5c      	ldr	r3, [pc, #368]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	4958      	ldr	r1, [pc, #352]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d015      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eb4:	4b53      	ldr	r3, [pc, #332]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	4950      	ldr	r1, [pc, #320]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed2:	d105      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed4:	4b4b      	ldr	r3, [pc, #300]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	4a4a      	ldr	r2, [pc, #296]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ede:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d015      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007eec:	4b45      	ldr	r3, [pc, #276]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	4942      	ldr	r1, [pc, #264]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f0a:	d105      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f0c:	4b3d      	ldr	r3, [pc, #244]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	4a3c      	ldr	r2, [pc, #240]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d015      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f24:	4b37      	ldr	r3, [pc, #220]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	4934      	ldr	r1, [pc, #208]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f42:	d105      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f44:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4a2e      	ldr	r2, [pc, #184]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d015      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f5c:	4b29      	ldr	r3, [pc, #164]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6a:	4926      	ldr	r1, [pc, #152]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f7a:	d105      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f7c:	4b21      	ldr	r3, [pc, #132]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4a20      	ldr	r2, [pc, #128]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d015      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f94:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	4918      	ldr	r1, [pc, #96]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fb2:	d105      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fb4:	4b13      	ldr	r3, [pc, #76]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	4a12      	ldr	r2, [pc, #72]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d015      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	490a      	ldr	r1, [pc, #40]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fea:	d105      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	4a04      	ldr	r2, [pc, #16]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ff8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40021000 	.word	0x40021000

08008008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e09d      	b.n	8008156 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d108      	bne.n	8008034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800802a:	d009      	beq.n	8008040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	61da      	str	r2, [r3, #28]
 8008032:	e005      	b.n	8008040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fc fd76 	bl	8004b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008076:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008080:	d902      	bls.n	8008088 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e002      	b.n	800808e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800808c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008096:	d007      	beq.n	80080a8 <HAL_SPI_Init+0xa0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080a0:	d002      	beq.n	80080a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ea:	ea42 0103 	orr.w	r1, r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	f003 0204 	and.w	r2, r3, #4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008124:	ea42 0103 	orr.w	r1, r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69da      	ldr	r2, [r3, #28]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008144:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e049      	b.n	8008204 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fc fd91 	bl	8004cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f000 faa1 	bl	80086e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e049      	b.n	80082b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d106      	bne.n	8008238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7fc fccc 	bl	8004bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3304      	adds	r3, #4
 8008248:	4619      	mov	r1, r3
 800824a:	4610      	mov	r0, r2
 800824c:	f000 fa4a 	bl	80086e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <HAL_TIM_PWM_Start+0x24>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	bf14      	ite	ne
 80082d8:	2301      	movne	r3, #1
 80082da:	2300      	moveq	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	e03c      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d109      	bne.n	80082fa <HAL_TIM_PWM_Start+0x3e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	bf14      	ite	ne
 80082f2:	2301      	movne	r3, #1
 80082f4:	2300      	moveq	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	e02f      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d109      	bne.n	8008314 <HAL_TIM_PWM_Start+0x58>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b01      	cmp	r3, #1
 800830a:	bf14      	ite	ne
 800830c:	2301      	movne	r3, #1
 800830e:	2300      	moveq	r3, #0
 8008310:	b2db      	uxtb	r3, r3
 8008312:	e022      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b0c      	cmp	r3, #12
 8008318:	d109      	bne.n	800832e <HAL_TIM_PWM_Start+0x72>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b01      	cmp	r3, #1
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	e015      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b10      	cmp	r3, #16
 8008332:	d109      	bne.n	8008348 <HAL_TIM_PWM_Start+0x8c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	bf14      	ite	ne
 8008340:	2301      	movne	r3, #1
 8008342:	2300      	moveq	r3, #0
 8008344:	b2db      	uxtb	r3, r3
 8008346:	e008      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b01      	cmp	r3, #1
 8008352:	bf14      	ite	ne
 8008354:	2301      	movne	r3, #1
 8008356:	2300      	moveq	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e097      	b.n	8008492 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <HAL_TIM_PWM_Start+0xb6>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008370:	e023      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b04      	cmp	r3, #4
 8008376:	d104      	bne.n	8008382 <HAL_TIM_PWM_Start+0xc6>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008380:	e01b      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d104      	bne.n	8008392 <HAL_TIM_PWM_Start+0xd6>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008390:	e013      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b0c      	cmp	r3, #12
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_PWM_Start+0xe6>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083a0:	e00b      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_PWM_Start+0xf6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083b0:	e003      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2201      	movs	r2, #1
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fd14 	bl	8008df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a33      	ldr	r2, [pc, #204]	; (800849c <HAL_TIM_PWM_Start+0x1e0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <HAL_TIM_PWM_Start+0x13e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a32      	ldr	r2, [pc, #200]	; (80084a0 <HAL_TIM_PWM_Start+0x1e4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00e      	beq.n	80083fa <HAL_TIM_PWM_Start+0x13e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a30      	ldr	r2, [pc, #192]	; (80084a4 <HAL_TIM_PWM_Start+0x1e8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d009      	beq.n	80083fa <HAL_TIM_PWM_Start+0x13e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2f      	ldr	r2, [pc, #188]	; (80084a8 <HAL_TIM_PWM_Start+0x1ec>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d004      	beq.n	80083fa <HAL_TIM_PWM_Start+0x13e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a2d      	ldr	r2, [pc, #180]	; (80084ac <HAL_TIM_PWM_Start+0x1f0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d101      	bne.n	80083fe <HAL_TIM_PWM_Start+0x142>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <HAL_TIM_PWM_Start+0x144>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d007      	beq.n	8008414 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008412:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a20      	ldr	r2, [pc, #128]	; (800849c <HAL_TIM_PWM_Start+0x1e0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d018      	beq.n	8008450 <HAL_TIM_PWM_Start+0x194>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008426:	d013      	beq.n	8008450 <HAL_TIM_PWM_Start+0x194>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a20      	ldr	r2, [pc, #128]	; (80084b0 <HAL_TIM_PWM_Start+0x1f4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00e      	beq.n	8008450 <HAL_TIM_PWM_Start+0x194>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1f      	ldr	r2, [pc, #124]	; (80084b4 <HAL_TIM_PWM_Start+0x1f8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d009      	beq.n	8008450 <HAL_TIM_PWM_Start+0x194>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a17      	ldr	r2, [pc, #92]	; (80084a0 <HAL_TIM_PWM_Start+0x1e4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d004      	beq.n	8008450 <HAL_TIM_PWM_Start+0x194>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a16      	ldr	r2, [pc, #88]	; (80084a4 <HAL_TIM_PWM_Start+0x1e8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d115      	bne.n	800847c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	4b18      	ldr	r3, [pc, #96]	; (80084b8 <HAL_TIM_PWM_Start+0x1fc>)
 8008458:	4013      	ands	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b06      	cmp	r3, #6
 8008460:	d015      	beq.n	800848e <HAL_TIM_PWM_Start+0x1d2>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008468:	d011      	beq.n	800848e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0201 	orr.w	r2, r2, #1
 8008478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800847a:	e008      	b.n	800848e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	e000      	b.n	8008490 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800848e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40012c00 	.word	0x40012c00
 80084a0:	40013400 	.word	0x40013400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	00010007 	.word	0x00010007

080084bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e0ff      	b.n	80086da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b14      	cmp	r3, #20
 80084e6:	f200 80f0 	bhi.w	80086ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008545 	.word	0x08008545
 80084f4:	080086cb 	.word	0x080086cb
 80084f8:	080086cb 	.word	0x080086cb
 80084fc:	080086cb 	.word	0x080086cb
 8008500:	08008585 	.word	0x08008585
 8008504:	080086cb 	.word	0x080086cb
 8008508:	080086cb 	.word	0x080086cb
 800850c:	080086cb 	.word	0x080086cb
 8008510:	080085c7 	.word	0x080085c7
 8008514:	080086cb 	.word	0x080086cb
 8008518:	080086cb 	.word	0x080086cb
 800851c:	080086cb 	.word	0x080086cb
 8008520:	08008607 	.word	0x08008607
 8008524:	080086cb 	.word	0x080086cb
 8008528:	080086cb 	.word	0x080086cb
 800852c:	080086cb 	.word	0x080086cb
 8008530:	08008649 	.word	0x08008649
 8008534:	080086cb 	.word	0x080086cb
 8008538:	080086cb 	.word	0x080086cb
 800853c:	080086cb 	.word	0x080086cb
 8008540:	08008689 	.word	0x08008689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f95a 	bl	8008804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0208 	orr.w	r2, r2, #8
 800855e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0204 	bic.w	r2, r2, #4
 800856e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6999      	ldr	r1, [r3, #24]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	619a      	str	r2, [r3, #24]
      break;
 8008582:	e0a5      	b.n	80086d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f9ca 	bl	8008924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800859e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6999      	ldr	r1, [r3, #24]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	021a      	lsls	r2, r3, #8
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	619a      	str	r2, [r3, #24]
      break;
 80085c4:	e084      	b.n	80086d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fa33 	bl	8008a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0208 	orr.w	r2, r2, #8
 80085e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0204 	bic.w	r2, r2, #4
 80085f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69d9      	ldr	r1, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	61da      	str	r2, [r3, #28]
      break;
 8008604:	e064      	b.n	80086d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fa9b 	bl	8008b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69d9      	ldr	r1, [r3, #28]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	021a      	lsls	r2, r3, #8
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	61da      	str	r2, [r3, #28]
      break;
 8008646:	e043      	b.n	80086d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fb04 	bl	8008c5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0208 	orr.w	r2, r2, #8
 8008662:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0204 	bic.w	r2, r2, #4
 8008672:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008686:	e023      	b.n	80086d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fb48 	bl	8008d24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	021a      	lsls	r2, r3, #8
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80086c8:	e002      	b.n	80086d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	75fb      	strb	r3, [r7, #23]
      break;
 80086ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop

080086e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a3c      	ldr	r2, [pc, #240]	; (80087e8 <TIM_Base_SetConfig+0x104>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00f      	beq.n	800871c <TIM_Base_SetConfig+0x38>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008702:	d00b      	beq.n	800871c <TIM_Base_SetConfig+0x38>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a39      	ldr	r2, [pc, #228]	; (80087ec <TIM_Base_SetConfig+0x108>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d007      	beq.n	800871c <TIM_Base_SetConfig+0x38>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a38      	ldr	r2, [pc, #224]	; (80087f0 <TIM_Base_SetConfig+0x10c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d003      	beq.n	800871c <TIM_Base_SetConfig+0x38>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a37      	ldr	r2, [pc, #220]	; (80087f4 <TIM_Base_SetConfig+0x110>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d108      	bne.n	800872e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a2d      	ldr	r2, [pc, #180]	; (80087e8 <TIM_Base_SetConfig+0x104>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d01b      	beq.n	800876e <TIM_Base_SetConfig+0x8a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873c:	d017      	beq.n	800876e <TIM_Base_SetConfig+0x8a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a2a      	ldr	r2, [pc, #168]	; (80087ec <TIM_Base_SetConfig+0x108>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <TIM_Base_SetConfig+0x8a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a29      	ldr	r2, [pc, #164]	; (80087f0 <TIM_Base_SetConfig+0x10c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d00f      	beq.n	800876e <TIM_Base_SetConfig+0x8a>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a28      	ldr	r2, [pc, #160]	; (80087f4 <TIM_Base_SetConfig+0x110>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00b      	beq.n	800876e <TIM_Base_SetConfig+0x8a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a27      	ldr	r2, [pc, #156]	; (80087f8 <TIM_Base_SetConfig+0x114>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d007      	beq.n	800876e <TIM_Base_SetConfig+0x8a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a26      	ldr	r2, [pc, #152]	; (80087fc <TIM_Base_SetConfig+0x118>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_Base_SetConfig+0x8a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a25      	ldr	r2, [pc, #148]	; (8008800 <TIM_Base_SetConfig+0x11c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d108      	bne.n	8008780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a10      	ldr	r2, [pc, #64]	; (80087e8 <TIM_Base_SetConfig+0x104>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00f      	beq.n	80087cc <TIM_Base_SetConfig+0xe8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a11      	ldr	r2, [pc, #68]	; (80087f4 <TIM_Base_SetConfig+0x110>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00b      	beq.n	80087cc <TIM_Base_SetConfig+0xe8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a10      	ldr	r2, [pc, #64]	; (80087f8 <TIM_Base_SetConfig+0x114>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d007      	beq.n	80087cc <TIM_Base_SetConfig+0xe8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a0f      	ldr	r2, [pc, #60]	; (80087fc <TIM_Base_SetConfig+0x118>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_Base_SetConfig+0xe8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a0e      	ldr	r2, [pc, #56]	; (8008800 <TIM_Base_SetConfig+0x11c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d103      	bne.n	80087d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	615a      	str	r2, [r3, #20]
}
 80087da:	bf00      	nop
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40012c00 	.word	0x40012c00
 80087ec:	40000400 	.word	0x40000400
 80087f0:	40000800 	.word	0x40000800
 80087f4:	40013400 	.word	0x40013400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400
 8008800:	40014800 	.word	0x40014800

08008804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	f023 0201 	bic.w	r2, r3, #1
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0303 	bic.w	r3, r3, #3
 800883e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f023 0302 	bic.w	r3, r3, #2
 8008850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a2c      	ldr	r2, [pc, #176]	; (8008910 <TIM_OC1_SetConfig+0x10c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00f      	beq.n	8008884 <TIM_OC1_SetConfig+0x80>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a2b      	ldr	r2, [pc, #172]	; (8008914 <TIM_OC1_SetConfig+0x110>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00b      	beq.n	8008884 <TIM_OC1_SetConfig+0x80>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a2a      	ldr	r2, [pc, #168]	; (8008918 <TIM_OC1_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d007      	beq.n	8008884 <TIM_OC1_SetConfig+0x80>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a29      	ldr	r2, [pc, #164]	; (800891c <TIM_OC1_SetConfig+0x118>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d003      	beq.n	8008884 <TIM_OC1_SetConfig+0x80>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a28      	ldr	r2, [pc, #160]	; (8008920 <TIM_OC1_SetConfig+0x11c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d10c      	bne.n	800889e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f023 0308 	bic.w	r3, r3, #8
 800888a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f023 0304 	bic.w	r3, r3, #4
 800889c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a1b      	ldr	r2, [pc, #108]	; (8008910 <TIM_OC1_SetConfig+0x10c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00f      	beq.n	80088c6 <TIM_OC1_SetConfig+0xc2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a1a      	ldr	r2, [pc, #104]	; (8008914 <TIM_OC1_SetConfig+0x110>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00b      	beq.n	80088c6 <TIM_OC1_SetConfig+0xc2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a19      	ldr	r2, [pc, #100]	; (8008918 <TIM_OC1_SetConfig+0x114>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d007      	beq.n	80088c6 <TIM_OC1_SetConfig+0xc2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a18      	ldr	r2, [pc, #96]	; (800891c <TIM_OC1_SetConfig+0x118>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d003      	beq.n	80088c6 <TIM_OC1_SetConfig+0xc2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a17      	ldr	r2, [pc, #92]	; (8008920 <TIM_OC1_SetConfig+0x11c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d111      	bne.n	80088ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	621a      	str	r2, [r3, #32]
}
 8008904:	bf00      	nop
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	40012c00 	.word	0x40012c00
 8008914:	40013400 	.word	0x40013400
 8008918:	40014000 	.word	0x40014000
 800891c:	40014400 	.word	0x40014400
 8008920:	40014800 	.word	0x40014800

08008924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0210 	bic.w	r2, r3, #16
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800895e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	4313      	orrs	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f023 0320 	bic.w	r3, r3, #32
 8008972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a28      	ldr	r2, [pc, #160]	; (8008a24 <TIM_OC2_SetConfig+0x100>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d003      	beq.n	8008990 <TIM_OC2_SetConfig+0x6c>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a27      	ldr	r2, [pc, #156]	; (8008a28 <TIM_OC2_SetConfig+0x104>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d10d      	bne.n	80089ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <TIM_OC2_SetConfig+0x100>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00f      	beq.n	80089d4 <TIM_OC2_SetConfig+0xb0>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <TIM_OC2_SetConfig+0x104>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00b      	beq.n	80089d4 <TIM_OC2_SetConfig+0xb0>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a1b      	ldr	r2, [pc, #108]	; (8008a2c <TIM_OC2_SetConfig+0x108>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_OC2_SetConfig+0xb0>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a1a      	ldr	r2, [pc, #104]	; (8008a30 <TIM_OC2_SetConfig+0x10c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_OC2_SetConfig+0xb0>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <TIM_OC2_SetConfig+0x110>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d113      	bne.n	80089fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	621a      	str	r2, [r3, #32]
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40013400 	.word	0x40013400
 8008a2c:	40014000 	.word	0x40014000
 8008a30:	40014400 	.word	0x40014400
 8008a34:	40014800 	.word	0x40014800

08008a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	021b      	lsls	r3, r3, #8
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a27      	ldr	r2, [pc, #156]	; (8008b34 <TIM_OC3_SetConfig+0xfc>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_OC3_SetConfig+0x6a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a26      	ldr	r2, [pc, #152]	; (8008b38 <TIM_OC3_SetConfig+0x100>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d10d      	bne.n	8008abe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <TIM_OC3_SetConfig+0xfc>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00f      	beq.n	8008ae6 <TIM_OC3_SetConfig+0xae>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <TIM_OC3_SetConfig+0x100>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00b      	beq.n	8008ae6 <TIM_OC3_SetConfig+0xae>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1a      	ldr	r2, [pc, #104]	; (8008b3c <TIM_OC3_SetConfig+0x104>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d007      	beq.n	8008ae6 <TIM_OC3_SetConfig+0xae>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <TIM_OC3_SetConfig+0x108>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d003      	beq.n	8008ae6 <TIM_OC3_SetConfig+0xae>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a18      	ldr	r2, [pc, #96]	; (8008b44 <TIM_OC3_SetConfig+0x10c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d113      	bne.n	8008b0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	621a      	str	r2, [r3, #32]
}
 8008b28:	bf00      	nop
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	40012c00 	.word	0x40012c00
 8008b38:	40013400 	.word	0x40013400
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	40014400 	.word	0x40014400
 8008b44:	40014800 	.word	0x40014800

08008b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	031b      	lsls	r3, r3, #12
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a28      	ldr	r2, [pc, #160]	; (8008c48 <TIM_OC4_SetConfig+0x100>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d003      	beq.n	8008bb4 <TIM_OC4_SetConfig+0x6c>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a27      	ldr	r2, [pc, #156]	; (8008c4c <TIM_OC4_SetConfig+0x104>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d10d      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	031b      	lsls	r3, r3, #12
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a1d      	ldr	r2, [pc, #116]	; (8008c48 <TIM_OC4_SetConfig+0x100>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xb0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a1c      	ldr	r2, [pc, #112]	; (8008c4c <TIM_OC4_SetConfig+0x104>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xb0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <TIM_OC4_SetConfig+0x108>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xb0>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1a      	ldr	r2, [pc, #104]	; (8008c54 <TIM_OC4_SetConfig+0x10c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_OC4_SetConfig+0xb0>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a19      	ldr	r2, [pc, #100]	; (8008c58 <TIM_OC4_SetConfig+0x110>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d113      	bne.n	8008c20 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bfe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	019b      	lsls	r3, r3, #6
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	019b      	lsls	r3, r3, #6
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	40012c00 	.word	0x40012c00
 8008c4c:	40013400 	.word	0x40013400
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40014400 	.word	0x40014400
 8008c58:	40014800 	.word	0x40014800

08008c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	041b      	lsls	r3, r3, #16
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a17      	ldr	r2, [pc, #92]	; (8008d10 <TIM_OC5_SetConfig+0xb4>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00f      	beq.n	8008cd6 <TIM_OC5_SetConfig+0x7a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <TIM_OC5_SetConfig+0xb8>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00b      	beq.n	8008cd6 <TIM_OC5_SetConfig+0x7a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <TIM_OC5_SetConfig+0xbc>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d007      	beq.n	8008cd6 <TIM_OC5_SetConfig+0x7a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a14      	ldr	r2, [pc, #80]	; (8008d1c <TIM_OC5_SetConfig+0xc0>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d003      	beq.n	8008cd6 <TIM_OC5_SetConfig+0x7a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a13      	ldr	r2, [pc, #76]	; (8008d20 <TIM_OC5_SetConfig+0xc4>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d109      	bne.n	8008cea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	621a      	str	r2, [r3, #32]
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	40012c00 	.word	0x40012c00
 8008d14:	40013400 	.word	0x40013400
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	40014800 	.word	0x40014800

08008d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	051b      	lsls	r3, r3, #20
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a18      	ldr	r2, [pc, #96]	; (8008ddc <TIM_OC6_SetConfig+0xb8>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00f      	beq.n	8008da0 <TIM_OC6_SetConfig+0x7c>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a17      	ldr	r2, [pc, #92]	; (8008de0 <TIM_OC6_SetConfig+0xbc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00b      	beq.n	8008da0 <TIM_OC6_SetConfig+0x7c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a16      	ldr	r2, [pc, #88]	; (8008de4 <TIM_OC6_SetConfig+0xc0>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <TIM_OC6_SetConfig+0x7c>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a15      	ldr	r2, [pc, #84]	; (8008de8 <TIM_OC6_SetConfig+0xc4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_OC6_SetConfig+0x7c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a14      	ldr	r2, [pc, #80]	; (8008dec <TIM_OC6_SetConfig+0xc8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d109      	bne.n	8008db4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	029b      	lsls	r3, r3, #10
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40012c00 	.word	0x40012c00
 8008de0:	40013400 	.word	0x40013400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40014400 	.word	0x40014400
 8008dec:	40014800 	.word	0x40014800

08008df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 031f 	and.w	r3, r3, #31
 8008e02:	2201      	movs	r2, #1
 8008e04:	fa02 f303 	lsl.w	r3, r2, r3
 8008e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a1a      	ldr	r2, [r3, #32]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	43db      	mvns	r3, r3
 8008e12:	401a      	ands	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a1a      	ldr	r2, [r3, #32]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f003 031f 	and.w	r3, r3, #31
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	fa01 f303 	lsl.w	r3, r1, r3
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	621a      	str	r2, [r3, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
	...

08008e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d101      	bne.n	8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e50:	2302      	movs	r3, #2
 8008e52:	e065      	b.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a2c      	ldr	r2, [pc, #176]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d004      	beq.n	8008e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a2b      	ldr	r2, [pc, #172]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d108      	bne.n	8008e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1b      	ldr	r2, [pc, #108]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d018      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eca:	d013      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00e      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a17      	ldr	r2, [pc, #92]	; (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d009      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a12      	ldr	r2, [pc, #72]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d004      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d10c      	bne.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	40012c00 	.word	0x40012c00
 8008f30:	40013400 	.word	0x40013400
 8008f34:	40000400 	.word	0x40000400
 8008f38:	40000800 	.word	0x40000800
 8008f3c:	40014000 	.word	0x40014000

08008f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e087      	b.n	800906c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	041b      	lsls	r3, r3, #16
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a27      	ldr	r2, [pc, #156]	; (8009078 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d004      	beq.n	8008fea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a25      	ldr	r2, [pc, #148]	; (800907c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d106      	bne.n	8008ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1e      	ldr	r2, [pc, #120]	; (8009078 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d004      	beq.n	800900c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a1d      	ldr	r2, [pc, #116]	; (800907c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d126      	bne.n	800905a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	051b      	lsls	r3, r3, #20
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	4313      	orrs	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a0d      	ldr	r2, [pc, #52]	; (800907c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d106      	bne.n	800905a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	40012c00 	.word	0x40012c00
 800907c:	40013400 	.word	0x40013400

08009080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e042      	b.n	8009118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009098:	2b00      	cmp	r3, #0
 800909a:	d106      	bne.n	80090aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7fb fcf9 	bl	8004a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2224      	movs	r2, #36	; 0x24
 80090ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0201 	bic.w	r2, r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f82c 	bl	8009120 <UART_SetConfig>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d101      	bne.n	80090d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e022      	b.n	8009118 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 faec 	bl	80096b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689a      	ldr	r2, [r3, #8]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0201 	orr.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fb73 	bl	80097fc <UART_CheckIdleState>
 8009116:	4603      	mov	r3, r0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009124:	b08c      	sub	sp, #48	; 0x30
 8009126:	af00      	add	r7, sp, #0
 8009128:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	431a      	orrs	r2, r3
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	431a      	orrs	r2, r3
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	4313      	orrs	r3, r2
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4bab      	ldr	r3, [pc, #684]	; (80093fc <UART_SetConfig+0x2dc>)
 8009150:	4013      	ands	r3, r2
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009158:	430b      	orrs	r3, r1
 800915a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4aa0      	ldr	r2, [pc, #640]	; (8009400 <UART_SetConfig+0x2e0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d004      	beq.n	800918c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009188:	4313      	orrs	r3, r2
 800918a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009196:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a0:	430b      	orrs	r3, r1
 80091a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	f023 010f 	bic.w	r1, r3, #15
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a91      	ldr	r2, [pc, #580]	; (8009404 <UART_SetConfig+0x2e4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d125      	bne.n	8009210 <UART_SetConfig+0xf0>
 80091c4:	4b90      	ldr	r3, [pc, #576]	; (8009408 <UART_SetConfig+0x2e8>)
 80091c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d81a      	bhi.n	8009208 <UART_SetConfig+0xe8>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <UART_SetConfig+0xb8>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	080091f9 	.word	0x080091f9
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	08009201 	.word	0x08009201
 80091e8:	2301      	movs	r3, #1
 80091ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ee:	e0d6      	b.n	800939e <UART_SetConfig+0x27e>
 80091f0:	2302      	movs	r3, #2
 80091f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091f6:	e0d2      	b.n	800939e <UART_SetConfig+0x27e>
 80091f8:	2304      	movs	r3, #4
 80091fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091fe:	e0ce      	b.n	800939e <UART_SetConfig+0x27e>
 8009200:	2308      	movs	r3, #8
 8009202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009206:	e0ca      	b.n	800939e <UART_SetConfig+0x27e>
 8009208:	2310      	movs	r3, #16
 800920a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800920e:	e0c6      	b.n	800939e <UART_SetConfig+0x27e>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a7d      	ldr	r2, [pc, #500]	; (800940c <UART_SetConfig+0x2ec>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d138      	bne.n	800928c <UART_SetConfig+0x16c>
 800921a:	4b7b      	ldr	r3, [pc, #492]	; (8009408 <UART_SetConfig+0x2e8>)
 800921c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009220:	f003 030c 	and.w	r3, r3, #12
 8009224:	2b0c      	cmp	r3, #12
 8009226:	d82d      	bhi.n	8009284 <UART_SetConfig+0x164>
 8009228:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <UART_SetConfig+0x110>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009265 	.word	0x08009265
 8009234:	08009285 	.word	0x08009285
 8009238:	08009285 	.word	0x08009285
 800923c:	08009285 	.word	0x08009285
 8009240:	08009275 	.word	0x08009275
 8009244:	08009285 	.word	0x08009285
 8009248:	08009285 	.word	0x08009285
 800924c:	08009285 	.word	0x08009285
 8009250:	0800926d 	.word	0x0800926d
 8009254:	08009285 	.word	0x08009285
 8009258:	08009285 	.word	0x08009285
 800925c:	08009285 	.word	0x08009285
 8009260:	0800927d 	.word	0x0800927d
 8009264:	2300      	movs	r3, #0
 8009266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800926a:	e098      	b.n	800939e <UART_SetConfig+0x27e>
 800926c:	2302      	movs	r3, #2
 800926e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009272:	e094      	b.n	800939e <UART_SetConfig+0x27e>
 8009274:	2304      	movs	r3, #4
 8009276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800927a:	e090      	b.n	800939e <UART_SetConfig+0x27e>
 800927c:	2308      	movs	r3, #8
 800927e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009282:	e08c      	b.n	800939e <UART_SetConfig+0x27e>
 8009284:	2310      	movs	r3, #16
 8009286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800928a:	e088      	b.n	800939e <UART_SetConfig+0x27e>
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a5f      	ldr	r2, [pc, #380]	; (8009410 <UART_SetConfig+0x2f0>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d125      	bne.n	80092e2 <UART_SetConfig+0x1c2>
 8009296:	4b5c      	ldr	r3, [pc, #368]	; (8009408 <UART_SetConfig+0x2e8>)
 8009298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092a0:	2b30      	cmp	r3, #48	; 0x30
 80092a2:	d016      	beq.n	80092d2 <UART_SetConfig+0x1b2>
 80092a4:	2b30      	cmp	r3, #48	; 0x30
 80092a6:	d818      	bhi.n	80092da <UART_SetConfig+0x1ba>
 80092a8:	2b20      	cmp	r3, #32
 80092aa:	d00a      	beq.n	80092c2 <UART_SetConfig+0x1a2>
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d814      	bhi.n	80092da <UART_SetConfig+0x1ba>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <UART_SetConfig+0x19a>
 80092b4:	2b10      	cmp	r3, #16
 80092b6:	d008      	beq.n	80092ca <UART_SetConfig+0x1aa>
 80092b8:	e00f      	b.n	80092da <UART_SetConfig+0x1ba>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092c0:	e06d      	b.n	800939e <UART_SetConfig+0x27e>
 80092c2:	2302      	movs	r3, #2
 80092c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092c8:	e069      	b.n	800939e <UART_SetConfig+0x27e>
 80092ca:	2304      	movs	r3, #4
 80092cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092d0:	e065      	b.n	800939e <UART_SetConfig+0x27e>
 80092d2:	2308      	movs	r3, #8
 80092d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092d8:	e061      	b.n	800939e <UART_SetConfig+0x27e>
 80092da:	2310      	movs	r3, #16
 80092dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092e0:	e05d      	b.n	800939e <UART_SetConfig+0x27e>
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a4b      	ldr	r2, [pc, #300]	; (8009414 <UART_SetConfig+0x2f4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d125      	bne.n	8009338 <UART_SetConfig+0x218>
 80092ec:	4b46      	ldr	r3, [pc, #280]	; (8009408 <UART_SetConfig+0x2e8>)
 80092ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80092f6:	2bc0      	cmp	r3, #192	; 0xc0
 80092f8:	d016      	beq.n	8009328 <UART_SetConfig+0x208>
 80092fa:	2bc0      	cmp	r3, #192	; 0xc0
 80092fc:	d818      	bhi.n	8009330 <UART_SetConfig+0x210>
 80092fe:	2b80      	cmp	r3, #128	; 0x80
 8009300:	d00a      	beq.n	8009318 <UART_SetConfig+0x1f8>
 8009302:	2b80      	cmp	r3, #128	; 0x80
 8009304:	d814      	bhi.n	8009330 <UART_SetConfig+0x210>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <UART_SetConfig+0x1f0>
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	d008      	beq.n	8009320 <UART_SetConfig+0x200>
 800930e:	e00f      	b.n	8009330 <UART_SetConfig+0x210>
 8009310:	2300      	movs	r3, #0
 8009312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009316:	e042      	b.n	800939e <UART_SetConfig+0x27e>
 8009318:	2302      	movs	r3, #2
 800931a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800931e:	e03e      	b.n	800939e <UART_SetConfig+0x27e>
 8009320:	2304      	movs	r3, #4
 8009322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009326:	e03a      	b.n	800939e <UART_SetConfig+0x27e>
 8009328:	2308      	movs	r3, #8
 800932a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800932e:	e036      	b.n	800939e <UART_SetConfig+0x27e>
 8009330:	2310      	movs	r3, #16
 8009332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009336:	e032      	b.n	800939e <UART_SetConfig+0x27e>
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a30      	ldr	r2, [pc, #192]	; (8009400 <UART_SetConfig+0x2e0>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d12a      	bne.n	8009398 <UART_SetConfig+0x278>
 8009342:	4b31      	ldr	r3, [pc, #196]	; (8009408 <UART_SetConfig+0x2e8>)
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800934c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009350:	d01a      	beq.n	8009388 <UART_SetConfig+0x268>
 8009352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009356:	d81b      	bhi.n	8009390 <UART_SetConfig+0x270>
 8009358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800935c:	d00c      	beq.n	8009378 <UART_SetConfig+0x258>
 800935e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009362:	d815      	bhi.n	8009390 <UART_SetConfig+0x270>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <UART_SetConfig+0x250>
 8009368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800936c:	d008      	beq.n	8009380 <UART_SetConfig+0x260>
 800936e:	e00f      	b.n	8009390 <UART_SetConfig+0x270>
 8009370:	2300      	movs	r3, #0
 8009372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009376:	e012      	b.n	800939e <UART_SetConfig+0x27e>
 8009378:	2302      	movs	r3, #2
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800937e:	e00e      	b.n	800939e <UART_SetConfig+0x27e>
 8009380:	2304      	movs	r3, #4
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009386:	e00a      	b.n	800939e <UART_SetConfig+0x27e>
 8009388:	2308      	movs	r3, #8
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800938e:	e006      	b.n	800939e <UART_SetConfig+0x27e>
 8009390:	2310      	movs	r3, #16
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009396:	e002      	b.n	800939e <UART_SetConfig+0x27e>
 8009398:	2310      	movs	r3, #16
 800939a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a17      	ldr	r2, [pc, #92]	; (8009400 <UART_SetConfig+0x2e0>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	f040 80a8 	bne.w	80094fa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d834      	bhi.n	800941c <UART_SetConfig+0x2fc>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <UART_SetConfig+0x298>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093dd 	.word	0x080093dd
 80093bc:	0800941d 	.word	0x0800941d
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	080093eb 	.word	0x080093eb
 80093cc:	0800941d 	.word	0x0800941d
 80093d0:	0800941d 	.word	0x0800941d
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	080093f3 	.word	0x080093f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093dc:	f7fe fbb2 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 80093e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093e2:	e021      	b.n	8009428 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <UART_SetConfig+0x2f8>)
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093e8:	e01e      	b.n	8009428 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ea:	f7fe fb3d 	bl	8007a68 <HAL_RCC_GetSysClockFreq>
 80093ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093f0:	e01a      	b.n	8009428 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093f8:	e016      	b.n	8009428 <UART_SetConfig+0x308>
 80093fa:	bf00      	nop
 80093fc:	cfff69f3 	.word	0xcfff69f3
 8009400:	40008000 	.word	0x40008000
 8009404:	40013800 	.word	0x40013800
 8009408:	40021000 	.word	0x40021000
 800940c:	40004400 	.word	0x40004400
 8009410:	40004800 	.word	0x40004800
 8009414:	40004c00 	.word	0x40004c00
 8009418:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009426:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 812a 	beq.w	8009684 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	4a9e      	ldr	r2, [pc, #632]	; (80096b0 <UART_SetConfig+0x590>)
 8009436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800943a:	461a      	mov	r2, r3
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009442:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	4613      	mov	r3, r2
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	4413      	add	r3, r2
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	429a      	cmp	r2, r3
 8009452:	d305      	bcc.n	8009460 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	429a      	cmp	r2, r3
 800945e:	d903      	bls.n	8009468 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009466:	e10d      	b.n	8009684 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	2200      	movs	r2, #0
 800946c:	60bb      	str	r3, [r7, #8]
 800946e:	60fa      	str	r2, [r7, #12]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	4a8e      	ldr	r2, [pc, #568]	; (80096b0 <UART_SetConfig+0x590>)
 8009476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800947a:	b29b      	uxth	r3, r3
 800947c:	2200      	movs	r2, #0
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	607a      	str	r2, [r7, #4]
 8009482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800948a:	f7f7 fb0b 	bl	8000aa4 <__aeabi_uldivmod>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4610      	mov	r0, r2
 8009494:	4619      	mov	r1, r3
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	020b      	lsls	r3, r1, #8
 80094a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094a4:	0202      	lsls	r2, r0, #8
 80094a6:	6979      	ldr	r1, [r7, #20]
 80094a8:	6849      	ldr	r1, [r1, #4]
 80094aa:	0849      	lsrs	r1, r1, #1
 80094ac:	2000      	movs	r0, #0
 80094ae:	460c      	mov	r4, r1
 80094b0:	4605      	mov	r5, r0
 80094b2:	eb12 0804 	adds.w	r8, r2, r4
 80094b6:	eb43 0905 	adc.w	r9, r3, r5
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	469a      	mov	sl, r3
 80094c2:	4693      	mov	fp, r2
 80094c4:	4652      	mov	r2, sl
 80094c6:	465b      	mov	r3, fp
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	f7f7 faea 	bl	8000aa4 <__aeabi_uldivmod>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4613      	mov	r3, r2
 80094d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094de:	d308      	bcc.n	80094f2 <UART_SetConfig+0x3d2>
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094e6:	d204      	bcs.n	80094f2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6a3a      	ldr	r2, [r7, #32]
 80094ee:	60da      	str	r2, [r3, #12]
 80094f0:	e0c8      	b.n	8009684 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80094f8:	e0c4      	b.n	8009684 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009502:	d167      	bne.n	80095d4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009508:	2b08      	cmp	r3, #8
 800950a:	d828      	bhi.n	800955e <UART_SetConfig+0x43e>
 800950c:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <UART_SetConfig+0x3f4>)
 800950e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009512:	bf00      	nop
 8009514:	08009539 	.word	0x08009539
 8009518:	08009541 	.word	0x08009541
 800951c:	08009549 	.word	0x08009549
 8009520:	0800955f 	.word	0x0800955f
 8009524:	0800954f 	.word	0x0800954f
 8009528:	0800955f 	.word	0x0800955f
 800952c:	0800955f 	.word	0x0800955f
 8009530:	0800955f 	.word	0x0800955f
 8009534:	08009557 	.word	0x08009557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009538:	f7fe fb04 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800953c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800953e:	e014      	b.n	800956a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009540:	f7fe fb16 	bl	8007b70 <HAL_RCC_GetPCLK2Freq>
 8009544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009546:	e010      	b.n	800956a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009548:	4b5a      	ldr	r3, [pc, #360]	; (80096b4 <UART_SetConfig+0x594>)
 800954a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800954c:	e00d      	b.n	800956a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800954e:	f7fe fa8b 	bl	8007a68 <HAL_RCC_GetSysClockFreq>
 8009552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009554:	e009      	b.n	800956a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800955c:	e005      	b.n	800956a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 8089 	beq.w	8009684 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	4a4e      	ldr	r2, [pc, #312]	; (80096b0 <UART_SetConfig+0x590>)
 8009578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800957c:	461a      	mov	r2, r3
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	fbb3 f3f2 	udiv	r3, r3, r2
 8009584:	005a      	lsls	r2, r3, #1
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	441a      	add	r2, r3
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	fbb2 f3f3 	udiv	r3, r2, r3
 8009596:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b0f      	cmp	r3, #15
 800959c:	d916      	bls.n	80095cc <UART_SetConfig+0x4ac>
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095a4:	d212      	bcs.n	80095cc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f023 030f 	bic.w	r3, r3, #15
 80095ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	085b      	lsrs	r3, r3, #1
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	8bfb      	ldrh	r3, [r7, #30]
 80095be:	4313      	orrs	r3, r2
 80095c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	8bfa      	ldrh	r2, [r7, #30]
 80095c8:	60da      	str	r2, [r3, #12]
 80095ca:	e05b      	b.n	8009684 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80095d2:	e057      	b.n	8009684 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d828      	bhi.n	800962e <UART_SetConfig+0x50e>
 80095dc:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <UART_SetConfig+0x4c4>)
 80095de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e2:	bf00      	nop
 80095e4:	08009609 	.word	0x08009609
 80095e8:	08009611 	.word	0x08009611
 80095ec:	08009619 	.word	0x08009619
 80095f0:	0800962f 	.word	0x0800962f
 80095f4:	0800961f 	.word	0x0800961f
 80095f8:	0800962f 	.word	0x0800962f
 80095fc:	0800962f 	.word	0x0800962f
 8009600:	0800962f 	.word	0x0800962f
 8009604:	08009627 	.word	0x08009627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009608:	f7fe fa9c 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800960c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800960e:	e014      	b.n	800963a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009610:	f7fe faae 	bl	8007b70 <HAL_RCC_GetPCLK2Freq>
 8009614:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009616:	e010      	b.n	800963a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009618:	4b26      	ldr	r3, [pc, #152]	; (80096b4 <UART_SetConfig+0x594>)
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800961c:	e00d      	b.n	800963a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800961e:	f7fe fa23 	bl	8007a68 <HAL_RCC_GetSysClockFreq>
 8009622:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009624:	e009      	b.n	800963a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800962c:	e005      	b.n	800963a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009638:	bf00      	nop
    }

    if (pclk != 0U)
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	2b00      	cmp	r3, #0
 800963e:	d021      	beq.n	8009684 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	4a1a      	ldr	r2, [pc, #104]	; (80096b0 <UART_SetConfig+0x590>)
 8009646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800964a:	461a      	mov	r2, r3
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	085b      	lsrs	r3, r3, #1
 8009658:	441a      	add	r2, r3
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009662:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d909      	bls.n	800967e <UART_SetConfig+0x55e>
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009670:	d205      	bcs.n	800967e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	b29a      	uxth	r2, r3
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60da      	str	r2, [r3, #12]
 800967c:	e002      	b.n	8009684 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2201      	movs	r2, #1
 8009688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2201      	movs	r2, #1
 8009690:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2200      	movs	r2, #0
 8009698:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2200      	movs	r2, #0
 800969e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80096a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3730      	adds	r7, #48	; 0x30
 80096a8:	46bd      	mov	sp, r7
 80096aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096ae:	bf00      	nop
 80096b0:	08009ce4 	.word	0x08009ce4
 80096b4:	00f42400 	.word	0x00f42400

080096b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00a      	beq.n	8009726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974c:	f003 0310 	and.w	r3, r3, #16
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01a      	beq.n	80097ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097b6:	d10a      	bne.n	80097ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	605a      	str	r2, [r3, #4]
  }
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af02      	add	r7, sp, #8
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800980c:	f7fb fcfc 	bl	8005208 <HAL_GetTick>
 8009810:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b08      	cmp	r3, #8
 800981e:	d10e      	bne.n	800983e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f82f 	bl	8009892 <UART_WaitOnFlagUntilTimeout>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e025      	b.n	800988a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b04      	cmp	r3, #4
 800984a:	d10e      	bne.n	800986a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800984c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f819 	bl	8009892 <UART_WaitOnFlagUntilTimeout>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e00f      	b.n	800988a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b09c      	sub	sp, #112	; 0x70
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	4613      	mov	r3, r2
 80098a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a2:	e0a9      	b.n	80099f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098aa:	f000 80a5 	beq.w	80099f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ae:	f7fb fcab 	bl	8005208 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d302      	bcc.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80098be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d140      	bne.n	8009946 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098d8:	667b      	str	r3, [r7, #100]	; 0x64
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80098f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e6      	bne.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3308      	adds	r3, #8
 80098fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	f023 0301 	bic.w	r3, r3, #1
 800990c:	663b      	str	r3, [r7, #96]	; 0x60
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3308      	adds	r3, #8
 8009914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009916:	64ba      	str	r2, [r7, #72]	; 0x48
 8009918:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800991c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e5      	bne.n	80098f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2220      	movs	r2, #32
 8009936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e069      	b.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d051      	beq.n	80099f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800995e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009962:	d149      	bne.n	80099f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800996c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009982:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800998c:	637b      	str	r3, [r7, #52]	; 0x34
 800998e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e6      	bne.n	800996e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3308      	adds	r3, #8
 80099a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	613b      	str	r3, [r7, #16]
   return(result);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f023 0301 	bic.w	r3, r3, #1
 80099b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3308      	adds	r3, #8
 80099be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099c0:	623a      	str	r2, [r7, #32]
 80099c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	69f9      	ldr	r1, [r7, #28]
 80099c6:	6a3a      	ldr	r2, [r7, #32]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e5      	bne.n	80099a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2220      	movs	r2, #32
 80099e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e010      	b.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69da      	ldr	r2, [r3, #28]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4013      	ands	r3, r2
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	bf0c      	ite	eq
 8009a08:	2301      	moveq	r3, #1
 8009a0a:	2300      	movne	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	461a      	mov	r2, r3
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	f43f af46 	beq.w	80098a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3770      	adds	r7, #112	; 0x70
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d101      	bne.n	8009a38 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e027      	b.n	8009a88 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2224      	movs	r2, #36	; 0x24
 8009a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 0201 	bic.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d101      	bne.n	8009aac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e02d      	b.n	8009b08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2224      	movs	r2, #36	; 0x24
 8009ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0201 	bic.w	r2, r2, #1
 8009ad2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f84f 	bl	8009b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d101      	bne.n	8009b28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e02d      	b.n	8009b84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2224      	movs	r2, #36	; 0x24
 8009b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0201 	bic.w	r2, r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f811 	bl	8009b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d108      	bne.n	8009bae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bac:	e031      	b.n	8009c12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bae:	2308      	movs	r3, #8
 8009bb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bb2:	2308      	movs	r3, #8
 8009bb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	0e5b      	lsrs	r3, r3, #25
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	0f5b      	lsrs	r3, r3, #29
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	f003 0307 	and.w	r3, r3, #7
 8009bd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
 8009bd8:	7b3a      	ldrb	r2, [r7, #12]
 8009bda:	4911      	ldr	r1, [pc, #68]	; (8009c20 <UARTEx_SetNbDataToProcess+0x94>)
 8009bdc:	5c8a      	ldrb	r2, [r1, r2]
 8009bde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009be2:	7b3a      	ldrb	r2, [r7, #12]
 8009be4:	490f      	ldr	r1, [pc, #60]	; (8009c24 <UARTEx_SetNbDataToProcess+0x98>)
 8009be6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	7b7a      	ldrb	r2, [r7, #13]
 8009bf8:	4909      	ldr	r1, [pc, #36]	; (8009c20 <UARTEx_SetNbDataToProcess+0x94>)
 8009bfa:	5c8a      	ldrb	r2, [r1, r2]
 8009bfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c00:	7b7a      	ldrb	r2, [r7, #13]
 8009c02:	4908      	ldr	r1, [pc, #32]	; (8009c24 <UARTEx_SetNbDataToProcess+0x98>)
 8009c04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c06:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	08009cfc 	.word	0x08009cfc
 8009c24:	08009d04 	.word	0x08009d04

08009c28 <__libc_init_array>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4d0d      	ldr	r5, [pc, #52]	; (8009c60 <__libc_init_array+0x38>)
 8009c2c:	4c0d      	ldr	r4, [pc, #52]	; (8009c64 <__libc_init_array+0x3c>)
 8009c2e:	1b64      	subs	r4, r4, r5
 8009c30:	10a4      	asrs	r4, r4, #2
 8009c32:	2600      	movs	r6, #0
 8009c34:	42a6      	cmp	r6, r4
 8009c36:	d109      	bne.n	8009c4c <__libc_init_array+0x24>
 8009c38:	4d0b      	ldr	r5, [pc, #44]	; (8009c68 <__libc_init_array+0x40>)
 8009c3a:	4c0c      	ldr	r4, [pc, #48]	; (8009c6c <__libc_init_array+0x44>)
 8009c3c:	f000 f82e 	bl	8009c9c <_init>
 8009c40:	1b64      	subs	r4, r4, r5
 8009c42:	10a4      	asrs	r4, r4, #2
 8009c44:	2600      	movs	r6, #0
 8009c46:	42a6      	cmp	r6, r4
 8009c48:	d105      	bne.n	8009c56 <__libc_init_array+0x2e>
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c50:	4798      	blx	r3
 8009c52:	3601      	adds	r6, #1
 8009c54:	e7ee      	b.n	8009c34 <__libc_init_array+0xc>
 8009c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5a:	4798      	blx	r3
 8009c5c:	3601      	adds	r6, #1
 8009c5e:	e7f2      	b.n	8009c46 <__libc_init_array+0x1e>
 8009c60:	08009d14 	.word	0x08009d14
 8009c64:	08009d14 	.word	0x08009d14
 8009c68:	08009d14 	.word	0x08009d14
 8009c6c:	08009d18 	.word	0x08009d18

08009c70 <memcpy>:
 8009c70:	440a      	add	r2, r1
 8009c72:	4291      	cmp	r1, r2
 8009c74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c78:	d100      	bne.n	8009c7c <memcpy+0xc>
 8009c7a:	4770      	bx	lr
 8009c7c:	b510      	push	{r4, lr}
 8009c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c86:	4291      	cmp	r1, r2
 8009c88:	d1f9      	bne.n	8009c7e <memcpy+0xe>
 8009c8a:	bd10      	pop	{r4, pc}

08009c8c <memset>:
 8009c8c:	4402      	add	r2, r0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d100      	bne.n	8009c96 <memset+0xa>
 8009c94:	4770      	bx	lr
 8009c96:	f803 1b01 	strb.w	r1, [r3], #1
 8009c9a:	e7f9      	b.n	8009c90 <memset+0x4>

08009c9c <_init>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr

08009ca8 <_fini>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr
